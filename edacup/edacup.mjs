var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
import yo from "readline";
import Gr from "child_process";
import Sg from "fs";
import kr from "ws";
import yr from "@roamhq/wrtc";
import Mr from "crypto";
import Mo from "path";
var require_stdin = __commonJS({
  "<stdin>"(exports, module) {
    (async () => {
      const _t = "180", Kr = 0, $e = 1, Ur = 2, cD = 1, Nr = 2, tC = 3, Wg = 0, Dg = 1, _g = 2, pC = 0, pB = 1, As = 2, Is = 3, gs = 4, Fr = 5, PC = 100, Jr = 101, Rr = 102, pr = 103, dr = 104, Yr = 200, qr = 201, Lr = 202, fr = 203, Ko = 204, Uo = 205, ur = 206, Hr = 207, mr = 208, Tr = 209, br = 210, xr = 211, Or = 212, _r = 213, Zr = 214, No = 0, Fo = 1, Jo = 2, qB = 3, Ro = 4, po = 5, Yo = 6, qo = 7, SD = 0, vr = 1, Pr = 2, dC = 0, Wr = 1, jr = 2, Vr = 3, Xr = 4, zr = 5, $r = 6, Ah = 7, Cs = "attached", Ih = "detached", Zt = 300, LB = 301, fB = 302, LE = 303, Lo = 304, XE = 306, uB = 1e3, Zg = 1001, fE = 1002, og = 1003, lD = 1004, aQ = 1005, sg = 1006, NE = 1007, aC = 1008, gh = 1008, jg = 1009, GD = 1010, kD = 1011, kQ = 1012, vt = 1013, IB = 1014, dg = 1015, DC = 1016, Pt = 1017, Wt = 1018, yQ = 1020, yD = 35902, MD = 35899, KD = 1021, UD = 1022, ag = 1023, MQ = 1026, KQ = 1027, jt = 1028, Vt = 1029, ND = 1030, Xt = 1031, zt = 1033, FE = 33776, JE = 33777, RE = 33778, pE = 33779, fo = 35840, uo = 35841, Ho = 35842, mo = 35843, To = 36196, bo = 37492, xo = 37496, Oo = 37808, _o = 37809, Zo = 37810, vo = 37811, Po = 37812, Wo = 37813, jo = 37814, Vo = 37815, Xo = 37816, zo = 37817, $o = 37818, At = 37819, It = 37820, gt = 37821, Ct = 36492, Bt = 36494, Qt = 36495, Et = 36283, it = 36284, ot = 36285, tt = 36286, UQ = 2300, NQ = 2301, wi = 2302, Bs = 2400, Qs = 2401, Es = 2402, Ch = 2500, Bh = 0, FD = 1, et = 2, Qh = 3200, Eh = 3201, JD = 0, ih = 1, RC = "", PI = "srgb", Ag = "srgb-linear", uE = "linear", eI = "srgb", oB = 7680, is = 519, oh = 512, th = 513, eh = 514, RD = 515, sh = 516, ah = 517, Dh = 518, nh = 519, st = 35044, os = "300 es", vg = 2e3, HE = 2001;
      class PB {
        addEventListener(A, I) {
          this._listeners === void 0 && (this._listeners = {});
          const g = this._listeners;
          g[A] === void 0 && (g[A] = []), g[A].indexOf(I) === -1 && g[A].push(I);
        }
        hasEventListener(A, I) {
          const g = this._listeners;
          return g === void 0 ? false : g[A] !== void 0 && g[A].indexOf(I) !== -1;
        }
        removeEventListener(A, I) {
          const g = this._listeners;
          if (g === void 0) return;
          const B = g[A];
          if (B !== void 0) {
            const Q = B.indexOf(I);
            Q !== -1 && B.splice(Q, 1);
          }
        }
        dispatchEvent(A) {
          const I = this._listeners;
          if (I === void 0) return;
          const g = I[A.type];
          if (g !== void 0) {
            A.target = this;
            const B = g.slice(0);
            for (let Q = 0, E = B.length; Q < E; Q++) B[Q].call(this, A);
            A.target = null;
          }
        }
      }
      const XI = [
        "00",
        "01",
        "02",
        "03",
        "04",
        "05",
        "06",
        "07",
        "08",
        "09",
        "0a",
        "0b",
        "0c",
        "0d",
        "0e",
        "0f",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "1a",
        "1b",
        "1c",
        "1d",
        "1e",
        "1f",
        "20",
        "21",
        "22",
        "23",
        "24",
        "25",
        "26",
        "27",
        "28",
        "29",
        "2a",
        "2b",
        "2c",
        "2d",
        "2e",
        "2f",
        "30",
        "31",
        "32",
        "33",
        "34",
        "35",
        "36",
        "37",
        "38",
        "39",
        "3a",
        "3b",
        "3c",
        "3d",
        "3e",
        "3f",
        "40",
        "41",
        "42",
        "43",
        "44",
        "45",
        "46",
        "47",
        "48",
        "49",
        "4a",
        "4b",
        "4c",
        "4d",
        "4e",
        "4f",
        "50",
        "51",
        "52",
        "53",
        "54",
        "55",
        "56",
        "57",
        "58",
        "59",
        "5a",
        "5b",
        "5c",
        "5d",
        "5e",
        "5f",
        "60",
        "61",
        "62",
        "63",
        "64",
        "65",
        "66",
        "67",
        "68",
        "69",
        "6a",
        "6b",
        "6c",
        "6d",
        "6e",
        "6f",
        "70",
        "71",
        "72",
        "73",
        "74",
        "75",
        "76",
        "77",
        "78",
        "79",
        "7a",
        "7b",
        "7c",
        "7d",
        "7e",
        "7f",
        "80",
        "81",
        "82",
        "83",
        "84",
        "85",
        "86",
        "87",
        "88",
        "89",
        "8a",
        "8b",
        "8c",
        "8d",
        "8e",
        "8f",
        "90",
        "91",
        "92",
        "93",
        "94",
        "95",
        "96",
        "97",
        "98",
        "99",
        "9a",
        "9b",
        "9c",
        "9d",
        "9e",
        "9f",
        "a0",
        "a1",
        "a2",
        "a3",
        "a4",
        "a5",
        "a6",
        "a7",
        "a8",
        "a9",
        "aa",
        "ab",
        "ac",
        "ad",
        "ae",
        "af",
        "b0",
        "b1",
        "b2",
        "b3",
        "b4",
        "b5",
        "b6",
        "b7",
        "b8",
        "b9",
        "ba",
        "bb",
        "bc",
        "bd",
        "be",
        "bf",
        "c0",
        "c1",
        "c2",
        "c3",
        "c4",
        "c5",
        "c6",
        "c7",
        "c8",
        "c9",
        "ca",
        "cb",
        "cc",
        "cd",
        "ce",
        "cf",
        "d0",
        "d1",
        "d2",
        "d3",
        "d4",
        "d5",
        "d6",
        "d7",
        "d8",
        "d9",
        "da",
        "db",
        "dc",
        "dd",
        "de",
        "df",
        "e0",
        "e1",
        "e2",
        "e3",
        "e4",
        "e5",
        "e6",
        "e7",
        "e8",
        "e9",
        "ea",
        "eb",
        "ec",
        "ed",
        "ee",
        "ef",
        "f0",
        "f1",
        "f2",
        "f3",
        "f4",
        "f5",
        "f6",
        "f7",
        "f8",
        "f9",
        "fa",
        "fb",
        "fc",
        "fd",
        "fe",
        "ff"
      ];
      let ts = 1234567;
      const rQ = Math.PI / 180, HB = 180 / Math.PI;
      function Yg() {
        const C = Math.random() * 4294967295 | 0, A = Math.random() * 4294967295 | 0, I = Math.random() * 4294967295 | 0, g = Math.random() * 4294967295 | 0;
        return (XI[C & 255] + XI[C >> 8 & 255] + XI[C >> 16 & 255] + XI[C >> 24 & 255] + "-" + XI[A & 255] + XI[A >> 8 & 255] + "-" + XI[A >> 16 & 15 | 64] + XI[A >> 24 & 255] + "-" + XI[I & 63 | 128] + XI[I >> 8 & 255] + "-" + XI[I >> 16 & 255] + XI[I >> 24 & 255] + XI[g & 255] + XI[g >> 8 & 255] + XI[g >> 16 & 255] + XI[g >> 24 & 255]).toLowerCase();
      }
      function WA(C, A, I) {
        return Math.max(A, Math.min(I, C));
      }
      function $t(C, A) {
        return (C % A + A) % A;
      }
      function rh(C, A, I, g, B) {
        return g + (C - A) * (B - g) / (I - A);
      }
      function hh(C, A, I) {
        return C !== A ? (I - C) / (A - C) : 0;
      }
      function hQ(C, A, I) {
        return (1 - I) * C + I * A;
      }
      function wh(C, A, I, g) {
        return hQ(C, A, 1 - Math.exp(-I * g));
      }
      function ch(C, A = 1) {
        return A - Math.abs($t(C, A * 2) - A);
      }
      function Sh(C, A, I) {
        return C <= A ? 0 : C >= I ? 1 : (C = (C - A) / (I - A), C * C * (3 - 2 * C));
      }
      function lh(C, A, I) {
        return C <= A ? 0 : C >= I ? 1 : (C = (C - A) / (I - A), C * C * C * (C * (C * 6 - 15) + 10));
      }
      function Gh(C, A) {
        return C + Math.floor(Math.random() * (A - C + 1));
      }
      function kh(C, A) {
        return C + Math.random() * (A - C);
      }
      function yh(C) {
        return C * (0.5 - Math.random());
      }
      function Mh(C) {
        C !== void 0 && (ts = C);
        let A = ts += 1831565813;
        return A = Math.imul(A ^ A >>> 15, A | 1), A ^= A + Math.imul(A ^ A >>> 7, A | 61), ((A ^ A >>> 14) >>> 0) / 4294967296;
      }
      function Kh(C) {
        return C * rQ;
      }
      function Uh(C) {
        return C * HB;
      }
      function Nh(C) {
        return (C & C - 1) === 0 && C !== 0;
      }
      function Fh(C) {
        return Math.pow(2, Math.ceil(Math.log(C) / Math.LN2));
      }
      function Jh(C) {
        return Math.pow(2, Math.floor(Math.log(C) / Math.LN2));
      }
      function Rh(C, A, I, g, B) {
        const Q = Math.cos, E = Math.sin, i = Q(I / 2), o = E(I / 2), t = Q((A + g) / 2), e = E((A + g) / 2), s = Q((A - g) / 2), a = E((A - g) / 2), r = Q((g - A) / 2), c = E((g - A) / 2);
        switch (B) {
          case "XYX":
            C.set(i * e, o * s, o * a, i * t);
            break;
          case "YZY":
            C.set(o * a, i * e, o * s, i * t);
            break;
          case "ZXZ":
            C.set(o * s, o * a, i * e, i * t);
            break;
          case "XZX":
            C.set(i * e, o * c, o * r, i * t);
            break;
          case "YXY":
            C.set(o * r, i * e, o * c, i * t);
            break;
          case "ZYZ":
            C.set(o * c, o * r, i * e, i * t);
            break;
          default:
            console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + B);
        }
      }
      function pg(C, A) {
        switch (A.constructor) {
          case Float32Array:
            return C;
          case Uint32Array:
            return C / 4294967295;
          case Uint16Array:
            return C / 65535;
          case Uint8Array:
            return C / 255;
          case Int32Array:
            return Math.max(C / 2147483647, -1);
          case Int16Array:
            return Math.max(C / 32767, -1);
          case Int8Array:
            return Math.max(C / 127, -1);
          default:
            throw new Error("Invalid component type.");
        }
      }
      function iI(C, A) {
        switch (A.constructor) {
          case Float32Array:
            return C;
          case Uint32Array:
            return Math.round(C * 4294967295);
          case Uint16Array:
            return Math.round(C * 65535);
          case Uint8Array:
            return Math.round(C * 255);
          case Int32Array:
            return Math.round(C * 2147483647);
          case Int16Array:
            return Math.round(C * 32767);
          case Int8Array:
            return Math.round(C * 127);
          default:
            throw new Error("Invalid component type.");
        }
      }
      const _I = {
        DEG2RAD: rQ,
        RAD2DEG: HB,
        generateUUID: Yg,
        clamp: WA,
        euclideanModulo: $t,
        mapLinear: rh,
        inverseLerp: hh,
        lerp: hQ,
        damp: wh,
        pingpong: ch,
        smoothstep: Sh,
        smootherstep: lh,
        randInt: Gh,
        randFloat: kh,
        randFloatSpread: yh,
        seededRandom: Mh,
        degToRad: Kh,
        radToDeg: Uh,
        isPowerOfTwo: Nh,
        ceilPowerOfTwo: Fh,
        floorPowerOfTwo: Jh,
        setQuaternionFromProperEuler: Rh,
        normalize: iI,
        denormalize: pg
      };
      class XA {
        constructor(A = 0, I = 0) {
          XA.prototype.isVector2 = true, this.x = A, this.y = I;
        }
        get width() {
          return this.x;
        }
        set width(A) {
          this.x = A;
        }
        get height() {
          return this.y;
        }
        set height(A) {
          this.y = A;
        }
        set(A, I) {
          return this.x = A, this.y = I, this;
        }
        setScalar(A) {
          return this.x = A, this.y = A, this;
        }
        setX(A) {
          return this.x = A, this;
        }
        setY(A) {
          return this.y = A, this;
        }
        setComponent(A, I) {
          switch (A) {
            case 0:
              this.x = I;
              break;
            case 1:
              this.y = I;
              break;
            default:
              throw new Error("index is out of range: " + A);
          }
          return this;
        }
        getComponent(A) {
          switch (A) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            default:
              throw new Error("index is out of range: " + A);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y);
        }
        copy(A) {
          return this.x = A.x, this.y = A.y, this;
        }
        add(A) {
          return this.x += A.x, this.y += A.y, this;
        }
        addScalar(A) {
          return this.x += A, this.y += A, this;
        }
        addVectors(A, I) {
          return this.x = A.x + I.x, this.y = A.y + I.y, this;
        }
        addScaledVector(A, I) {
          return this.x += A.x * I, this.y += A.y * I, this;
        }
        sub(A) {
          return this.x -= A.x, this.y -= A.y, this;
        }
        subScalar(A) {
          return this.x -= A, this.y -= A, this;
        }
        subVectors(A, I) {
          return this.x = A.x - I.x, this.y = A.y - I.y, this;
        }
        multiply(A) {
          return this.x *= A.x, this.y *= A.y, this;
        }
        multiplyScalar(A) {
          return this.x *= A, this.y *= A, this;
        }
        divide(A) {
          return this.x /= A.x, this.y /= A.y, this;
        }
        divideScalar(A) {
          return this.multiplyScalar(1 / A);
        }
        applyMatrix3(A) {
          const I = this.x, g = this.y, B = A.elements;
          return this.x = B[0] * I + B[3] * g + B[6], this.y = B[1] * I + B[4] * g + B[7], this;
        }
        min(A) {
          return this.x = Math.min(this.x, A.x), this.y = Math.min(this.y, A.y), this;
        }
        max(A) {
          return this.x = Math.max(this.x, A.x), this.y = Math.max(this.y, A.y), this;
        }
        clamp(A, I) {
          return this.x = WA(this.x, A.x, I.x), this.y = WA(this.y, A.y, I.y), this;
        }
        clampScalar(A, I) {
          return this.x = WA(this.x, A, I), this.y = WA(this.y, A, I), this;
        }
        clampLength(A, I) {
          const g = this.length();
          return this.divideScalar(g || 1).multiplyScalar(WA(g, A, I));
        }
        floor() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
        }
        ceil() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
        }
        round() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
        }
        roundToZero() {
          return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
        }
        negate() {
          return this.x = -this.x, this.y = -this.y, this;
        }
        dot(A) {
          return this.x * A.x + this.y * A.y;
        }
        cross(A) {
          return this.x * A.y - this.y * A.x;
        }
        lengthSq() {
          return this.x * this.x + this.y * this.y;
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        }
        manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y);
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        angle() {
          return Math.atan2(-this.y, -this.x) + Math.PI;
        }
        angleTo(A) {
          const I = Math.sqrt(this.lengthSq() * A.lengthSq());
          if (I === 0) return Math.PI / 2;
          const g = this.dot(A) / I;
          return Math.acos(WA(g, -1, 1));
        }
        distanceTo(A) {
          return Math.sqrt(this.distanceToSquared(A));
        }
        distanceToSquared(A) {
          const I = this.x - A.x, g = this.y - A.y;
          return I * I + g * g;
        }
        manhattanDistanceTo(A) {
          return Math.abs(this.x - A.x) + Math.abs(this.y - A.y);
        }
        setLength(A) {
          return this.normalize().multiplyScalar(A);
        }
        lerp(A, I) {
          return this.x += (A.x - this.x) * I, this.y += (A.y - this.y) * I, this;
        }
        lerpVectors(A, I, g) {
          return this.x = A.x + (I.x - A.x) * g, this.y = A.y + (I.y - A.y) * g, this;
        }
        equals(A) {
          return A.x === this.x && A.y === this.y;
        }
        fromArray(A, I = 0) {
          return this.x = A[I], this.y = A[I + 1], this;
        }
        toArray(A = [], I = 0) {
          return A[I] = this.x, A[I + 1] = this.y, A;
        }
        fromBufferAttribute(A, I) {
          return this.x = A.getX(I), this.y = A.getY(I), this;
        }
        rotateAround(A, I) {
          const g = Math.cos(I), B = Math.sin(I), Q = this.x - A.x, E = this.y - A.y;
          return this.x = Q * g - E * B + A.x, this.y = Q * B + E * g + A.y, this;
        }
        random() {
          return this.x = Math.random(), this.y = Math.random(), this;
        }
        *[Symbol.iterator]() {
          yield this.x, yield this.y;
        }
      }
      let SI = class {
        constructor(A = 0, I = 0, g = 0, B = 1) {
          this.isQuaternion = true, this._x = A, this._y = I, this._z = g, this._w = B;
        }
        static slerpFlat(A, I, g, B, Q, E, i) {
          let o = g[B + 0], t = g[B + 1], e = g[B + 2], s = g[B + 3];
          const a = Q[E + 0], r = Q[E + 1], c = Q[E + 2], S = Q[E + 3];
          if (i === 0) {
            A[I + 0] = o, A[I + 1] = t, A[I + 2] = e, A[I + 3] = s;
            return;
          }
          if (i === 1) {
            A[I + 0] = a, A[I + 1] = r, A[I + 2] = c, A[I + 3] = S;
            return;
          }
          if (s !== S || o !== a || t !== r || e !== c) {
            let h = 1 - i;
            const D = o * a + t * r + e * c + s * S, U = D >= 0 ? 1 : -1, M = 1 - D * D;
            if (M > Number.EPSILON) {
              const p = Math.sqrt(M), R = Math.atan2(p, D * U);
              h = Math.sin(h * R) / p, i = Math.sin(i * R) / p;
            }
            const k = i * U;
            if (o = o * h + a * k, t = t * h + r * k, e = e * h + c * k, s = s * h + S * k, h === 1 - i) {
              const p = 1 / Math.sqrt(o * o + t * t + e * e + s * s);
              o *= p, t *= p, e *= p, s *= p;
            }
          }
          A[I] = o, A[I + 1] = t, A[I + 2] = e, A[I + 3] = s;
        }
        static multiplyQuaternionsFlat(A, I, g, B, Q, E) {
          const i = g[B], o = g[B + 1], t = g[B + 2], e = g[B + 3], s = Q[E], a = Q[E + 1], r = Q[E + 2], c = Q[E + 3];
          return A[I] = i * c + e * s + o * r - t * a, A[I + 1] = o * c + e * a + t * s - i * r, A[I + 2] = t * c + e * r + i * a - o * s, A[I + 3] = e * c - i * s - o * a - t * r, A;
        }
        get x() {
          return this._x;
        }
        set x(A) {
          this._x = A, this._onChangeCallback();
        }
        get y() {
          return this._y;
        }
        set y(A) {
          this._y = A, this._onChangeCallback();
        }
        get z() {
          return this._z;
        }
        set z(A) {
          this._z = A, this._onChangeCallback();
        }
        get w() {
          return this._w;
        }
        set w(A) {
          this._w = A, this._onChangeCallback();
        }
        set(A, I, g, B) {
          return this._x = A, this._y = I, this._z = g, this._w = B, this._onChangeCallback(), this;
        }
        clone() {
          return new this.constructor(this._x, this._y, this._z, this._w);
        }
        copy(A) {
          return this._x = A.x, this._y = A.y, this._z = A.z, this._w = A.w, this._onChangeCallback(), this;
        }
        setFromEuler(A, I = true) {
          const g = A._x, B = A._y, Q = A._z, E = A._order, i = Math.cos, o = Math.sin, t = i(g / 2), e = i(B / 2), s = i(Q / 2), a = o(g / 2), r = o(B / 2), c = o(Q / 2);
          switch (E) {
            case "XYZ":
              this._x = a * e * s + t * r * c, this._y = t * r * s - a * e * c, this._z = t * e * c + a * r * s, this._w = t * e * s - a * r * c;
              break;
            case "YXZ":
              this._x = a * e * s + t * r * c, this._y = t * r * s - a * e * c, this._z = t * e * c - a * r * s, this._w = t * e * s + a * r * c;
              break;
            case "ZXY":
              this._x = a * e * s - t * r * c, this._y = t * r * s + a * e * c, this._z = t * e * c + a * r * s, this._w = t * e * s - a * r * c;
              break;
            case "ZYX":
              this._x = a * e * s - t * r * c, this._y = t * r * s + a * e * c, this._z = t * e * c - a * r * s, this._w = t * e * s + a * r * c;
              break;
            case "YZX":
              this._x = a * e * s + t * r * c, this._y = t * r * s + a * e * c, this._z = t * e * c - a * r * s, this._w = t * e * s - a * r * c;
              break;
            case "XZY":
              this._x = a * e * s - t * r * c, this._y = t * r * s - a * e * c, this._z = t * e * c + a * r * s, this._w = t * e * s + a * r * c;
              break;
            default:
              console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + E);
          }
          return I === true && this._onChangeCallback(), this;
        }
        setFromAxisAngle(A, I) {
          const g = I / 2, B = Math.sin(g);
          return this._x = A.x * B, this._y = A.y * B, this._z = A.z * B, this._w = Math.cos(g), this._onChangeCallback(), this;
        }
        setFromRotationMatrix(A) {
          const I = A.elements, g = I[0], B = I[4], Q = I[8], E = I[1], i = I[5], o = I[9], t = I[2], e = I[6], s = I[10], a = g + i + s;
          if (a > 0) {
            const r = 0.5 / Math.sqrt(a + 1);
            this._w = 0.25 / r, this._x = (e - o) * r, this._y = (Q - t) * r, this._z = (E - B) * r;
          } else if (g > i && g > s) {
            const r = 2 * Math.sqrt(1 + g - i - s);
            this._w = (e - o) / r, this._x = 0.25 * r, this._y = (B + E) / r, this._z = (Q + t) / r;
          } else if (i > s) {
            const r = 2 * Math.sqrt(1 + i - g - s);
            this._w = (Q - t) / r, this._x = (B + E) / r, this._y = 0.25 * r, this._z = (o + e) / r;
          } else {
            const r = 2 * Math.sqrt(1 + s - g - i);
            this._w = (E - B) / r, this._x = (Q + t) / r, this._y = (o + e) / r, this._z = 0.25 * r;
          }
          return this._onChangeCallback(), this;
        }
        setFromUnitVectors(A, I) {
          let g = A.dot(I) + 1;
          return g < 1e-8 ? (g = 0, Math.abs(A.x) > Math.abs(A.z) ? (this._x = -A.y, this._y = A.x, this._z = 0, this._w = g) : (this._x = 0, this._y = -A.z, this._z = A.y, this._w = g)) : (this._x = A.y * I.z - A.z * I.y, this._y = A.z * I.x - A.x * I.z, this._z = A.x * I.y - A.y * I.x, this._w = g), this.normalize();
        }
        angleTo(A) {
          return 2 * Math.acos(Math.abs(WA(this.dot(A), -1, 1)));
        }
        rotateTowards(A, I) {
          const g = this.angleTo(A);
          if (g === 0) return this;
          const B = Math.min(1, I / g);
          return this.slerp(A, B), this;
        }
        identity() {
          return this.set(0, 0, 0, 1);
        }
        invert() {
          return this.conjugate();
        }
        conjugate() {
          return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
        }
        dot(A) {
          return this._x * A._x + this._y * A._y + this._z * A._z + this._w * A._w;
        }
        lengthSq() {
          return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
        }
        length() {
          return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
        }
        normalize() {
          let A = this.length();
          return A === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (A = 1 / A, this._x = this._x * A, this._y = this._y * A, this._z = this._z * A, this._w = this._w * A), this._onChangeCallback(), this;
        }
        multiply(A) {
          return this.multiplyQuaternions(this, A);
        }
        premultiply(A) {
          return this.multiplyQuaternions(A, this);
        }
        multiplyQuaternions(A, I) {
          const g = A._x, B = A._y, Q = A._z, E = A._w, i = I._x, o = I._y, t = I._z, e = I._w;
          return this._x = g * e + E * i + B * t - Q * o, this._y = B * e + E * o + Q * i - g * t, this._z = Q * e + E * t + g * o - B * i, this._w = E * e - g * i - B * o - Q * t, this._onChangeCallback(), this;
        }
        slerp(A, I) {
          if (I === 0) return this;
          if (I === 1) return this.copy(A);
          const g = this._x, B = this._y, Q = this._z, E = this._w;
          let i = E * A._w + g * A._x + B * A._y + Q * A._z;
          if (i < 0 ? (this._w = -A._w, this._x = -A._x, this._y = -A._y, this._z = -A._z, i = -i) : this.copy(A), i >= 1) return this._w = E, this._x = g, this._y = B, this._z = Q, this;
          const o = 1 - i * i;
          if (o <= Number.EPSILON) {
            const r = 1 - I;
            return this._w = r * E + I * this._w, this._x = r * g + I * this._x, this._y = r * B + I * this._y, this._z = r * Q + I * this._z, this.normalize(), this;
          }
          const t = Math.sqrt(o), e = Math.atan2(t, i), s = Math.sin((1 - I) * e) / t, a = Math.sin(I * e) / t;
          return this._w = E * s + this._w * a, this._x = g * s + this._x * a, this._y = B * s + this._y * a, this._z = Q * s + this._z * a, this._onChangeCallback(), this;
        }
        slerpQuaternions(A, I, g) {
          return this.copy(A).slerp(I, g);
        }
        random() {
          const A = 2 * Math.PI * Math.random(), I = 2 * Math.PI * Math.random(), g = Math.random(), B = Math.sqrt(1 - g), Q = Math.sqrt(g);
          return this.set(B * Math.sin(A), B * Math.cos(A), Q * Math.sin(I), Q * Math.cos(I));
        }
        equals(A) {
          return A._x === this._x && A._y === this._y && A._z === this._z && A._w === this._w;
        }
        fromArray(A, I = 0) {
          return this._x = A[I], this._y = A[I + 1], this._z = A[I + 2], this._w = A[I + 3], this._onChangeCallback(), this;
        }
        toArray(A = [], I = 0) {
          return A[I] = this._x, A[I + 1] = this._y, A[I + 2] = this._z, A[I + 3] = this._w, A;
        }
        fromBufferAttribute(A, I) {
          return this._x = A.getX(I), this._y = A.getY(I), this._z = A.getZ(I), this._w = A.getW(I), this._onChangeCallback(), this;
        }
        toJSON() {
          return this.toArray();
        }
        _onChange(A) {
          return this._onChangeCallback = A, this;
        }
        _onChangeCallback() {
        }
        *[Symbol.iterator]() {
          yield this._x, yield this._y, yield this._z, yield this._w;
        }
      }, J = class pD {
        constructor(A = 0, I = 0, g = 0) {
          pD.prototype.isVector3 = true, this.x = A, this.y = I, this.z = g;
        }
        set(A, I, g) {
          return g === void 0 && (g = this.z), this.x = A, this.y = I, this.z = g, this;
        }
        setScalar(A) {
          return this.x = A, this.y = A, this.z = A, this;
        }
        setX(A) {
          return this.x = A, this;
        }
        setY(A) {
          return this.y = A, this;
        }
        setZ(A) {
          return this.z = A, this;
        }
        setComponent(A, I) {
          switch (A) {
            case 0:
              this.x = I;
              break;
            case 1:
              this.y = I;
              break;
            case 2:
              this.z = I;
              break;
            default:
              throw new Error("index is out of range: " + A);
          }
          return this;
        }
        getComponent(A) {
          switch (A) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            default:
              throw new Error("index is out of range: " + A);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y, this.z);
        }
        copy(A) {
          return this.x = A.x, this.y = A.y, this.z = A.z, this;
        }
        add(A) {
          return this.x += A.x, this.y += A.y, this.z += A.z, this;
        }
        addScalar(A) {
          return this.x += A, this.y += A, this.z += A, this;
        }
        addVectors(A, I) {
          return this.x = A.x + I.x, this.y = A.y + I.y, this.z = A.z + I.z, this;
        }
        addScaledVector(A, I) {
          return this.x += A.x * I, this.y += A.y * I, this.z += A.z * I, this;
        }
        sub(A) {
          return this.x -= A.x, this.y -= A.y, this.z -= A.z, this;
        }
        subScalar(A) {
          return this.x -= A, this.y -= A, this.z -= A, this;
        }
        subVectors(A, I) {
          return this.x = A.x - I.x, this.y = A.y - I.y, this.z = A.z - I.z, this;
        }
        multiply(A) {
          return this.x *= A.x, this.y *= A.y, this.z *= A.z, this;
        }
        multiplyScalar(A) {
          return this.x *= A, this.y *= A, this.z *= A, this;
        }
        multiplyVectors(A, I) {
          return this.x = A.x * I.x, this.y = A.y * I.y, this.z = A.z * I.z, this;
        }
        applyEuler(A) {
          return this.applyQuaternion(es.setFromEuler(A));
        }
        applyAxisAngle(A, I) {
          return this.applyQuaternion(es.setFromAxisAngle(A, I));
        }
        applyMatrix3(A) {
          const I = this.x, g = this.y, B = this.z, Q = A.elements;
          return this.x = Q[0] * I + Q[3] * g + Q[6] * B, this.y = Q[1] * I + Q[4] * g + Q[7] * B, this.z = Q[2] * I + Q[5] * g + Q[8] * B, this;
        }
        applyNormalMatrix(A) {
          return this.applyMatrix3(A).normalize();
        }
        applyMatrix4(A) {
          const I = this.x, g = this.y, B = this.z, Q = A.elements, E = 1 / (Q[3] * I + Q[7] * g + Q[11] * B + Q[15]);
          return this.x = (Q[0] * I + Q[4] * g + Q[8] * B + Q[12]) * E, this.y = (Q[1] * I + Q[5] * g + Q[9] * B + Q[13]) * E, this.z = (Q[2] * I + Q[6] * g + Q[10] * B + Q[14]) * E, this;
        }
        applyQuaternion(A) {
          const I = this.x, g = this.y, B = this.z, Q = A.x, E = A.y, i = A.z, o = A.w, t = 2 * (E * B - i * g), e = 2 * (i * I - Q * B), s = 2 * (Q * g - E * I);
          return this.x = I + o * t + E * s - i * e, this.y = g + o * e + i * t - Q * s, this.z = B + o * s + Q * e - E * t, this;
        }
        project(A) {
          return this.applyMatrix4(A.matrixWorldInverse).applyMatrix4(A.projectionMatrix);
        }
        unproject(A) {
          return this.applyMatrix4(A.projectionMatrixInverse).applyMatrix4(A.matrixWorld);
        }
        transformDirection(A) {
          const I = this.x, g = this.y, B = this.z, Q = A.elements;
          return this.x = Q[0] * I + Q[4] * g + Q[8] * B, this.y = Q[1] * I + Q[5] * g + Q[9] * B, this.z = Q[2] * I + Q[6] * g + Q[10] * B, this.normalize();
        }
        divide(A) {
          return this.x /= A.x, this.y /= A.y, this.z /= A.z, this;
        }
        divideScalar(A) {
          return this.multiplyScalar(1 / A);
        }
        min(A) {
          return this.x = Math.min(this.x, A.x), this.y = Math.min(this.y, A.y), this.z = Math.min(this.z, A.z), this;
        }
        max(A) {
          return this.x = Math.max(this.x, A.x), this.y = Math.max(this.y, A.y), this.z = Math.max(this.z, A.z), this;
        }
        clamp(A, I) {
          return this.x = WA(this.x, A.x, I.x), this.y = WA(this.y, A.y, I.y), this.z = WA(this.z, A.z, I.z), this;
        }
        clampScalar(A, I) {
          return this.x = WA(this.x, A, I), this.y = WA(this.y, A, I), this.z = WA(this.z, A, I), this;
        }
        clampLength(A, I) {
          const g = this.length();
          return this.divideScalar(g || 1).multiplyScalar(WA(g, A, I));
        }
        floor() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
        }
        ceil() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
        }
        round() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
        }
        roundToZero() {
          return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
        }
        negate() {
          return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
        }
        dot(A) {
          return this.x * A.x + this.y * A.y + this.z * A.z;
        }
        lengthSq() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }
        manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        setLength(A) {
          return this.normalize().multiplyScalar(A);
        }
        lerp(A, I) {
          return this.x += (A.x - this.x) * I, this.y += (A.y - this.y) * I, this.z += (A.z - this.z) * I, this;
        }
        lerpVectors(A, I, g) {
          return this.x = A.x + (I.x - A.x) * g, this.y = A.y + (I.y - A.y) * g, this.z = A.z + (I.z - A.z) * g, this;
        }
        cross(A) {
          return this.crossVectors(this, A);
        }
        crossVectors(A, I) {
          const g = A.x, B = A.y, Q = A.z, E = I.x, i = I.y, o = I.z;
          return this.x = B * o - Q * i, this.y = Q * E - g * o, this.z = g * i - B * E, this;
        }
        projectOnVector(A) {
          const I = A.lengthSq();
          if (I === 0) return this.set(0, 0, 0);
          const g = A.dot(this) / I;
          return this.copy(A).multiplyScalar(g);
        }
        projectOnPlane(A) {
          return ci.copy(this).projectOnVector(A), this.sub(ci);
        }
        reflect(A) {
          return this.sub(ci.copy(A).multiplyScalar(2 * this.dot(A)));
        }
        angleTo(A) {
          const I = Math.sqrt(this.lengthSq() * A.lengthSq());
          if (I === 0) return Math.PI / 2;
          const g = this.dot(A) / I;
          return Math.acos(WA(g, -1, 1));
        }
        distanceTo(A) {
          return Math.sqrt(this.distanceToSquared(A));
        }
        distanceToSquared(A) {
          const I = this.x - A.x, g = this.y - A.y, B = this.z - A.z;
          return I * I + g * g + B * B;
        }
        manhattanDistanceTo(A) {
          return Math.abs(this.x - A.x) + Math.abs(this.y - A.y) + Math.abs(this.z - A.z);
        }
        setFromSpherical(A) {
          return this.setFromSphericalCoords(A.radius, A.phi, A.theta);
        }
        setFromSphericalCoords(A, I, g) {
          const B = Math.sin(I) * A;
          return this.x = B * Math.sin(g), this.y = Math.cos(I) * A, this.z = B * Math.cos(g), this;
        }
        setFromCylindrical(A) {
          return this.setFromCylindricalCoords(A.radius, A.theta, A.y);
        }
        setFromCylindricalCoords(A, I, g) {
          return this.x = A * Math.sin(I), this.y = g, this.z = A * Math.cos(I), this;
        }
        setFromMatrixPosition(A) {
          const I = A.elements;
          return this.x = I[12], this.y = I[13], this.z = I[14], this;
        }
        setFromMatrixScale(A) {
          const I = this.setFromMatrixColumn(A, 0).length(), g = this.setFromMatrixColumn(A, 1).length(), B = this.setFromMatrixColumn(A, 2).length();
          return this.x = I, this.y = g, this.z = B, this;
        }
        setFromMatrixColumn(A, I) {
          return this.fromArray(A.elements, I * 4);
        }
        setFromMatrix3Column(A, I) {
          return this.fromArray(A.elements, I * 3);
        }
        setFromEuler(A) {
          return this.x = A._x, this.y = A._y, this.z = A._z, this;
        }
        setFromColor(A) {
          return this.x = A.r, this.y = A.g, this.z = A.b, this;
        }
        equals(A) {
          return A.x === this.x && A.y === this.y && A.z === this.z;
        }
        fromArray(A, I = 0) {
          return this.x = A[I], this.y = A[I + 1], this.z = A[I + 2], this;
        }
        toArray(A = [], I = 0) {
          return A[I] = this.x, A[I + 1] = this.y, A[I + 2] = this.z, A;
        }
        fromBufferAttribute(A, I) {
          return this.x = A.getX(I), this.y = A.getY(I), this.z = A.getZ(I), this;
        }
        random() {
          return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
        }
        randomDirection() {
          const A = Math.random() * Math.PI * 2, I = Math.random() * 2 - 1, g = Math.sqrt(1 - I * I);
          return this.x = g * Math.cos(A), this.y = I, this.z = g * Math.sin(A), this;
        }
        *[Symbol.iterator]() {
          yield this.x, yield this.y, yield this.z;
        }
      };
      const ci = new J(), es = new SI();
      class ZA {
        constructor(A, I, g, B, Q, E, i, o, t) {
          ZA.prototype.isMatrix3 = true, this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
          ], A !== void 0 && this.set(A, I, g, B, Q, E, i, o, t);
        }
        set(A, I, g, B, Q, E, i, o, t) {
          const e = this.elements;
          return e[0] = A, e[1] = B, e[2] = i, e[3] = I, e[4] = Q, e[5] = o, e[6] = g, e[7] = E, e[8] = t, this;
        }
        identity() {
          return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
        }
        copy(A) {
          const I = this.elements, g = A.elements;
          return I[0] = g[0], I[1] = g[1], I[2] = g[2], I[3] = g[3], I[4] = g[4], I[5] = g[5], I[6] = g[6], I[7] = g[7], I[8] = g[8], this;
        }
        extractBasis(A, I, g) {
          return A.setFromMatrix3Column(this, 0), I.setFromMatrix3Column(this, 1), g.setFromMatrix3Column(this, 2), this;
        }
        setFromMatrix4(A) {
          const I = A.elements;
          return this.set(I[0], I[4], I[8], I[1], I[5], I[9], I[2], I[6], I[10]), this;
        }
        multiply(A) {
          return this.multiplyMatrices(this, A);
        }
        premultiply(A) {
          return this.multiplyMatrices(A, this);
        }
        multiplyMatrices(A, I) {
          const g = A.elements, B = I.elements, Q = this.elements, E = g[0], i = g[3], o = g[6], t = g[1], e = g[4], s = g[7], a = g[2], r = g[5], c = g[8], S = B[0], h = B[3], D = B[6], U = B[1], M = B[4], k = B[7], p = B[2], R = B[5], Y = B[8];
          return Q[0] = E * S + i * U + o * p, Q[3] = E * h + i * M + o * R, Q[6] = E * D + i * k + o * Y, Q[1] = t * S + e * U + s * p, Q[4] = t * h + e * M + s * R, Q[7] = t * D + e * k + s * Y, Q[2] = a * S + r * U + c * p, Q[5] = a * h + r * M + c * R, Q[8] = a * D + r * k + c * Y, this;
        }
        multiplyScalar(A) {
          const I = this.elements;
          return I[0] *= A, I[3] *= A, I[6] *= A, I[1] *= A, I[4] *= A, I[7] *= A, I[2] *= A, I[5] *= A, I[8] *= A, this;
        }
        determinant() {
          const A = this.elements, I = A[0], g = A[1], B = A[2], Q = A[3], E = A[4], i = A[5], o = A[6], t = A[7], e = A[8];
          return I * E * e - I * i * t - g * Q * e + g * i * o + B * Q * t - B * E * o;
        }
        invert() {
          const A = this.elements, I = A[0], g = A[1], B = A[2], Q = A[3], E = A[4], i = A[5], o = A[6], t = A[7], e = A[8], s = e * E - i * t, a = i * o - e * Q, r = t * Q - E * o, c = I * s + g * a + B * r;
          if (c === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
          const S = 1 / c;
          return A[0] = s * S, A[1] = (B * t - e * g) * S, A[2] = (i * g - B * E) * S, A[3] = a * S, A[4] = (e * I - B * o) * S, A[5] = (B * Q - i * I) * S, A[6] = r * S, A[7] = (g * o - t * I) * S, A[8] = (E * I - g * Q) * S, this;
        }
        transpose() {
          let A;
          const I = this.elements;
          return A = I[1], I[1] = I[3], I[3] = A, A = I[2], I[2] = I[6], I[6] = A, A = I[5], I[5] = I[7], I[7] = A, this;
        }
        getNormalMatrix(A) {
          return this.setFromMatrix4(A).invert().transpose();
        }
        transposeIntoArray(A) {
          const I = this.elements;
          return A[0] = I[0], A[1] = I[3], A[2] = I[6], A[3] = I[1], A[4] = I[4], A[5] = I[7], A[6] = I[2], A[7] = I[5], A[8] = I[8], this;
        }
        setUvTransform(A, I, g, B, Q, E, i) {
          const o = Math.cos(Q), t = Math.sin(Q);
          return this.set(g * o, g * t, -g * (o * E + t * i) + E + A, -B * t, B * o, -B * (-t * E + o * i) + i + I, 0, 0, 1), this;
        }
        scale(A, I) {
          return this.premultiply(Si.makeScale(A, I)), this;
        }
        rotate(A) {
          return this.premultiply(Si.makeRotation(-A)), this;
        }
        translate(A, I) {
          return this.premultiply(Si.makeTranslation(A, I)), this;
        }
        makeTranslation(A, I) {
          return A.isVector2 ? this.set(1, 0, A.x, 0, 1, A.y, 0, 0, 1) : this.set(1, 0, A, 0, 1, I, 0, 0, 1), this;
        }
        makeRotation(A) {
          const I = Math.cos(A), g = Math.sin(A);
          return this.set(I, -g, 0, g, I, 0, 0, 0, 1), this;
        }
        makeScale(A, I) {
          return this.set(A, 0, 0, 0, I, 0, 0, 0, 1), this;
        }
        equals(A) {
          const I = this.elements, g = A.elements;
          for (let B = 0; B < 9; B++) if (I[B] !== g[B]) return false;
          return true;
        }
        fromArray(A, I = 0) {
          for (let g = 0; g < 9; g++) this.elements[g] = A[g + I];
          return this;
        }
        toArray(A = [], I = 0) {
          const g = this.elements;
          return A[I] = g[0], A[I + 1] = g[1], A[I + 2] = g[2], A[I + 3] = g[3], A[I + 4] = g[4], A[I + 5] = g[5], A[I + 6] = g[6], A[I + 7] = g[7], A[I + 8] = g[8], A;
        }
        clone() {
          return new this.constructor().fromArray(this.elements);
        }
      }
      const Si = new ZA();
      function dD(C) {
        for (let A = C.length - 1; A >= 0; --A) if (C[A] >= 65535) return true;
        return false;
      }
      function FQ(C) {
        return document.createElementNS("http://www.w3.org/1999/xhtml", C);
      }
      function ph() {
        const C = FQ("canvas");
        return C.style.display = "block", C;
      }
      const ss = {};
      function JQ(C) {
        C in ss || (ss[C] = true, console.warn(C));
      }
      function dh(C, A, I) {
        return new Promise(function(g, B) {
          function Q() {
            switch (C.clientWaitSync(A, C.SYNC_FLUSH_COMMANDS_BIT, 0)) {
              case C.WAIT_FAILED:
                B();
                break;
              case C.TIMEOUT_EXPIRED:
                setTimeout(Q, I);
                break;
              default:
                g();
            }
          }
          setTimeout(Q, I);
        });
      }
      const as = new ZA().set(0.4123908, 0.3575843, 0.1804808, 0.212639, 0.7151687, 0.0721923, 0.0193308, 0.1191948, 0.9505322), Ds = new ZA().set(3.2409699, -1.5373832, -0.4986108, -0.9692436, 1.8759675, 0.0415551, 0.0556301, -0.203977, 1.0569715);
      function Yh() {
        const C = {
          enabled: true,
          workingColorSpace: Ag,
          spaces: {},
          convert: function(B, Q, E) {
            return this.enabled === false || Q === E || !Q || !E || (this.spaces[Q].transfer === eI && (B.r = rC(B.r), B.g = rC(B.g), B.b = rC(B.b)), this.spaces[Q].primaries !== this.spaces[E].primaries && (B.applyMatrix3(this.spaces[Q].toXYZ), B.applyMatrix3(this.spaces[E].fromXYZ)), this.spaces[E].transfer === eI && (B.r = dB(B.r), B.g = dB(B.g), B.b = dB(B.b))), B;
          },
          workingToColorSpace: function(B, Q) {
            return this.convert(B, this.workingColorSpace, Q);
          },
          colorSpaceToWorking: function(B, Q) {
            return this.convert(B, Q, this.workingColorSpace);
          },
          getPrimaries: function(B) {
            return this.spaces[B].primaries;
          },
          getTransfer: function(B) {
            return B === RC ? uE : this.spaces[B].transfer;
          },
          getToneMappingMode: function(B) {
            return this.spaces[B].outputColorSpaceConfig.toneMappingMode || "standard";
          },
          getLuminanceCoefficients: function(B, Q = this.workingColorSpace) {
            return B.fromArray(this.spaces[Q].luminanceCoefficients);
          },
          define: function(B) {
            Object.assign(this.spaces, B);
          },
          _getMatrix: function(B, Q, E) {
            return B.copy(this.spaces[Q].toXYZ).multiply(this.spaces[E].fromXYZ);
          },
          _getDrawingBufferColorSpace: function(B) {
            return this.spaces[B].outputColorSpaceConfig.drawingBufferColorSpace;
          },
          _getUnpackColorSpace: function(B = this.workingColorSpace) {
            return this.spaces[B].workingColorSpaceConfig.unpackColorSpace;
          },
          fromWorkingColorSpace: function(B, Q) {
            return JQ("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."), C.workingToColorSpace(B, Q);
          },
          toWorkingColorSpace: function(B, Q) {
            return JQ("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."), C.colorSpaceToWorking(B, Q);
          }
        }, A = [
          0.64,
          0.33,
          0.3,
          0.6,
          0.15,
          0.06
        ], I = [
          0.2126,
          0.7152,
          0.0722
        ], g = [
          0.3127,
          0.329
        ];
        return C.define({
          [Ag]: {
            primaries: A,
            whitePoint: g,
            transfer: uE,
            toXYZ: as,
            fromXYZ: Ds,
            luminanceCoefficients: I,
            workingColorSpaceConfig: {
              unpackColorSpace: PI
            },
            outputColorSpaceConfig: {
              drawingBufferColorSpace: PI
            }
          },
          [PI]: {
            primaries: A,
            whitePoint: g,
            transfer: eI,
            toXYZ: as,
            fromXYZ: Ds,
            luminanceCoefficients: I,
            outputColorSpaceConfig: {
              drawingBufferColorSpace: PI
            }
          }
        }), C;
      }
      const gI = Yh();
      function rC(C) {
        return C < 0.04045 ? C * 0.0773993808 : Math.pow(C * 0.9478672986 + 0.0521327014, 2.4);
      }
      function dB(C) {
        return C < 31308e-7 ? C * 12.92 : 1.055 * Math.pow(C, 0.41666) - 0.055;
      }
      let tB;
      class qh {
        static getDataURL(A, I = "image/png") {
          if (/^data:/i.test(A.src) || typeof HTMLCanvasElement > "u") return A.src;
          let g;
          if (A instanceof HTMLCanvasElement) g = A;
          else {
            tB === void 0 && (tB = FQ("canvas")), tB.width = A.width, tB.height = A.height;
            const B = tB.getContext("2d");
            A instanceof ImageData ? B.putImageData(A, 0, 0) : B.drawImage(A, 0, 0, A.width, A.height), g = tB;
          }
          return g.toDataURL(I);
        }
        static sRGBToLinear(A) {
          if (typeof HTMLImageElement < "u" && A instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && A instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && A instanceof ImageBitmap) {
            const I = FQ("canvas");
            I.width = A.width, I.height = A.height;
            const g = I.getContext("2d");
            g.drawImage(A, 0, 0, A.width, A.height);
            const B = g.getImageData(0, 0, A.width, A.height), Q = B.data;
            for (let E = 0; E < Q.length; E++) Q[E] = rC(Q[E] / 255) * 255;
            return g.putImageData(B, 0, 0), I;
          } else if (A.data) {
            const I = A.data.slice(0);
            for (let g = 0; g < I.length; g++) I instanceof Uint8Array || I instanceof Uint8ClampedArray ? I[g] = Math.floor(rC(I[g] / 255) * 255) : I[g] = rC(I[g]);
            return {
              data: I,
              width: A.width,
              height: A.height
            };
          } else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), A;
        }
      }
      let Lh = 0;
      class Ae {
        constructor(A = null) {
          this.isSource = true, Object.defineProperty(this, "id", {
            value: Lh++
          }), this.uuid = Yg(), this.data = A, this.dataReady = true, this.version = 0;
        }
        getSize(A) {
          const I = this.data;
          return typeof HTMLVideoElement < "u" && I instanceof HTMLVideoElement ? A.set(I.videoWidth, I.videoHeight, 0) : I instanceof VideoFrame ? A.set(I.displayHeight, I.displayWidth, 0) : I !== null ? A.set(I.width, I.height, I.depth || 0) : A.set(0, 0, 0), A;
        }
        set needsUpdate(A) {
          A === true && this.version++;
        }
        toJSON(A) {
          const I = A === void 0 || typeof A == "string";
          if (!I && A.images[this.uuid] !== void 0) return A.images[this.uuid];
          const g = {
            uuid: this.uuid,
            url: ""
          }, B = this.data;
          if (B !== null) {
            let Q;
            if (Array.isArray(B)) {
              Q = [];
              for (let E = 0, i = B.length; E < i; E++) B[E].isDataTexture ? Q.push(li(B[E].image)) : Q.push(li(B[E]));
            } else Q = li(B);
            g.url = Q;
          }
          return I || (A.images[this.uuid] = g), g;
        }
      }
      function li(C) {
        return typeof HTMLImageElement < "u" && C instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && C instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && C instanceof ImageBitmap ? qh.getDataURL(C) : C.data ? {
          data: Array.from(C.data),
          width: C.width,
          height: C.height,
          type: C.data.constructor.name
        } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
      }
      let fh = 0;
      const Gi = new J();
      class uI extends PB {
        constructor(A = uI.DEFAULT_IMAGE, I = uI.DEFAULT_MAPPING, g = Zg, B = Zg, Q = sg, E = aC, i = ag, o = jg, t = uI.DEFAULT_ANISOTROPY, e = RC) {
          super(), this.isTexture = true, Object.defineProperty(this, "id", {
            value: fh++
          }), this.uuid = Yg(), this.name = "", this.source = new Ae(A), this.mipmaps = [], this.mapping = I, this.channel = 0, this.wrapS = g, this.wrapT = B, this.magFilter = Q, this.minFilter = E, this.anisotropy = t, this.format = i, this.internalFormat = null, this.type = o, this.offset = new XA(0, 0), this.repeat = new XA(1, 1), this.center = new XA(0, 0), this.rotation = 0, this.matrixAutoUpdate = true, this.matrix = new ZA(), this.generateMipmaps = true, this.premultiplyAlpha = false, this.flipY = true, this.unpackAlignment = 4, this.colorSpace = e, this.userData = {}, this.updateRanges = [], this.version = 0, this.onUpdate = null, this.renderTarget = null, this.isRenderTargetTexture = false, this.isArrayTexture = !!(A && A.depth && A.depth > 1), this.pmremVersion = 0;
        }
        get width() {
          return this.source.getSize(Gi).x;
        }
        get height() {
          return this.source.getSize(Gi).y;
        }
        get depth() {
          return this.source.getSize(Gi).z;
        }
        get image() {
          return this.source.data;
        }
        set image(A = null) {
          this.source.data = A;
        }
        updateMatrix() {
          this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
        }
        addUpdateRange(A, I) {
          this.updateRanges.push({
            start: A,
            count: I
          });
        }
        clearUpdateRanges() {
          this.updateRanges.length = 0;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(A) {
          return this.name = A.name, this.source = A.source, this.mipmaps = A.mipmaps.slice(0), this.mapping = A.mapping, this.channel = A.channel, this.wrapS = A.wrapS, this.wrapT = A.wrapT, this.magFilter = A.magFilter, this.minFilter = A.minFilter, this.anisotropy = A.anisotropy, this.format = A.format, this.internalFormat = A.internalFormat, this.type = A.type, this.offset.copy(A.offset), this.repeat.copy(A.repeat), this.center.copy(A.center), this.rotation = A.rotation, this.matrixAutoUpdate = A.matrixAutoUpdate, this.matrix.copy(A.matrix), this.generateMipmaps = A.generateMipmaps, this.premultiplyAlpha = A.premultiplyAlpha, this.flipY = A.flipY, this.unpackAlignment = A.unpackAlignment, this.colorSpace = A.colorSpace, this.renderTarget = A.renderTarget, this.isRenderTargetTexture = A.isRenderTargetTexture, this.isArrayTexture = A.isArrayTexture, this.userData = JSON.parse(JSON.stringify(A.userData)), this.needsUpdate = true, this;
        }
        setValues(A) {
          for (const I in A) {
            const g = A[I];
            if (g === void 0) {
              console.warn(`THREE.Texture.setValues(): parameter '${I}' has value of undefined.`);
              continue;
            }
            const B = this[I];
            if (B === void 0) {
              console.warn(`THREE.Texture.setValues(): property '${I}' does not exist.`);
              continue;
            }
            B && g && B.isVector2 && g.isVector2 || B && g && B.isVector3 && g.isVector3 || B && g && B.isMatrix3 && g.isMatrix3 ? B.copy(g) : this[I] = g;
          }
        }
        toJSON(A) {
          const I = A === void 0 || typeof A == "string";
          if (!I && A.textures[this.uuid] !== void 0) return A.textures[this.uuid];
          const g = {
            metadata: {
              version: 4.7,
              type: "Texture",
              generator: "Texture.toJSON"
            },
            uuid: this.uuid,
            name: this.name,
            image: this.source.toJSON(A).uuid,
            mapping: this.mapping,
            channel: this.channel,
            repeat: [
              this.repeat.x,
              this.repeat.y
            ],
            offset: [
              this.offset.x,
              this.offset.y
            ],
            center: [
              this.center.x,
              this.center.y
            ],
            rotation: this.rotation,
            wrap: [
              this.wrapS,
              this.wrapT
            ],
            format: this.format,
            internalFormat: this.internalFormat,
            type: this.type,
            colorSpace: this.colorSpace,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            generateMipmaps: this.generateMipmaps,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment
          };
          return Object.keys(this.userData).length > 0 && (g.userData = this.userData), I || (A.textures[this.uuid] = g), g;
        }
        dispose() {
          this.dispatchEvent({
            type: "dispose"
          });
        }
        transformUv(A) {
          if (this.mapping !== Zt) return A;
          if (A.applyMatrix3(this.matrix), A.x < 0 || A.x > 1) switch (this.wrapS) {
            case uB:
              A.x = A.x - Math.floor(A.x);
              break;
            case Zg:
              A.x = A.x < 0 ? 0 : 1;
              break;
            case fE:
              Math.abs(Math.floor(A.x) % 2) === 1 ? A.x = Math.ceil(A.x) - A.x : A.x = A.x - Math.floor(A.x);
              break;
          }
          if (A.y < 0 || A.y > 1) switch (this.wrapT) {
            case uB:
              A.y = A.y - Math.floor(A.y);
              break;
            case Zg:
              A.y = A.y < 0 ? 0 : 1;
              break;
            case fE:
              Math.abs(Math.floor(A.y) % 2) === 1 ? A.y = Math.ceil(A.y) - A.y : A.y = A.y - Math.floor(A.y);
              break;
          }
          return this.flipY && (A.y = 1 - A.y), A;
        }
        set needsUpdate(A) {
          A === true && (this.version++, this.source.needsUpdate = true);
        }
        set needsPMREMUpdate(A) {
          A === true && this.pmremVersion++;
        }
      }
      uI.DEFAULT_IMAGE = null;
      uI.DEFAULT_MAPPING = Zt;
      uI.DEFAULT_ANISOTROPY = 1;
      class BI {
        constructor(A = 0, I = 0, g = 0, B = 1) {
          BI.prototype.isVector4 = true, this.x = A, this.y = I, this.z = g, this.w = B;
        }
        get width() {
          return this.z;
        }
        set width(A) {
          this.z = A;
        }
        get height() {
          return this.w;
        }
        set height(A) {
          this.w = A;
        }
        set(A, I, g, B) {
          return this.x = A, this.y = I, this.z = g, this.w = B, this;
        }
        setScalar(A) {
          return this.x = A, this.y = A, this.z = A, this.w = A, this;
        }
        setX(A) {
          return this.x = A, this;
        }
        setY(A) {
          return this.y = A, this;
        }
        setZ(A) {
          return this.z = A, this;
        }
        setW(A) {
          return this.w = A, this;
        }
        setComponent(A, I) {
          switch (A) {
            case 0:
              this.x = I;
              break;
            case 1:
              this.y = I;
              break;
            case 2:
              this.z = I;
              break;
            case 3:
              this.w = I;
              break;
            default:
              throw new Error("index is out of range: " + A);
          }
          return this;
        }
        getComponent(A) {
          switch (A) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            case 3:
              return this.w;
            default:
              throw new Error("index is out of range: " + A);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y, this.z, this.w);
        }
        copy(A) {
          return this.x = A.x, this.y = A.y, this.z = A.z, this.w = A.w !== void 0 ? A.w : 1, this;
        }
        add(A) {
          return this.x += A.x, this.y += A.y, this.z += A.z, this.w += A.w, this;
        }
        addScalar(A) {
          return this.x += A, this.y += A, this.z += A, this.w += A, this;
        }
        addVectors(A, I) {
          return this.x = A.x + I.x, this.y = A.y + I.y, this.z = A.z + I.z, this.w = A.w + I.w, this;
        }
        addScaledVector(A, I) {
          return this.x += A.x * I, this.y += A.y * I, this.z += A.z * I, this.w += A.w * I, this;
        }
        sub(A) {
          return this.x -= A.x, this.y -= A.y, this.z -= A.z, this.w -= A.w, this;
        }
        subScalar(A) {
          return this.x -= A, this.y -= A, this.z -= A, this.w -= A, this;
        }
        subVectors(A, I) {
          return this.x = A.x - I.x, this.y = A.y - I.y, this.z = A.z - I.z, this.w = A.w - I.w, this;
        }
        multiply(A) {
          return this.x *= A.x, this.y *= A.y, this.z *= A.z, this.w *= A.w, this;
        }
        multiplyScalar(A) {
          return this.x *= A, this.y *= A, this.z *= A, this.w *= A, this;
        }
        applyMatrix4(A) {
          const I = this.x, g = this.y, B = this.z, Q = this.w, E = A.elements;
          return this.x = E[0] * I + E[4] * g + E[8] * B + E[12] * Q, this.y = E[1] * I + E[5] * g + E[9] * B + E[13] * Q, this.z = E[2] * I + E[6] * g + E[10] * B + E[14] * Q, this.w = E[3] * I + E[7] * g + E[11] * B + E[15] * Q, this;
        }
        divide(A) {
          return this.x /= A.x, this.y /= A.y, this.z /= A.z, this.w /= A.w, this;
        }
        divideScalar(A) {
          return this.multiplyScalar(1 / A);
        }
        setAxisAngleFromQuaternion(A) {
          this.w = 2 * Math.acos(A.w);
          const I = Math.sqrt(1 - A.w * A.w);
          return I < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = A.x / I, this.y = A.y / I, this.z = A.z / I), this;
        }
        setAxisAngleFromRotationMatrix(A) {
          let I, g, B, Q;
          const o = A.elements, t = o[0], e = o[4], s = o[8], a = o[1], r = o[5], c = o[9], S = o[2], h = o[6], D = o[10];
          if (Math.abs(e - a) < 0.01 && Math.abs(s - S) < 0.01 && Math.abs(c - h) < 0.01) {
            if (Math.abs(e + a) < 0.1 && Math.abs(s + S) < 0.1 && Math.abs(c + h) < 0.1 && Math.abs(t + r + D - 3) < 0.1) return this.set(1, 0, 0, 0), this;
            I = Math.PI;
            const M = (t + 1) / 2, k = (r + 1) / 2, p = (D + 1) / 2, R = (e + a) / 4, Y = (s + S) / 4, m = (c + h) / 4;
            return M > k && M > p ? M < 0.01 ? (g = 0, B = 0.707106781, Q = 0.707106781) : (g = Math.sqrt(M), B = R / g, Q = Y / g) : k > p ? k < 0.01 ? (g = 0.707106781, B = 0, Q = 0.707106781) : (B = Math.sqrt(k), g = R / B, Q = m / B) : p < 0.01 ? (g = 0.707106781, B = 0.707106781, Q = 0) : (Q = Math.sqrt(p), g = Y / Q, B = m / Q), this.set(g, B, Q, I), this;
          }
          let U = Math.sqrt((h - c) * (h - c) + (s - S) * (s - S) + (a - e) * (a - e));
          return Math.abs(U) < 1e-3 && (U = 1), this.x = (h - c) / U, this.y = (s - S) / U, this.z = (a - e) / U, this.w = Math.acos((t + r + D - 1) / 2), this;
        }
        setFromMatrixPosition(A) {
          const I = A.elements;
          return this.x = I[12], this.y = I[13], this.z = I[14], this.w = I[15], this;
        }
        min(A) {
          return this.x = Math.min(this.x, A.x), this.y = Math.min(this.y, A.y), this.z = Math.min(this.z, A.z), this.w = Math.min(this.w, A.w), this;
        }
        max(A) {
          return this.x = Math.max(this.x, A.x), this.y = Math.max(this.y, A.y), this.z = Math.max(this.z, A.z), this.w = Math.max(this.w, A.w), this;
        }
        clamp(A, I) {
          return this.x = WA(this.x, A.x, I.x), this.y = WA(this.y, A.y, I.y), this.z = WA(this.z, A.z, I.z), this.w = WA(this.w, A.w, I.w), this;
        }
        clampScalar(A, I) {
          return this.x = WA(this.x, A, I), this.y = WA(this.y, A, I), this.z = WA(this.z, A, I), this.w = WA(this.w, A, I), this;
        }
        clampLength(A, I) {
          const g = this.length();
          return this.divideScalar(g || 1).multiplyScalar(WA(g, A, I));
        }
        floor() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
        }
        ceil() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
        }
        round() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
        }
        roundToZero() {
          return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
        }
        negate() {
          return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
        }
        dot(A) {
          return this.x * A.x + this.y * A.y + this.z * A.z + this.w * A.w;
        }
        lengthSq() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }
        manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        setLength(A) {
          return this.normalize().multiplyScalar(A);
        }
        lerp(A, I) {
          return this.x += (A.x - this.x) * I, this.y += (A.y - this.y) * I, this.z += (A.z - this.z) * I, this.w += (A.w - this.w) * I, this;
        }
        lerpVectors(A, I, g) {
          return this.x = A.x + (I.x - A.x) * g, this.y = A.y + (I.y - A.y) * g, this.z = A.z + (I.z - A.z) * g, this.w = A.w + (I.w - A.w) * g, this;
        }
        equals(A) {
          return A.x === this.x && A.y === this.y && A.z === this.z && A.w === this.w;
        }
        fromArray(A, I = 0) {
          return this.x = A[I], this.y = A[I + 1], this.z = A[I + 2], this.w = A[I + 3], this;
        }
        toArray(A = [], I = 0) {
          return A[I] = this.x, A[I + 1] = this.y, A[I + 2] = this.z, A[I + 3] = this.w, A;
        }
        fromBufferAttribute(A, I) {
          return this.x = A.getX(I), this.y = A.getY(I), this.z = A.getZ(I), this.w = A.getW(I), this;
        }
        random() {
          return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
        }
        *[Symbol.iterator]() {
          yield this.x, yield this.y, yield this.z, yield this.w;
        }
      }
      class uh extends PB {
        constructor(A = 1, I = 1, g = {}) {
          super(), g = Object.assign({
            generateMipmaps: false,
            internalFormat: null,
            minFilter: sg,
            depthBuffer: true,
            stencilBuffer: false,
            resolveDepthBuffer: true,
            resolveStencilBuffer: true,
            depthTexture: null,
            samples: 0,
            count: 1,
            depth: 1,
            multiview: false
          }, g), this.isRenderTarget = true, this.width = A, this.height = I, this.depth = g.depth, this.scissor = new BI(0, 0, A, I), this.scissorTest = false, this.viewport = new BI(0, 0, A, I);
          const B = {
            width: A,
            height: I,
            depth: g.depth
          }, Q = new uI(B);
          this.textures = [];
          const E = g.count;
          for (let i = 0; i < E; i++) this.textures[i] = Q.clone(), this.textures[i].isRenderTargetTexture = true, this.textures[i].renderTarget = this;
          this._setTextureOptions(g), this.depthBuffer = g.depthBuffer, this.stencilBuffer = g.stencilBuffer, this.resolveDepthBuffer = g.resolveDepthBuffer, this.resolveStencilBuffer = g.resolveStencilBuffer, this._depthTexture = null, this.depthTexture = g.depthTexture, this.samples = g.samples, this.multiview = g.multiview;
        }
        _setTextureOptions(A = {}) {
          const I = {
            minFilter: sg,
            generateMipmaps: false,
            flipY: false,
            internalFormat: null
          };
          A.mapping !== void 0 && (I.mapping = A.mapping), A.wrapS !== void 0 && (I.wrapS = A.wrapS), A.wrapT !== void 0 && (I.wrapT = A.wrapT), A.wrapR !== void 0 && (I.wrapR = A.wrapR), A.magFilter !== void 0 && (I.magFilter = A.magFilter), A.minFilter !== void 0 && (I.minFilter = A.minFilter), A.format !== void 0 && (I.format = A.format), A.type !== void 0 && (I.type = A.type), A.anisotropy !== void 0 && (I.anisotropy = A.anisotropy), A.colorSpace !== void 0 && (I.colorSpace = A.colorSpace), A.flipY !== void 0 && (I.flipY = A.flipY), A.generateMipmaps !== void 0 && (I.generateMipmaps = A.generateMipmaps), A.internalFormat !== void 0 && (I.internalFormat = A.internalFormat);
          for (let g = 0; g < this.textures.length; g++) this.textures[g].setValues(I);
        }
        get texture() {
          return this.textures[0];
        }
        set texture(A) {
          this.textures[0] = A;
        }
        set depthTexture(A) {
          this._depthTexture !== null && (this._depthTexture.renderTarget = null), A !== null && (A.renderTarget = this), this._depthTexture = A;
        }
        get depthTexture() {
          return this._depthTexture;
        }
        setSize(A, I, g = 1) {
          if (this.width !== A || this.height !== I || this.depth !== g) {
            this.width = A, this.height = I, this.depth = g;
            for (let B = 0, Q = this.textures.length; B < Q; B++) this.textures[B].image.width = A, this.textures[B].image.height = I, this.textures[B].image.depth = g, this.textures[B].isArrayTexture = this.textures[B].image.depth > 1;
            this.dispose();
          }
          this.viewport.set(0, 0, A, I), this.scissor.set(0, 0, A, I);
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(A) {
          this.width = A.width, this.height = A.height, this.depth = A.depth, this.scissor.copy(A.scissor), this.scissorTest = A.scissorTest, this.viewport.copy(A.viewport), this.textures.length = 0;
          for (let I = 0, g = A.textures.length; I < g; I++) {
            this.textures[I] = A.textures[I].clone(), this.textures[I].isRenderTargetTexture = true, this.textures[I].renderTarget = this;
            const B = Object.assign({}, A.textures[I].image);
            this.textures[I].source = new Ae(B);
          }
          return this.depthBuffer = A.depthBuffer, this.stencilBuffer = A.stencilBuffer, this.resolveDepthBuffer = A.resolveDepthBuffer, this.resolveStencilBuffer = A.resolveStencilBuffer, A.depthTexture !== null && (this.depthTexture = A.depthTexture.clone()), this.samples = A.samples, this;
        }
        dispose() {
          this.dispatchEvent({
            type: "dispose"
          });
        }
      }
      class gB extends uh {
        constructor(A = 1, I = 1, g = {}) {
          super(A, I, g), this.isWebGLRenderTarget = true;
        }
      }
      class YD extends uI {
        constructor(A = null, I = 1, g = 1, B = 1) {
          super(null), this.isDataArrayTexture = true, this.image = {
            data: A,
            width: I,
            height: g,
            depth: B
          }, this.magFilter = og, this.minFilter = og, this.wrapR = Zg, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1, this.layerUpdates = /* @__PURE__ */ new Set();
        }
        addLayerUpdate(A) {
          this.layerUpdates.add(A);
        }
        clearLayerUpdates() {
          this.layerUpdates.clear();
        }
      }
      class Hh extends uI {
        constructor(A = null, I = 1, g = 1, B = 1) {
          super(null), this.isData3DTexture = true, this.image = {
            data: A,
            width: I,
            height: g,
            depth: B
          }, this.magFilter = og, this.minFilter = og, this.wrapR = Zg, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1;
        }
      }
      class Xg {
        constructor(A = new J(1 / 0, 1 / 0, 1 / 0), I = new J(-1 / 0, -1 / 0, -1 / 0)) {
          this.isBox3 = true, this.min = A, this.max = I;
        }
        set(A, I) {
          return this.min.copy(A), this.max.copy(I), this;
        }
        setFromArray(A) {
          this.makeEmpty();
          for (let I = 0, g = A.length; I < g; I += 3) this.expandByPoint(Kg.fromArray(A, I));
          return this;
        }
        setFromBufferAttribute(A) {
          this.makeEmpty();
          for (let I = 0, g = A.count; I < g; I++) this.expandByPoint(Kg.fromBufferAttribute(A, I));
          return this;
        }
        setFromPoints(A) {
          this.makeEmpty();
          for (let I = 0, g = A.length; I < g; I++) this.expandByPoint(A[I]);
          return this;
        }
        setFromCenterAndSize(A, I) {
          const g = Kg.copy(I).multiplyScalar(0.5);
          return this.min.copy(A).sub(g), this.max.copy(A).add(g), this;
        }
        setFromObject(A, I = false) {
          return this.makeEmpty(), this.expandByObject(A, I);
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(A) {
          return this.min.copy(A.min), this.max.copy(A.max), this;
        }
        makeEmpty() {
          return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
        }
        isEmpty() {
          return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
        }
        getCenter(A) {
          return this.isEmpty() ? A.set(0, 0, 0) : A.addVectors(this.min, this.max).multiplyScalar(0.5);
        }
        getSize(A) {
          return this.isEmpty() ? A.set(0, 0, 0) : A.subVectors(this.max, this.min);
        }
        expandByPoint(A) {
          return this.min.min(A), this.max.max(A), this;
        }
        expandByVector(A) {
          return this.min.sub(A), this.max.add(A), this;
        }
        expandByScalar(A) {
          return this.min.addScalar(-A), this.max.addScalar(A), this;
        }
        expandByObject(A, I = false) {
          A.updateWorldMatrix(false, false);
          const g = A.geometry;
          if (g !== void 0) {
            const Q = g.getAttribute("position");
            if (I === true && Q !== void 0 && A.isInstancedMesh !== true) for (let E = 0, i = Q.count; E < i; E++) A.isMesh === true ? A.getVertexPosition(E, Kg) : Kg.fromBufferAttribute(Q, E), Kg.applyMatrix4(A.matrixWorld), this.expandByPoint(Kg);
            else A.boundingBox !== void 0 ? (A.boundingBox === null && A.computeBoundingBox(), jQ.copy(A.boundingBox)) : (g.boundingBox === null && g.computeBoundingBox(), jQ.copy(g.boundingBox)), jQ.applyMatrix4(A.matrixWorld), this.union(jQ);
          }
          const B = A.children;
          for (let Q = 0, E = B.length; Q < E; Q++) this.expandByObject(B[Q], I);
          return this;
        }
        containsPoint(A) {
          return A.x >= this.min.x && A.x <= this.max.x && A.y >= this.min.y && A.y <= this.max.y && A.z >= this.min.z && A.z <= this.max.z;
        }
        containsBox(A) {
          return this.min.x <= A.min.x && A.max.x <= this.max.x && this.min.y <= A.min.y && A.max.y <= this.max.y && this.min.z <= A.min.z && A.max.z <= this.max.z;
        }
        getParameter(A, I) {
          return I.set((A.x - this.min.x) / (this.max.x - this.min.x), (A.y - this.min.y) / (this.max.y - this.min.y), (A.z - this.min.z) / (this.max.z - this.min.z));
        }
        intersectsBox(A) {
          return A.max.x >= this.min.x && A.min.x <= this.max.x && A.max.y >= this.min.y && A.min.y <= this.max.y && A.max.z >= this.min.z && A.min.z <= this.max.z;
        }
        intersectsSphere(A) {
          return this.clampPoint(A.center, Kg), Kg.distanceToSquared(A.center) <= A.radius * A.radius;
        }
        intersectsPlane(A) {
          let I, g;
          return A.normal.x > 0 ? (I = A.normal.x * this.min.x, g = A.normal.x * this.max.x) : (I = A.normal.x * this.max.x, g = A.normal.x * this.min.x), A.normal.y > 0 ? (I += A.normal.y * this.min.y, g += A.normal.y * this.max.y) : (I += A.normal.y * this.max.y, g += A.normal.y * this.min.y), A.normal.z > 0 ? (I += A.normal.z * this.min.z, g += A.normal.z * this.max.z) : (I += A.normal.z * this.max.z, g += A.normal.z * this.min.z), I <= -A.constant && g >= -A.constant;
        }
        intersectsTriangle(A) {
          if (this.isEmpty()) return false;
          this.getCenter(AQ), VQ.subVectors(this.max, AQ), eB.subVectors(A.a, AQ), sB.subVectors(A.b, AQ), aB.subVectors(A.c, AQ), GC.subVectors(sB, eB), kC.subVectors(aB, sB), HC.subVectors(eB, aB);
          let I = [
            0,
            -GC.z,
            GC.y,
            0,
            -kC.z,
            kC.y,
            0,
            -HC.z,
            HC.y,
            GC.z,
            0,
            -GC.x,
            kC.z,
            0,
            -kC.x,
            HC.z,
            0,
            -HC.x,
            -GC.y,
            GC.x,
            0,
            -kC.y,
            kC.x,
            0,
            -HC.y,
            HC.x,
            0
          ];
          return !ki(I, eB, sB, aB, VQ) || (I = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
          ], !ki(I, eB, sB, aB, VQ)) ? false : (XQ.crossVectors(GC, kC), I = [
            XQ.x,
            XQ.y,
            XQ.z
          ], ki(I, eB, sB, aB, VQ));
        }
        clampPoint(A, I) {
          return I.copy(A).clamp(this.min, this.max);
        }
        distanceToPoint(A) {
          return this.clampPoint(A, Kg).distanceTo(A);
        }
        getBoundingSphere(A) {
          return this.isEmpty() ? A.makeEmpty() : (this.getCenter(A.center), A.radius = this.getSize(Kg).length() * 0.5), A;
        }
        intersect(A) {
          return this.min.max(A.min), this.max.min(A.max), this.isEmpty() && this.makeEmpty(), this;
        }
        union(A) {
          return this.min.min(A.min), this.max.max(A.max), this;
        }
        applyMatrix4(A) {
          return this.isEmpty() ? this : (gC[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(A), gC[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(A), gC[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(A), gC[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(A), gC[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(A), gC[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(A), gC[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(A), gC[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(A), this.setFromPoints(gC), this);
        }
        translate(A) {
          return this.min.add(A), this.max.add(A), this;
        }
        equals(A) {
          return A.min.equals(this.min) && A.max.equals(this.max);
        }
        toJSON() {
          return {
            min: this.min.toArray(),
            max: this.max.toArray()
          };
        }
        fromJSON(A) {
          return this.min.fromArray(A.min), this.max.fromArray(A.max), this;
        }
      }
      const gC = [
        new J(),
        new J(),
        new J(),
        new J(),
        new J(),
        new J(),
        new J(),
        new J()
      ], Kg = new J(), jQ = new Xg(), eB = new J(), sB = new J(), aB = new J(), GC = new J(), kC = new J(), HC = new J(), AQ = new J(), VQ = new J(), XQ = new J(), mC = new J();
      function ki(C, A, I, g, B) {
        for (let Q = 0, E = C.length - 3; Q <= E; Q += 3) {
          mC.fromArray(C, Q);
          const i = B.x * Math.abs(mC.x) + B.y * Math.abs(mC.y) + B.z * Math.abs(mC.z), o = A.dot(mC), t = I.dot(mC), e = g.dot(mC);
          if (Math.max(-Math.max(o, t, e), Math.min(o, t, e)) > i) return false;
        }
        return true;
      }
      const mh = new Xg(), IQ = new J(), yi = new J();
      class zg {
        constructor(A = new J(), I = -1) {
          this.isSphere = true, this.center = A, this.radius = I;
        }
        set(A, I) {
          return this.center.copy(A), this.radius = I, this;
        }
        setFromPoints(A, I) {
          const g = this.center;
          I !== void 0 ? g.copy(I) : mh.setFromPoints(A).getCenter(g);
          let B = 0;
          for (let Q = 0, E = A.length; Q < E; Q++) B = Math.max(B, g.distanceToSquared(A[Q]));
          return this.radius = Math.sqrt(B), this;
        }
        copy(A) {
          return this.center.copy(A.center), this.radius = A.radius, this;
        }
        isEmpty() {
          return this.radius < 0;
        }
        makeEmpty() {
          return this.center.set(0, 0, 0), this.radius = -1, this;
        }
        containsPoint(A) {
          return A.distanceToSquared(this.center) <= this.radius * this.radius;
        }
        distanceToPoint(A) {
          return A.distanceTo(this.center) - this.radius;
        }
        intersectsSphere(A) {
          const I = this.radius + A.radius;
          return A.center.distanceToSquared(this.center) <= I * I;
        }
        intersectsBox(A) {
          return A.intersectsSphere(this);
        }
        intersectsPlane(A) {
          return Math.abs(A.distanceToPoint(this.center)) <= this.radius;
        }
        clampPoint(A, I) {
          const g = this.center.distanceToSquared(A);
          return I.copy(A), g > this.radius * this.radius && (I.sub(this.center).normalize(), I.multiplyScalar(this.radius).add(this.center)), I;
        }
        getBoundingBox(A) {
          return this.isEmpty() ? (A.makeEmpty(), A) : (A.set(this.center, this.center), A.expandByScalar(this.radius), A);
        }
        applyMatrix4(A) {
          return this.center.applyMatrix4(A), this.radius = this.radius * A.getMaxScaleOnAxis(), this;
        }
        translate(A) {
          return this.center.add(A), this;
        }
        expandByPoint(A) {
          if (this.isEmpty()) return this.center.copy(A), this.radius = 0, this;
          IQ.subVectors(A, this.center);
          const I = IQ.lengthSq();
          if (I > this.radius * this.radius) {
            const g = Math.sqrt(I), B = (g - this.radius) * 0.5;
            this.center.addScaledVector(IQ, B / g), this.radius += B;
          }
          return this;
        }
        union(A) {
          return A.isEmpty() ? this : this.isEmpty() ? (this.copy(A), this) : (this.center.equals(A.center) === true ? this.radius = Math.max(this.radius, A.radius) : (yi.subVectors(A.center, this.center).setLength(A.radius), this.expandByPoint(IQ.copy(A.center).add(yi)), this.expandByPoint(IQ.copy(A.center).sub(yi))), this);
        }
        equals(A) {
          return A.center.equals(this.center) && A.radius === this.radius;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        toJSON() {
          return {
            radius: this.radius,
            center: this.center.toArray()
          };
        }
        fromJSON(A) {
          return this.radius = A.radius, this.center.fromArray(A.center), this;
        }
      }
      const CC = new J(), Mi = new J(), zQ = new J(), yC = new J(), Ki = new J(), $Q = new J(), Ui = new J();
      let bQ = class {
        constructor(A = new J(), I = new J(0, 0, -1)) {
          this.origin = A, this.direction = I;
        }
        set(A, I) {
          return this.origin.copy(A), this.direction.copy(I), this;
        }
        copy(A) {
          return this.origin.copy(A.origin), this.direction.copy(A.direction), this;
        }
        at(A, I) {
          return I.copy(this.origin).addScaledVector(this.direction, A);
        }
        lookAt(A) {
          return this.direction.copy(A).sub(this.origin).normalize(), this;
        }
        recast(A) {
          return this.origin.copy(this.at(A, CC)), this;
        }
        closestPointToPoint(A, I) {
          I.subVectors(A, this.origin);
          const g = I.dot(this.direction);
          return g < 0 ? I.copy(this.origin) : I.copy(this.origin).addScaledVector(this.direction, g);
        }
        distanceToPoint(A) {
          return Math.sqrt(this.distanceSqToPoint(A));
        }
        distanceSqToPoint(A) {
          const I = CC.subVectors(A, this.origin).dot(this.direction);
          return I < 0 ? this.origin.distanceToSquared(A) : (CC.copy(this.origin).addScaledVector(this.direction, I), CC.distanceToSquared(A));
        }
        distanceSqToSegment(A, I, g, B) {
          Mi.copy(A).add(I).multiplyScalar(0.5), zQ.copy(I).sub(A).normalize(), yC.copy(this.origin).sub(Mi);
          const Q = A.distanceTo(I) * 0.5, E = -this.direction.dot(zQ), i = yC.dot(this.direction), o = -yC.dot(zQ), t = yC.lengthSq(), e = Math.abs(1 - E * E);
          let s, a, r, c;
          if (e > 0) if (s = E * o - i, a = E * i - o, c = Q * e, s >= 0) if (a >= -c) if (a <= c) {
            const S = 1 / e;
            s *= S, a *= S, r = s * (s + E * a + 2 * i) + a * (E * s + a + 2 * o) + t;
          } else a = Q, s = Math.max(0, -(E * a + i)), r = -s * s + a * (a + 2 * o) + t;
          else a = -Q, s = Math.max(0, -(E * a + i)), r = -s * s + a * (a + 2 * o) + t;
          else a <= -c ? (s = Math.max(0, -(-E * Q + i)), a = s > 0 ? -Q : Math.min(Math.max(-Q, -o), Q), r = -s * s + a * (a + 2 * o) + t) : a <= c ? (s = 0, a = Math.min(Math.max(-Q, -o), Q), r = a * (a + 2 * o) + t) : (s = Math.max(0, -(E * Q + i)), a = s > 0 ? Q : Math.min(Math.max(-Q, -o), Q), r = -s * s + a * (a + 2 * o) + t);
          else a = E > 0 ? -Q : Q, s = Math.max(0, -(E * a + i)), r = -s * s + a * (a + 2 * o) + t;
          return g && g.copy(this.origin).addScaledVector(this.direction, s), B && B.copy(Mi).addScaledVector(zQ, a), r;
        }
        intersectSphere(A, I) {
          CC.subVectors(A.center, this.origin);
          const g = CC.dot(this.direction), B = CC.dot(CC) - g * g, Q = A.radius * A.radius;
          if (B > Q) return null;
          const E = Math.sqrt(Q - B), i = g - E, o = g + E;
          return o < 0 ? null : i < 0 ? this.at(o, I) : this.at(i, I);
        }
        intersectsSphere(A) {
          return A.radius < 0 ? false : this.distanceSqToPoint(A.center) <= A.radius * A.radius;
        }
        distanceToPlane(A) {
          const I = A.normal.dot(this.direction);
          if (I === 0) return A.distanceToPoint(this.origin) === 0 ? 0 : null;
          const g = -(this.origin.dot(A.normal) + A.constant) / I;
          return g >= 0 ? g : null;
        }
        intersectPlane(A, I) {
          const g = this.distanceToPlane(A);
          return g === null ? null : this.at(g, I);
        }
        intersectsPlane(A) {
          const I = A.distanceToPoint(this.origin);
          return I === 0 || A.normal.dot(this.direction) * I < 0;
        }
        intersectBox(A, I) {
          let g, B, Q, E, i, o;
          const t = 1 / this.direction.x, e = 1 / this.direction.y, s = 1 / this.direction.z, a = this.origin;
          return t >= 0 ? (g = (A.min.x - a.x) * t, B = (A.max.x - a.x) * t) : (g = (A.max.x - a.x) * t, B = (A.min.x - a.x) * t), e >= 0 ? (Q = (A.min.y - a.y) * e, E = (A.max.y - a.y) * e) : (Q = (A.max.y - a.y) * e, E = (A.min.y - a.y) * e), g > E || Q > B || ((Q > g || isNaN(g)) && (g = Q), (E < B || isNaN(B)) && (B = E), s >= 0 ? (i = (A.min.z - a.z) * s, o = (A.max.z - a.z) * s) : (i = (A.max.z - a.z) * s, o = (A.min.z - a.z) * s), g > o || i > B) || ((i > g || g !== g) && (g = i), (o < B || B !== B) && (B = o), B < 0) ? null : this.at(g >= 0 ? g : B, I);
        }
        intersectsBox(A) {
          return this.intersectBox(A, CC) !== null;
        }
        intersectTriangle(A, I, g, B, Q) {
          Ki.subVectors(I, A), $Q.subVectors(g, A), Ui.crossVectors(Ki, $Q);
          let E = this.direction.dot(Ui), i;
          if (E > 0) {
            if (B) return null;
            i = 1;
          } else if (E < 0) i = -1, E = -E;
          else return null;
          yC.subVectors(this.origin, A);
          const o = i * this.direction.dot($Q.crossVectors(yC, $Q));
          if (o < 0) return null;
          const t = i * this.direction.dot(Ki.cross(yC));
          if (t < 0 || o + t > E) return null;
          const e = -i * yC.dot(Ui);
          return e < 0 ? null : this.at(e / E, Q);
        }
        applyMatrix4(A) {
          return this.origin.applyMatrix4(A), this.direction.transformDirection(A), this;
        }
        equals(A) {
          return A.origin.equals(this.origin) && A.direction.equals(this.direction);
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      class uA {
        constructor(A, I, g, B, Q, E, i, o, t, e, s, a, r, c, S, h) {
          uA.prototype.isMatrix4 = true, this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
          ], A !== void 0 && this.set(A, I, g, B, Q, E, i, o, t, e, s, a, r, c, S, h);
        }
        set(A, I, g, B, Q, E, i, o, t, e, s, a, r, c, S, h) {
          const D = this.elements;
          return D[0] = A, D[4] = I, D[8] = g, D[12] = B, D[1] = Q, D[5] = E, D[9] = i, D[13] = o, D[2] = t, D[6] = e, D[10] = s, D[14] = a, D[3] = r, D[7] = c, D[11] = S, D[15] = h, this;
        }
        identity() {
          return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }
        clone() {
          return new uA().fromArray(this.elements);
        }
        copy(A) {
          const I = this.elements, g = A.elements;
          return I[0] = g[0], I[1] = g[1], I[2] = g[2], I[3] = g[3], I[4] = g[4], I[5] = g[5], I[6] = g[6], I[7] = g[7], I[8] = g[8], I[9] = g[9], I[10] = g[10], I[11] = g[11], I[12] = g[12], I[13] = g[13], I[14] = g[14], I[15] = g[15], this;
        }
        copyPosition(A) {
          const I = this.elements, g = A.elements;
          return I[12] = g[12], I[13] = g[13], I[14] = g[14], this;
        }
        setFromMatrix3(A) {
          const I = A.elements;
          return this.set(I[0], I[3], I[6], 0, I[1], I[4], I[7], 0, I[2], I[5], I[8], 0, 0, 0, 0, 1), this;
        }
        extractBasis(A, I, g) {
          return A.setFromMatrixColumn(this, 0), I.setFromMatrixColumn(this, 1), g.setFromMatrixColumn(this, 2), this;
        }
        makeBasis(A, I, g) {
          return this.set(A.x, I.x, g.x, 0, A.y, I.y, g.y, 0, A.z, I.z, g.z, 0, 0, 0, 0, 1), this;
        }
        extractRotation(A) {
          const I = this.elements, g = A.elements, B = 1 / DB.setFromMatrixColumn(A, 0).length(), Q = 1 / DB.setFromMatrixColumn(A, 1).length(), E = 1 / DB.setFromMatrixColumn(A, 2).length();
          return I[0] = g[0] * B, I[1] = g[1] * B, I[2] = g[2] * B, I[3] = 0, I[4] = g[4] * Q, I[5] = g[5] * Q, I[6] = g[6] * Q, I[7] = 0, I[8] = g[8] * E, I[9] = g[9] * E, I[10] = g[10] * E, I[11] = 0, I[12] = 0, I[13] = 0, I[14] = 0, I[15] = 1, this;
        }
        makeRotationFromEuler(A) {
          const I = this.elements, g = A.x, B = A.y, Q = A.z, E = Math.cos(g), i = Math.sin(g), o = Math.cos(B), t = Math.sin(B), e = Math.cos(Q), s = Math.sin(Q);
          if (A.order === "XYZ") {
            const a = E * e, r = E * s, c = i * e, S = i * s;
            I[0] = o * e, I[4] = -o * s, I[8] = t, I[1] = r + c * t, I[5] = a - S * t, I[9] = -i * o, I[2] = S - a * t, I[6] = c + r * t, I[10] = E * o;
          } else if (A.order === "YXZ") {
            const a = o * e, r = o * s, c = t * e, S = t * s;
            I[0] = a + S * i, I[4] = c * i - r, I[8] = E * t, I[1] = E * s, I[5] = E * e, I[9] = -i, I[2] = r * i - c, I[6] = S + a * i, I[10] = E * o;
          } else if (A.order === "ZXY") {
            const a = o * e, r = o * s, c = t * e, S = t * s;
            I[0] = a - S * i, I[4] = -E * s, I[8] = c + r * i, I[1] = r + c * i, I[5] = E * e, I[9] = S - a * i, I[2] = -E * t, I[6] = i, I[10] = E * o;
          } else if (A.order === "ZYX") {
            const a = E * e, r = E * s, c = i * e, S = i * s;
            I[0] = o * e, I[4] = c * t - r, I[8] = a * t + S, I[1] = o * s, I[5] = S * t + a, I[9] = r * t - c, I[2] = -t, I[6] = i * o, I[10] = E * o;
          } else if (A.order === "YZX") {
            const a = E * o, r = E * t, c = i * o, S = i * t;
            I[0] = o * e, I[4] = S - a * s, I[8] = c * s + r, I[1] = s, I[5] = E * e, I[9] = -i * e, I[2] = -t * e, I[6] = r * s + c, I[10] = a - S * s;
          } else if (A.order === "XZY") {
            const a = E * o, r = E * t, c = i * o, S = i * t;
            I[0] = o * e, I[4] = -s, I[8] = t * e, I[1] = a * s + S, I[5] = E * e, I[9] = r * s - c, I[2] = c * s - r, I[6] = i * e, I[10] = S * s + a;
          }
          return I[3] = 0, I[7] = 0, I[11] = 0, I[12] = 0, I[13] = 0, I[14] = 0, I[15] = 1, this;
        }
        makeRotationFromQuaternion(A) {
          return this.compose(Th, A, bh);
        }
        lookAt(A, I, g) {
          const B = this.elements;
          return wg.subVectors(A, I), wg.lengthSq() === 0 && (wg.z = 1), wg.normalize(), MC.crossVectors(g, wg), MC.lengthSq() === 0 && (Math.abs(g.z) === 1 ? wg.x += 1e-4 : wg.z += 1e-4, wg.normalize(), MC.crossVectors(g, wg)), MC.normalize(), AE.crossVectors(wg, MC), B[0] = MC.x, B[4] = AE.x, B[8] = wg.x, B[1] = MC.y, B[5] = AE.y, B[9] = wg.y, B[2] = MC.z, B[6] = AE.z, B[10] = wg.z, this;
        }
        multiply(A) {
          return this.multiplyMatrices(this, A);
        }
        premultiply(A) {
          return this.multiplyMatrices(A, this);
        }
        multiplyMatrices(A, I) {
          const g = A.elements, B = I.elements, Q = this.elements, E = g[0], i = g[4], o = g[8], t = g[12], e = g[1], s = g[5], a = g[9], r = g[13], c = g[2], S = g[6], h = g[10], D = g[14], U = g[3], M = g[7], k = g[11], p = g[15], R = B[0], Y = B[4], m = B[8], K = B[12], y = B[1], q = B[5], x = B[9], Z = B[13], j = B[2], z = B[6], V = B[10], iA = B[14], v = B[3], sA = B[7], rA = B[11], JA = B[15];
          return Q[0] = E * R + i * y + o * j + t * v, Q[4] = E * Y + i * q + o * z + t * sA, Q[8] = E * m + i * x + o * V + t * rA, Q[12] = E * K + i * Z + o * iA + t * JA, Q[1] = e * R + s * y + a * j + r * v, Q[5] = e * Y + s * q + a * z + r * sA, Q[9] = e * m + s * x + a * V + r * rA, Q[13] = e * K + s * Z + a * iA + r * JA, Q[2] = c * R + S * y + h * j + D * v, Q[6] = c * Y + S * q + h * z + D * sA, Q[10] = c * m + S * x + h * V + D * rA, Q[14] = c * K + S * Z + h * iA + D * JA, Q[3] = U * R + M * y + k * j + p * v, Q[7] = U * Y + M * q + k * z + p * sA, Q[11] = U * m + M * x + k * V + p * rA, Q[15] = U * K + M * Z + k * iA + p * JA, this;
        }
        multiplyScalar(A) {
          const I = this.elements;
          return I[0] *= A, I[4] *= A, I[8] *= A, I[12] *= A, I[1] *= A, I[5] *= A, I[9] *= A, I[13] *= A, I[2] *= A, I[6] *= A, I[10] *= A, I[14] *= A, I[3] *= A, I[7] *= A, I[11] *= A, I[15] *= A, this;
        }
        determinant() {
          const A = this.elements, I = A[0], g = A[4], B = A[8], Q = A[12], E = A[1], i = A[5], o = A[9], t = A[13], e = A[2], s = A[6], a = A[10], r = A[14], c = A[3], S = A[7], h = A[11], D = A[15];
          return c * (+Q * o * s - B * t * s - Q * i * a + g * t * a + B * i * r - g * o * r) + S * (+I * o * r - I * t * a + Q * E * a - B * E * r + B * t * e - Q * o * e) + h * (+I * t * s - I * i * r - Q * E * s + g * E * r + Q * i * e - g * t * e) + D * (-B * i * e - I * o * s + I * i * a + B * E * s - g * E * a + g * o * e);
        }
        transpose() {
          const A = this.elements;
          let I;
          return I = A[1], A[1] = A[4], A[4] = I, I = A[2], A[2] = A[8], A[8] = I, I = A[6], A[6] = A[9], A[9] = I, I = A[3], A[3] = A[12], A[12] = I, I = A[7], A[7] = A[13], A[13] = I, I = A[11], A[11] = A[14], A[14] = I, this;
        }
        setPosition(A, I, g) {
          const B = this.elements;
          return A.isVector3 ? (B[12] = A.x, B[13] = A.y, B[14] = A.z) : (B[12] = A, B[13] = I, B[14] = g), this;
        }
        invert() {
          const A = this.elements, I = A[0], g = A[1], B = A[2], Q = A[3], E = A[4], i = A[5], o = A[6], t = A[7], e = A[8], s = A[9], a = A[10], r = A[11], c = A[12], S = A[13], h = A[14], D = A[15], U = s * h * t - S * a * t + S * o * r - i * h * r - s * o * D + i * a * D, M = c * a * t - e * h * t - c * o * r + E * h * r + e * o * D - E * a * D, k = e * S * t - c * s * t + c * i * r - E * S * r - e * i * D + E * s * D, p = c * s * o - e * S * o - c * i * a + E * S * a + e * i * h - E * s * h, R = I * U + g * M + B * k + Q * p;
          if (R === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          const Y = 1 / R;
          return A[0] = U * Y, A[1] = (S * a * Q - s * h * Q - S * B * r + g * h * r + s * B * D - g * a * D) * Y, A[2] = (i * h * Q - S * o * Q + S * B * t - g * h * t - i * B * D + g * o * D) * Y, A[3] = (s * o * Q - i * a * Q - s * B * t + g * a * t + i * B * r - g * o * r) * Y, A[4] = M * Y, A[5] = (e * h * Q - c * a * Q + c * B * r - I * h * r - e * B * D + I * a * D) * Y, A[6] = (c * o * Q - E * h * Q - c * B * t + I * h * t + E * B * D - I * o * D) * Y, A[7] = (E * a * Q - e * o * Q + e * B * t - I * a * t - E * B * r + I * o * r) * Y, A[8] = k * Y, A[9] = (c * s * Q - e * S * Q - c * g * r + I * S * r + e * g * D - I * s * D) * Y, A[10] = (E * S * Q - c * i * Q + c * g * t - I * S * t - E * g * D + I * i * D) * Y, A[11] = (e * i * Q - E * s * Q - e * g * t + I * s * t + E * g * r - I * i * r) * Y, A[12] = p * Y, A[13] = (e * S * B - c * s * B + c * g * a - I * S * a - e * g * h + I * s * h) * Y, A[14] = (c * i * B - E * S * B - c * g * o + I * S * o + E * g * h - I * i * h) * Y, A[15] = (E * s * B - e * i * B + e * g * o - I * s * o - E * g * a + I * i * a) * Y, this;
        }
        scale(A) {
          const I = this.elements, g = A.x, B = A.y, Q = A.z;
          return I[0] *= g, I[4] *= B, I[8] *= Q, I[1] *= g, I[5] *= B, I[9] *= Q, I[2] *= g, I[6] *= B, I[10] *= Q, I[3] *= g, I[7] *= B, I[11] *= Q, this;
        }
        getMaxScaleOnAxis() {
          const A = this.elements, I = A[0] * A[0] + A[1] * A[1] + A[2] * A[2], g = A[4] * A[4] + A[5] * A[5] + A[6] * A[6], B = A[8] * A[8] + A[9] * A[9] + A[10] * A[10];
          return Math.sqrt(Math.max(I, g, B));
        }
        makeTranslation(A, I, g) {
          return A.isVector3 ? this.set(1, 0, 0, A.x, 0, 1, 0, A.y, 0, 0, 1, A.z, 0, 0, 0, 1) : this.set(1, 0, 0, A, 0, 1, 0, I, 0, 0, 1, g, 0, 0, 0, 1), this;
        }
        makeRotationX(A) {
          const I = Math.cos(A), g = Math.sin(A);
          return this.set(1, 0, 0, 0, 0, I, -g, 0, 0, g, I, 0, 0, 0, 0, 1), this;
        }
        makeRotationY(A) {
          const I = Math.cos(A), g = Math.sin(A);
          return this.set(I, 0, g, 0, 0, 1, 0, 0, -g, 0, I, 0, 0, 0, 0, 1), this;
        }
        makeRotationZ(A) {
          const I = Math.cos(A), g = Math.sin(A);
          return this.set(I, -g, 0, 0, g, I, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }
        makeRotationAxis(A, I) {
          const g = Math.cos(I), B = Math.sin(I), Q = 1 - g, E = A.x, i = A.y, o = A.z, t = Q * E, e = Q * i;
          return this.set(t * E + g, t * i - B * o, t * o + B * i, 0, t * i + B * o, e * i + g, e * o - B * E, 0, t * o - B * i, e * o + B * E, Q * o * o + g, 0, 0, 0, 0, 1), this;
        }
        makeScale(A, I, g) {
          return this.set(A, 0, 0, 0, 0, I, 0, 0, 0, 0, g, 0, 0, 0, 0, 1), this;
        }
        makeShear(A, I, g, B, Q, E) {
          return this.set(1, g, Q, 0, A, 1, E, 0, I, B, 1, 0, 0, 0, 0, 1), this;
        }
        compose(A, I, g) {
          const B = this.elements, Q = I._x, E = I._y, i = I._z, o = I._w, t = Q + Q, e = E + E, s = i + i, a = Q * t, r = Q * e, c = Q * s, S = E * e, h = E * s, D = i * s, U = o * t, M = o * e, k = o * s, p = g.x, R = g.y, Y = g.z;
          return B[0] = (1 - (S + D)) * p, B[1] = (r + k) * p, B[2] = (c - M) * p, B[3] = 0, B[4] = (r - k) * R, B[5] = (1 - (a + D)) * R, B[6] = (h + U) * R, B[7] = 0, B[8] = (c + M) * Y, B[9] = (h - U) * Y, B[10] = (1 - (a + S)) * Y, B[11] = 0, B[12] = A.x, B[13] = A.y, B[14] = A.z, B[15] = 1, this;
        }
        decompose(A, I, g) {
          const B = this.elements;
          let Q = DB.set(B[0], B[1], B[2]).length();
          const E = DB.set(B[4], B[5], B[6]).length(), i = DB.set(B[8], B[9], B[10]).length();
          this.determinant() < 0 && (Q = -Q), A.x = B[12], A.y = B[13], A.z = B[14], Ug.copy(this);
          const t = 1 / Q, e = 1 / E, s = 1 / i;
          return Ug.elements[0] *= t, Ug.elements[1] *= t, Ug.elements[2] *= t, Ug.elements[4] *= e, Ug.elements[5] *= e, Ug.elements[6] *= e, Ug.elements[8] *= s, Ug.elements[9] *= s, Ug.elements[10] *= s, I.setFromRotationMatrix(Ug), g.x = Q, g.y = E, g.z = i, this;
        }
        makePerspective(A, I, g, B, Q, E, i = vg, o = false) {
          const t = this.elements, e = 2 * Q / (I - A), s = 2 * Q / (g - B), a = (I + A) / (I - A), r = (g + B) / (g - B);
          let c, S;
          if (o) c = Q / (E - Q), S = E * Q / (E - Q);
          else if (i === vg) c = -(E + Q) / (E - Q), S = -2 * E * Q / (E - Q);
          else if (i === HE) c = -E / (E - Q), S = -E * Q / (E - Q);
          else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + i);
          return t[0] = e, t[4] = 0, t[8] = a, t[12] = 0, t[1] = 0, t[5] = s, t[9] = r, t[13] = 0, t[2] = 0, t[6] = 0, t[10] = c, t[14] = S, t[3] = 0, t[7] = 0, t[11] = -1, t[15] = 0, this;
        }
        makeOrthographic(A, I, g, B, Q, E, i = vg, o = false) {
          const t = this.elements, e = 2 / (I - A), s = 2 / (g - B), a = -(I + A) / (I - A), r = -(g + B) / (g - B);
          let c, S;
          if (o) c = 1 / (E - Q), S = E / (E - Q);
          else if (i === vg) c = -2 / (E - Q), S = -(E + Q) / (E - Q);
          else if (i === HE) c = -1 / (E - Q), S = -Q / (E - Q);
          else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + i);
          return t[0] = e, t[4] = 0, t[8] = 0, t[12] = a, t[1] = 0, t[5] = s, t[9] = 0, t[13] = r, t[2] = 0, t[6] = 0, t[10] = c, t[14] = S, t[3] = 0, t[7] = 0, t[11] = 0, t[15] = 1, this;
        }
        equals(A) {
          const I = this.elements, g = A.elements;
          for (let B = 0; B < 16; B++) if (I[B] !== g[B]) return false;
          return true;
        }
        fromArray(A, I = 0) {
          for (let g = 0; g < 16; g++) this.elements[g] = A[g + I];
          return this;
        }
        toArray(A = [], I = 0) {
          const g = this.elements;
          return A[I] = g[0], A[I + 1] = g[1], A[I + 2] = g[2], A[I + 3] = g[3], A[I + 4] = g[4], A[I + 5] = g[5], A[I + 6] = g[6], A[I + 7] = g[7], A[I + 8] = g[8], A[I + 9] = g[9], A[I + 10] = g[10], A[I + 11] = g[11], A[I + 12] = g[12], A[I + 13] = g[13], A[I + 14] = g[14], A[I + 15] = g[15], A;
        }
      }
      const DB = new J(), Ug = new uA(), Th = new J(0, 0, 0), bh = new J(1, 1, 1), MC = new J(), AE = new J(), wg = new J(), ns = new uA(), rs = new SI();
      class pI {
        constructor(A = 0, I = 0, g = 0, B = pI.DEFAULT_ORDER) {
          this.isEuler = true, this._x = A, this._y = I, this._z = g, this._order = B;
        }
        get x() {
          return this._x;
        }
        set x(A) {
          this._x = A, this._onChangeCallback();
        }
        get y() {
          return this._y;
        }
        set y(A) {
          this._y = A, this._onChangeCallback();
        }
        get z() {
          return this._z;
        }
        set z(A) {
          this._z = A, this._onChangeCallback();
        }
        get order() {
          return this._order;
        }
        set order(A) {
          this._order = A, this._onChangeCallback();
        }
        set(A, I, g, B = this._order) {
          return this._x = A, this._y = I, this._z = g, this._order = B, this._onChangeCallback(), this;
        }
        clone() {
          return new this.constructor(this._x, this._y, this._z, this._order);
        }
        copy(A) {
          return this._x = A._x, this._y = A._y, this._z = A._z, this._order = A._order, this._onChangeCallback(), this;
        }
        setFromRotationMatrix(A, I = this._order, g = true) {
          const B = A.elements, Q = B[0], E = B[4], i = B[8], o = B[1], t = B[5], e = B[9], s = B[2], a = B[6], r = B[10];
          switch (I) {
            case "XYZ":
              this._y = Math.asin(WA(i, -1, 1)), Math.abs(i) < 0.9999999 ? (this._x = Math.atan2(-e, r), this._z = Math.atan2(-E, Q)) : (this._x = Math.atan2(a, t), this._z = 0);
              break;
            case "YXZ":
              this._x = Math.asin(-WA(e, -1, 1)), Math.abs(e) < 0.9999999 ? (this._y = Math.atan2(i, r), this._z = Math.atan2(o, t)) : (this._y = Math.atan2(-s, Q), this._z = 0);
              break;
            case "ZXY":
              this._x = Math.asin(WA(a, -1, 1)), Math.abs(a) < 0.9999999 ? (this._y = Math.atan2(-s, r), this._z = Math.atan2(-E, t)) : (this._y = 0, this._z = Math.atan2(o, Q));
              break;
            case "ZYX":
              this._y = Math.asin(-WA(s, -1, 1)), Math.abs(s) < 0.9999999 ? (this._x = Math.atan2(a, r), this._z = Math.atan2(o, Q)) : (this._x = 0, this._z = Math.atan2(-E, t));
              break;
            case "YZX":
              this._z = Math.asin(WA(o, -1, 1)), Math.abs(o) < 0.9999999 ? (this._x = Math.atan2(-e, t), this._y = Math.atan2(-s, Q)) : (this._x = 0, this._y = Math.atan2(i, r));
              break;
            case "XZY":
              this._z = Math.asin(-WA(E, -1, 1)), Math.abs(E) < 0.9999999 ? (this._x = Math.atan2(a, t), this._y = Math.atan2(i, Q)) : (this._x = Math.atan2(-e, r), this._y = 0);
              break;
            default:
              console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + I);
          }
          return this._order = I, g === true && this._onChangeCallback(), this;
        }
        setFromQuaternion(A, I, g) {
          return ns.makeRotationFromQuaternion(A), this.setFromRotationMatrix(ns, I, g);
        }
        setFromVector3(A, I = this._order) {
          return this.set(A.x, A.y, A.z, I);
        }
        reorder(A) {
          return rs.setFromEuler(this), this.setFromQuaternion(rs, A);
        }
        equals(A) {
          return A._x === this._x && A._y === this._y && A._z === this._z && A._order === this._order;
        }
        fromArray(A) {
          return this._x = A[0], this._y = A[1], this._z = A[2], A[3] !== void 0 && (this._order = A[3]), this._onChangeCallback(), this;
        }
        toArray(A = [], I = 0) {
          return A[I] = this._x, A[I + 1] = this._y, A[I + 2] = this._z, A[I + 3] = this._order, A;
        }
        _onChange(A) {
          return this._onChangeCallback = A, this;
        }
        _onChangeCallback() {
        }
        *[Symbol.iterator]() {
          yield this._x, yield this._y, yield this._z, yield this._order;
        }
      }
      pI.DEFAULT_ORDER = "XYZ";
      class Ie {
        constructor() {
          this.mask = 1;
        }
        set(A) {
          this.mask = (1 << A | 0) >>> 0;
        }
        enable(A) {
          this.mask |= 1 << A | 0;
        }
        enableAll() {
          this.mask = -1;
        }
        toggle(A) {
          this.mask ^= 1 << A | 0;
        }
        disable(A) {
          this.mask &= ~(1 << A | 0);
        }
        disableAll() {
          this.mask = 0;
        }
        test(A) {
          return (this.mask & A.mask) !== 0;
        }
        isEnabled(A) {
          return (this.mask & (1 << A | 0)) !== 0;
        }
      }
      let xh = 0;
      const hs = new J(), nB = new SI(), BC = new uA(), IE = new J(), gQ = new J(), Oh = new J(), _h = new SI(), ws = new J(1, 0, 0), cs = new J(0, 1, 0), Ss = new J(0, 0, 1), ls = {
        type: "added"
      }, Zh = {
        type: "removed"
      }, rB = {
        type: "childadded",
        child: null
      }, Ni = {
        type: "childremoved",
        child: null
      };
      class UI extends PB {
        constructor() {
          super(), this.isObject3D = true, Object.defineProperty(this, "id", {
            value: xh++
          }), this.uuid = Yg(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = UI.DEFAULT_UP.clone();
          const A = new J(), I = new pI(), g = new SI(), B = new J(1, 1, 1);
          function Q() {
            g.setFromEuler(I, false);
          }
          function E() {
            I.setFromQuaternion(g, void 0, false);
          }
          I._onChange(Q), g._onChange(E), Object.defineProperties(this, {
            position: {
              configurable: true,
              enumerable: true,
              value: A
            },
            rotation: {
              configurable: true,
              enumerable: true,
              value: I
            },
            quaternion: {
              configurable: true,
              enumerable: true,
              value: g
            },
            scale: {
              configurable: true,
              enumerable: true,
              value: B
            },
            modelViewMatrix: {
              value: new uA()
            },
            normalMatrix: {
              value: new ZA()
            }
          }), this.matrix = new uA(), this.matrixWorld = new uA(), this.matrixAutoUpdate = UI.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = UI.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = false, this.layers = new Ie(), this.visible = true, this.castShadow = false, this.receiveShadow = false, this.frustumCulled = true, this.renderOrder = 0, this.animations = [], this.customDepthMaterial = void 0, this.customDistanceMaterial = void 0, this.userData = {};
        }
        onBeforeShadow() {
        }
        onAfterShadow() {
        }
        onBeforeRender() {
        }
        onAfterRender() {
        }
        applyMatrix4(A) {
          this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(A), this.matrix.decompose(this.position, this.quaternion, this.scale);
        }
        applyQuaternion(A) {
          return this.quaternion.premultiply(A), this;
        }
        setRotationFromAxisAngle(A, I) {
          this.quaternion.setFromAxisAngle(A, I);
        }
        setRotationFromEuler(A) {
          this.quaternion.setFromEuler(A, true);
        }
        setRotationFromMatrix(A) {
          this.quaternion.setFromRotationMatrix(A);
        }
        setRotationFromQuaternion(A) {
          this.quaternion.copy(A);
        }
        rotateOnAxis(A, I) {
          return nB.setFromAxisAngle(A, I), this.quaternion.multiply(nB), this;
        }
        rotateOnWorldAxis(A, I) {
          return nB.setFromAxisAngle(A, I), this.quaternion.premultiply(nB), this;
        }
        rotateX(A) {
          return this.rotateOnAxis(ws, A);
        }
        rotateY(A) {
          return this.rotateOnAxis(cs, A);
        }
        rotateZ(A) {
          return this.rotateOnAxis(Ss, A);
        }
        translateOnAxis(A, I) {
          return hs.copy(A).applyQuaternion(this.quaternion), this.position.add(hs.multiplyScalar(I)), this;
        }
        translateX(A) {
          return this.translateOnAxis(ws, A);
        }
        translateY(A) {
          return this.translateOnAxis(cs, A);
        }
        translateZ(A) {
          return this.translateOnAxis(Ss, A);
        }
        localToWorld(A) {
          return this.updateWorldMatrix(true, false), A.applyMatrix4(this.matrixWorld);
        }
        worldToLocal(A) {
          return this.updateWorldMatrix(true, false), A.applyMatrix4(BC.copy(this.matrixWorld).invert());
        }
        lookAt(A, I, g) {
          A.isVector3 ? IE.copy(A) : IE.set(A, I, g);
          const B = this.parent;
          this.updateWorldMatrix(true, false), gQ.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? BC.lookAt(gQ, IE, this.up) : BC.lookAt(IE, gQ, this.up), this.quaternion.setFromRotationMatrix(BC), B && (BC.extractRotation(B.matrixWorld), nB.setFromRotationMatrix(BC), this.quaternion.premultiply(nB.invert()));
        }
        add(A) {
          if (arguments.length > 1) {
            for (let I = 0; I < arguments.length; I++) this.add(arguments[I]);
            return this;
          }
          return A === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", A), this) : (A && A.isObject3D ? (A.removeFromParent(), A.parent = this, this.children.push(A), A.dispatchEvent(ls), rB.child = A, this.dispatchEvent(rB), rB.child = null) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", A), this);
        }
        remove(A) {
          if (arguments.length > 1) {
            for (let g = 0; g < arguments.length; g++) this.remove(arguments[g]);
            return this;
          }
          const I = this.children.indexOf(A);
          return I !== -1 && (A.parent = null, this.children.splice(I, 1), A.dispatchEvent(Zh), Ni.child = A, this.dispatchEvent(Ni), Ni.child = null), this;
        }
        removeFromParent() {
          const A = this.parent;
          return A !== null && A.remove(this), this;
        }
        clear() {
          return this.remove(...this.children);
        }
        attach(A) {
          return this.updateWorldMatrix(true, false), BC.copy(this.matrixWorld).invert(), A.parent !== null && (A.parent.updateWorldMatrix(true, false), BC.multiply(A.parent.matrixWorld)), A.applyMatrix4(BC), A.removeFromParent(), A.parent = this, this.children.push(A), A.updateWorldMatrix(false, true), A.dispatchEvent(ls), rB.child = A, this.dispatchEvent(rB), rB.child = null, this;
        }
        getObjectById(A) {
          return this.getObjectByProperty("id", A);
        }
        getObjectByName(A) {
          return this.getObjectByProperty("name", A);
        }
        getObjectByProperty(A, I) {
          if (this[A] === I) return this;
          for (let g = 0, B = this.children.length; g < B; g++) {
            const E = this.children[g].getObjectByProperty(A, I);
            if (E !== void 0) return E;
          }
        }
        getObjectsByProperty(A, I, g = []) {
          this[A] === I && g.push(this);
          const B = this.children;
          for (let Q = 0, E = B.length; Q < E; Q++) B[Q].getObjectsByProperty(A, I, g);
          return g;
        }
        getWorldPosition(A) {
          return this.updateWorldMatrix(true, false), A.setFromMatrixPosition(this.matrixWorld);
        }
        getWorldQuaternion(A) {
          return this.updateWorldMatrix(true, false), this.matrixWorld.decompose(gQ, A, Oh), A;
        }
        getWorldScale(A) {
          return this.updateWorldMatrix(true, false), this.matrixWorld.decompose(gQ, _h, A), A;
        }
        getWorldDirection(A) {
          this.updateWorldMatrix(true, false);
          const I = this.matrixWorld.elements;
          return A.set(I[8], I[9], I[10]).normalize();
        }
        raycast() {
        }
        traverse(A) {
          A(this);
          const I = this.children;
          for (let g = 0, B = I.length; g < B; g++) I[g].traverse(A);
        }
        traverseVisible(A) {
          if (this.visible === false) return;
          A(this);
          const I = this.children;
          for (let g = 0, B = I.length; g < B; g++) I[g].traverseVisible(A);
        }
        traverseAncestors(A) {
          const I = this.parent;
          I !== null && (A(I), I.traverseAncestors(A));
        }
        updateMatrix() {
          this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = true;
        }
        updateMatrixWorld(A) {
          this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || A) && (this.matrixWorldAutoUpdate === true && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), this.matrixWorldNeedsUpdate = false, A = true);
          const I = this.children;
          for (let g = 0, B = I.length; g < B; g++) I[g].updateMatrixWorld(A);
        }
        updateWorldMatrix(A, I) {
          const g = this.parent;
          if (A === true && g !== null && g.updateWorldMatrix(true, false), this.matrixAutoUpdate && this.updateMatrix(), this.matrixWorldAutoUpdate === true && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), I === true) {
            const B = this.children;
            for (let Q = 0, E = B.length; Q < E; Q++) B[Q].updateWorldMatrix(false, true);
          }
        }
        toJSON(A) {
          const I = A === void 0 || typeof A == "string", g = {};
          I && (A = {
            geometries: {},
            materials: {},
            textures: {},
            images: {},
            shapes: {},
            skeletons: {},
            animations: {},
            nodes: {}
          }, g.metadata = {
            version: 4.7,
            type: "Object",
            generator: "Object3D.toJSON"
          });
          const B = {};
          B.uuid = this.uuid, B.type = this.type, this.name !== "" && (B.name = this.name), this.castShadow === true && (B.castShadow = true), this.receiveShadow === true && (B.receiveShadow = true), this.visible === false && (B.visible = false), this.frustumCulled === false && (B.frustumCulled = false), this.renderOrder !== 0 && (B.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (B.userData = this.userData), B.layers = this.layers.mask, B.matrix = this.matrix.toArray(), B.up = this.up.toArray(), this.matrixAutoUpdate === false && (B.matrixAutoUpdate = false), this.isInstancedMesh && (B.type = "InstancedMesh", B.count = this.count, B.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (B.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (B.type = "BatchedMesh", B.perObjectFrustumCulled = this.perObjectFrustumCulled, B.sortObjects = this.sortObjects, B.drawRanges = this._drawRanges, B.reservedRanges = this._reservedRanges, B.geometryInfo = this._geometryInfo.map((i) => ({
            ...i,
            boundingBox: i.boundingBox ? i.boundingBox.toJSON() : void 0,
            boundingSphere: i.boundingSphere ? i.boundingSphere.toJSON() : void 0
          })), B.instanceInfo = this._instanceInfo.map((i) => ({
            ...i
          })), B.availableInstanceIds = this._availableInstanceIds.slice(), B.availableGeometryIds = this._availableGeometryIds.slice(), B.nextIndexStart = this._nextIndexStart, B.nextVertexStart = this._nextVertexStart, B.geometryCount = this._geometryCount, B.maxInstanceCount = this._maxInstanceCount, B.maxVertexCount = this._maxVertexCount, B.maxIndexCount = this._maxIndexCount, B.geometryInitialized = this._geometryInitialized, B.matricesTexture = this._matricesTexture.toJSON(A), B.indirectTexture = this._indirectTexture.toJSON(A), this._colorsTexture !== null && (B.colorsTexture = this._colorsTexture.toJSON(A)), this.boundingSphere !== null && (B.boundingSphere = this.boundingSphere.toJSON()), this.boundingBox !== null && (B.boundingBox = this.boundingBox.toJSON()));
          function Q(i, o) {
            return i[o.uuid] === void 0 && (i[o.uuid] = o.toJSON(A)), o.uuid;
          }
          if (this.isScene) this.background && (this.background.isColor ? B.background = this.background.toJSON() : this.background.isTexture && (B.background = this.background.toJSON(A).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true && (B.environment = this.environment.toJSON(A).uuid);
          else if (this.isMesh || this.isLine || this.isPoints) {
            B.geometry = Q(A.geometries, this.geometry);
            const i = this.geometry.parameters;
            if (i !== void 0 && i.shapes !== void 0) {
              const o = i.shapes;
              if (Array.isArray(o)) for (let t = 0, e = o.length; t < e; t++) {
                const s = o[t];
                Q(A.shapes, s);
              }
              else Q(A.shapes, o);
            }
          }
          if (this.isSkinnedMesh && (B.bindMode = this.bindMode, B.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (Q(A.skeletons, this.skeleton), B.skeleton = this.skeleton.uuid)), this.material !== void 0) if (Array.isArray(this.material)) {
            const i = [];
            for (let o = 0, t = this.material.length; o < t; o++) i.push(Q(A.materials, this.material[o]));
            B.material = i;
          } else B.material = Q(A.materials, this.material);
          if (this.children.length > 0) {
            B.children = [];
            for (let i = 0; i < this.children.length; i++) B.children.push(this.children[i].toJSON(A).object);
          }
          if (this.animations.length > 0) {
            B.animations = [];
            for (let i = 0; i < this.animations.length; i++) {
              const o = this.animations[i];
              B.animations.push(Q(A.animations, o));
            }
          }
          if (I) {
            const i = E(A.geometries), o = E(A.materials), t = E(A.textures), e = E(A.images), s = E(A.shapes), a = E(A.skeletons), r = E(A.animations), c = E(A.nodes);
            i.length > 0 && (g.geometries = i), o.length > 0 && (g.materials = o), t.length > 0 && (g.textures = t), e.length > 0 && (g.images = e), s.length > 0 && (g.shapes = s), a.length > 0 && (g.skeletons = a), r.length > 0 && (g.animations = r), c.length > 0 && (g.nodes = c);
          }
          return g.object = B, g;
          function E(i) {
            const o = [];
            for (const t in i) {
              const e = i[t];
              delete e.metadata, o.push(e);
            }
            return o;
          }
        }
        clone(A) {
          return new this.constructor().copy(this, A);
        }
        copy(A, I = true) {
          if (this.name = A.name, this.up.copy(A.up), this.position.copy(A.position), this.rotation.order = A.rotation.order, this.quaternion.copy(A.quaternion), this.scale.copy(A.scale), this.matrix.copy(A.matrix), this.matrixWorld.copy(A.matrixWorld), this.matrixAutoUpdate = A.matrixAutoUpdate, this.matrixWorldAutoUpdate = A.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = A.matrixWorldNeedsUpdate, this.layers.mask = A.layers.mask, this.visible = A.visible, this.castShadow = A.castShadow, this.receiveShadow = A.receiveShadow, this.frustumCulled = A.frustumCulled, this.renderOrder = A.renderOrder, this.animations = A.animations.slice(), this.userData = JSON.parse(JSON.stringify(A.userData)), I === true) for (let g = 0; g < A.children.length; g++) {
            const B = A.children[g];
            this.add(B.clone());
          }
          return this;
        }
      }
      UI.DEFAULT_UP = new J(0, 1, 0);
      UI.DEFAULT_MATRIX_AUTO_UPDATE = true;
      UI.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
      const Ng = new J(), QC = new J(), Fi = new J(), EC = new J(), hB = new J(), wB = new J(), Gs = new J(), Ji = new J(), Ri = new J(), pi = new J(), di = new BI(), Yi = new BI(), qi = new BI();
      let CQ = class UB {
        constructor(A = new J(), I = new J(), g = new J()) {
          this.a = A, this.b = I, this.c = g;
        }
        static getNormal(A, I, g, B) {
          B.subVectors(g, I), Ng.subVectors(A, I), B.cross(Ng);
          const Q = B.lengthSq();
          return Q > 0 ? B.multiplyScalar(1 / Math.sqrt(Q)) : B.set(0, 0, 0);
        }
        static getBarycoord(A, I, g, B, Q) {
          Ng.subVectors(B, I), QC.subVectors(g, I), Fi.subVectors(A, I);
          const E = Ng.dot(Ng), i = Ng.dot(QC), o = Ng.dot(Fi), t = QC.dot(QC), e = QC.dot(Fi), s = E * t - i * i;
          if (s === 0) return Q.set(0, 0, 0), null;
          const a = 1 / s, r = (t * o - i * e) * a, c = (E * e - i * o) * a;
          return Q.set(1 - r - c, c, r);
        }
        static containsPoint(A, I, g, B) {
          return this.getBarycoord(A, I, g, B, EC) === null ? false : EC.x >= 0 && EC.y >= 0 && EC.x + EC.y <= 1;
        }
        static getInterpolation(A, I, g, B, Q, E, i, o) {
          return this.getBarycoord(A, I, g, B, EC) === null ? (o.x = 0, o.y = 0, "z" in o && (o.z = 0), "w" in o && (o.w = 0), null) : (o.setScalar(0), o.addScaledVector(Q, EC.x), o.addScaledVector(E, EC.y), o.addScaledVector(i, EC.z), o);
        }
        static getInterpolatedAttribute(A, I, g, B, Q, E) {
          return di.setScalar(0), Yi.setScalar(0), qi.setScalar(0), di.fromBufferAttribute(A, I), Yi.fromBufferAttribute(A, g), qi.fromBufferAttribute(A, B), E.setScalar(0), E.addScaledVector(di, Q.x), E.addScaledVector(Yi, Q.y), E.addScaledVector(qi, Q.z), E;
        }
        static isFrontFacing(A, I, g, B) {
          return Ng.subVectors(g, I), QC.subVectors(A, I), Ng.cross(QC).dot(B) < 0;
        }
        set(A, I, g) {
          return this.a.copy(A), this.b.copy(I), this.c.copy(g), this;
        }
        setFromPointsAndIndices(A, I, g, B) {
          return this.a.copy(A[I]), this.b.copy(A[g]), this.c.copy(A[B]), this;
        }
        setFromAttributeAndIndices(A, I, g, B) {
          return this.a.fromBufferAttribute(A, I), this.b.fromBufferAttribute(A, g), this.c.fromBufferAttribute(A, B), this;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(A) {
          return this.a.copy(A.a), this.b.copy(A.b), this.c.copy(A.c), this;
        }
        getArea() {
          return Ng.subVectors(this.c, this.b), QC.subVectors(this.a, this.b), Ng.cross(QC).length() * 0.5;
        }
        getMidpoint(A) {
          return A.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
        }
        getNormal(A) {
          return UB.getNormal(this.a, this.b, this.c, A);
        }
        getPlane(A) {
          return A.setFromCoplanarPoints(this.a, this.b, this.c);
        }
        getBarycoord(A, I) {
          return UB.getBarycoord(A, this.a, this.b, this.c, I);
        }
        getInterpolation(A, I, g, B, Q) {
          return UB.getInterpolation(A, this.a, this.b, this.c, I, g, B, Q);
        }
        containsPoint(A) {
          return UB.containsPoint(A, this.a, this.b, this.c);
        }
        isFrontFacing(A) {
          return UB.isFrontFacing(this.a, this.b, this.c, A);
        }
        intersectsBox(A) {
          return A.intersectsTriangle(this);
        }
        closestPointToPoint(A, I) {
          const g = this.a, B = this.b, Q = this.c;
          let E, i;
          hB.subVectors(B, g), wB.subVectors(Q, g), Ji.subVectors(A, g);
          const o = hB.dot(Ji), t = wB.dot(Ji);
          if (o <= 0 && t <= 0) return I.copy(g);
          Ri.subVectors(A, B);
          const e = hB.dot(Ri), s = wB.dot(Ri);
          if (e >= 0 && s <= e) return I.copy(B);
          const a = o * s - e * t;
          if (a <= 0 && o >= 0 && e <= 0) return E = o / (o - e), I.copy(g).addScaledVector(hB, E);
          pi.subVectors(A, Q);
          const r = hB.dot(pi), c = wB.dot(pi);
          if (c >= 0 && r <= c) return I.copy(Q);
          const S = r * t - o * c;
          if (S <= 0 && t >= 0 && c <= 0) return i = t / (t - c), I.copy(g).addScaledVector(wB, i);
          const h = e * c - r * s;
          if (h <= 0 && s - e >= 0 && r - c >= 0) return Gs.subVectors(Q, B), i = (s - e) / (s - e + (r - c)), I.copy(B).addScaledVector(Gs, i);
          const D = 1 / (h + S + a);
          return E = S * D, i = a * D, I.copy(g).addScaledVector(hB, E).addScaledVector(wB, i);
        }
        equals(A) {
          return A.a.equals(this.a) && A.b.equals(this.b) && A.c.equals(this.c);
        }
      };
      const qD = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
      }, KC = {
        h: 0,
        s: 0,
        l: 0
      }, gE = {
        h: 0,
        s: 0,
        l: 0
      };
      function Li(C, A, I) {
        return I < 0 && (I += 1), I > 1 && (I -= 1), I < 1 / 6 ? C + (A - C) * 6 * I : I < 1 / 2 ? A : I < 2 / 3 ? C + (A - C) * 6 * (2 / 3 - I) : C;
      }
      class mA {
        constructor(A, I, g) {
          return this.isColor = true, this.r = 1, this.g = 1, this.b = 1, this.set(A, I, g);
        }
        set(A, I, g) {
          if (I === void 0 && g === void 0) {
            const B = A;
            B && B.isColor ? this.copy(B) : typeof B == "number" ? this.setHex(B) : typeof B == "string" && this.setStyle(B);
          } else this.setRGB(A, I, g);
          return this;
        }
        setScalar(A) {
          return this.r = A, this.g = A, this.b = A, this;
        }
        setHex(A, I = PI) {
          return A = Math.floor(A), this.r = (A >> 16 & 255) / 255, this.g = (A >> 8 & 255) / 255, this.b = (A & 255) / 255, gI.colorSpaceToWorking(this, I), this;
        }
        setRGB(A, I, g, B = gI.workingColorSpace) {
          return this.r = A, this.g = I, this.b = g, gI.colorSpaceToWorking(this, B), this;
        }
        setHSL(A, I, g, B = gI.workingColorSpace) {
          if (A = $t(A, 1), I = WA(I, 0, 1), g = WA(g, 0, 1), I === 0) this.r = this.g = this.b = g;
          else {
            const Q = g <= 0.5 ? g * (1 + I) : g + I - g * I, E = 2 * g - Q;
            this.r = Li(E, Q, A + 1 / 3), this.g = Li(E, Q, A), this.b = Li(E, Q, A - 1 / 3);
          }
          return gI.colorSpaceToWorking(this, B), this;
        }
        setStyle(A, I = PI) {
          function g(Q) {
            Q !== void 0 && parseFloat(Q) < 1 && console.warn("THREE.Color: Alpha component of " + A + " will be ignored.");
          }
          let B;
          if (B = /^(\w+)\(([^\)]*)\)/.exec(A)) {
            let Q;
            const E = B[1], i = B[2];
            switch (E) {
              case "rgb":
              case "rgba":
                if (Q = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)) return g(Q[4]), this.setRGB(Math.min(255, parseInt(Q[1], 10)) / 255, Math.min(255, parseInt(Q[2], 10)) / 255, Math.min(255, parseInt(Q[3], 10)) / 255, I);
                if (Q = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)) return g(Q[4]), this.setRGB(Math.min(100, parseInt(Q[1], 10)) / 100, Math.min(100, parseInt(Q[2], 10)) / 100, Math.min(100, parseInt(Q[3], 10)) / 100, I);
                break;
              case "hsl":
              case "hsla":
                if (Q = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)) return g(Q[4]), this.setHSL(parseFloat(Q[1]) / 360, parseFloat(Q[2]) / 100, parseFloat(Q[3]) / 100, I);
                break;
              default:
                console.warn("THREE.Color: Unknown color model " + A);
            }
          } else if (B = /^\#([A-Fa-f\d]+)$/.exec(A)) {
            const Q = B[1], E = Q.length;
            if (E === 3) return this.setRGB(parseInt(Q.charAt(0), 16) / 15, parseInt(Q.charAt(1), 16) / 15, parseInt(Q.charAt(2), 16) / 15, I);
            if (E === 6) return this.setHex(parseInt(Q, 16), I);
            console.warn("THREE.Color: Invalid hex color " + A);
          } else if (A && A.length > 0) return this.setColorName(A, I);
          return this;
        }
        setColorName(A, I = PI) {
          const g = qD[A.toLowerCase()];
          return g !== void 0 ? this.setHex(g, I) : console.warn("THREE.Color: Unknown color " + A), this;
        }
        clone() {
          return new this.constructor(this.r, this.g, this.b);
        }
        copy(A) {
          return this.r = A.r, this.g = A.g, this.b = A.b, this;
        }
        copySRGBToLinear(A) {
          return this.r = rC(A.r), this.g = rC(A.g), this.b = rC(A.b), this;
        }
        copyLinearToSRGB(A) {
          return this.r = dB(A.r), this.g = dB(A.g), this.b = dB(A.b), this;
        }
        convertSRGBToLinear() {
          return this.copySRGBToLinear(this), this;
        }
        convertLinearToSRGB() {
          return this.copyLinearToSRGB(this), this;
        }
        getHex(A = PI) {
          return gI.workingToColorSpace(zI.copy(this), A), Math.round(WA(zI.r * 255, 0, 255)) * 65536 + Math.round(WA(zI.g * 255, 0, 255)) * 256 + Math.round(WA(zI.b * 255, 0, 255));
        }
        getHexString(A = PI) {
          return ("000000" + this.getHex(A).toString(16)).slice(-6);
        }
        getHSL(A, I = gI.workingColorSpace) {
          gI.workingToColorSpace(zI.copy(this), I);
          const g = zI.r, B = zI.g, Q = zI.b, E = Math.max(g, B, Q), i = Math.min(g, B, Q);
          let o, t;
          const e = (i + E) / 2;
          if (i === E) o = 0, t = 0;
          else {
            const s = E - i;
            switch (t = e <= 0.5 ? s / (E + i) : s / (2 - E - i), E) {
              case g:
                o = (B - Q) / s + (B < Q ? 6 : 0);
                break;
              case B:
                o = (Q - g) / s + 2;
                break;
              case Q:
                o = (g - B) / s + 4;
                break;
            }
            o /= 6;
          }
          return A.h = o, A.s = t, A.l = e, A;
        }
        getRGB(A, I = gI.workingColorSpace) {
          return gI.workingToColorSpace(zI.copy(this), I), A.r = zI.r, A.g = zI.g, A.b = zI.b, A;
        }
        getStyle(A = PI) {
          gI.workingToColorSpace(zI.copy(this), A);
          const I = zI.r, g = zI.g, B = zI.b;
          return A !== PI ? `color(${A} ${I.toFixed(3)} ${g.toFixed(3)} ${B.toFixed(3)})` : `rgb(${Math.round(I * 255)},${Math.round(g * 255)},${Math.round(B * 255)})`;
        }
        offsetHSL(A, I, g) {
          return this.getHSL(KC), this.setHSL(KC.h + A, KC.s + I, KC.l + g);
        }
        add(A) {
          return this.r += A.r, this.g += A.g, this.b += A.b, this;
        }
        addColors(A, I) {
          return this.r = A.r + I.r, this.g = A.g + I.g, this.b = A.b + I.b, this;
        }
        addScalar(A) {
          return this.r += A, this.g += A, this.b += A, this;
        }
        sub(A) {
          return this.r = Math.max(0, this.r - A.r), this.g = Math.max(0, this.g - A.g), this.b = Math.max(0, this.b - A.b), this;
        }
        multiply(A) {
          return this.r *= A.r, this.g *= A.g, this.b *= A.b, this;
        }
        multiplyScalar(A) {
          return this.r *= A, this.g *= A, this.b *= A, this;
        }
        lerp(A, I) {
          return this.r += (A.r - this.r) * I, this.g += (A.g - this.g) * I, this.b += (A.b - this.b) * I, this;
        }
        lerpColors(A, I, g) {
          return this.r = A.r + (I.r - A.r) * g, this.g = A.g + (I.g - A.g) * g, this.b = A.b + (I.b - A.b) * g, this;
        }
        lerpHSL(A, I) {
          this.getHSL(KC), A.getHSL(gE);
          const g = hQ(KC.h, gE.h, I), B = hQ(KC.s, gE.s, I), Q = hQ(KC.l, gE.l, I);
          return this.setHSL(g, B, Q), this;
        }
        setFromVector3(A) {
          return this.r = A.x, this.g = A.y, this.b = A.z, this;
        }
        applyMatrix3(A) {
          const I = this.r, g = this.g, B = this.b, Q = A.elements;
          return this.r = Q[0] * I + Q[3] * g + Q[6] * B, this.g = Q[1] * I + Q[4] * g + Q[7] * B, this.b = Q[2] * I + Q[5] * g + Q[8] * B, this;
        }
        equals(A) {
          return A.r === this.r && A.g === this.g && A.b === this.b;
        }
        fromArray(A, I = 0) {
          return this.r = A[I], this.g = A[I + 1], this.b = A[I + 2], this;
        }
        toArray(A = [], I = 0) {
          return A[I] = this.r, A[I + 1] = this.g, A[I + 2] = this.b, A;
        }
        fromBufferAttribute(A, I) {
          return this.r = A.getX(I), this.g = A.getY(I), this.b = A.getZ(I), this;
        }
        toJSON() {
          return this.getHex();
        }
        *[Symbol.iterator]() {
          yield this.r, yield this.g, yield this.b;
        }
      }
      const zI = new mA();
      mA.NAMES = qD;
      let vh = 0;
      class Pg extends PB {
        constructor() {
          super(), this.isMaterial = true, Object.defineProperty(this, "id", {
            value: vh++
          }), this.uuid = Yg(), this.name = "", this.type = "Material", this.blending = pB, this.side = Wg, this.vertexColors = false, this.opacity = 1, this.transparent = false, this.alphaHash = false, this.blendSrc = Ko, this.blendDst = Uo, this.blendEquation = PC, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new mA(0, 0, 0), this.blendAlpha = 0, this.depthFunc = qB, this.depthTest = true, this.depthWrite = true, this.stencilWriteMask = 255, this.stencilFunc = is, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = oB, this.stencilZFail = oB, this.stencilZPass = oB, this.stencilWrite = false, this.clippingPlanes = null, this.clipIntersection = false, this.clipShadows = false, this.shadowSide = null, this.colorWrite = true, this.precision = null, this.polygonOffset = false, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = false, this.alphaToCoverage = false, this.premultipliedAlpha = false, this.forceSinglePass = false, this.allowOverride = true, this.visible = true, this.toneMapped = true, this.userData = {}, this.version = 0, this._alphaTest = 0;
        }
        get alphaTest() {
          return this._alphaTest;
        }
        set alphaTest(A) {
          this._alphaTest > 0 != A > 0 && this.version++, this._alphaTest = A;
        }
        onBeforeRender() {
        }
        onBeforeCompile() {
        }
        customProgramCacheKey() {
          return this.onBeforeCompile.toString();
        }
        setValues(A) {
          if (A !== void 0) for (const I in A) {
            const g = A[I];
            if (g === void 0) {
              console.warn(`THREE.Material: parameter '${I}' has value of undefined.`);
              continue;
            }
            const B = this[I];
            if (B === void 0) {
              console.warn(`THREE.Material: '${I}' is not a property of THREE.${this.type}.`);
              continue;
            }
            B && B.isColor ? B.set(g) : B && B.isVector3 && g && g.isVector3 ? B.copy(g) : this[I] = g;
          }
        }
        toJSON(A) {
          const I = A === void 0 || typeof A == "string";
          I && (A = {
            textures: {},
            images: {}
          });
          const g = {
            metadata: {
              version: 4.7,
              type: "Material",
              generator: "Material.toJSON"
            }
          };
          g.uuid = this.uuid, g.type = this.type, this.name !== "" && (g.name = this.name), this.color && this.color.isColor && (g.color = this.color.getHex()), this.roughness !== void 0 && (g.roughness = this.roughness), this.metalness !== void 0 && (g.metalness = this.metalness), this.sheen !== void 0 && (g.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (g.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (g.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (g.emissive = this.emissive.getHex()), this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1 && (g.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (g.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (g.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (g.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (g.shininess = this.shininess), this.clearcoat !== void 0 && (g.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (g.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (g.clearcoatMap = this.clearcoatMap.toJSON(A).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (g.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(A).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (g.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(A).uuid, g.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.sheenColorMap && this.sheenColorMap.isTexture && (g.sheenColorMap = this.sheenColorMap.toJSON(A).uuid), this.sheenRoughnessMap && this.sheenRoughnessMap.isTexture && (g.sheenRoughnessMap = this.sheenRoughnessMap.toJSON(A).uuid), this.dispersion !== void 0 && (g.dispersion = this.dispersion), this.iridescence !== void 0 && (g.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (g.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (g.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (g.iridescenceMap = this.iridescenceMap.toJSON(A).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (g.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(A).uuid), this.anisotropy !== void 0 && (g.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (g.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (g.anisotropyMap = this.anisotropyMap.toJSON(A).uuid), this.map && this.map.isTexture && (g.map = this.map.toJSON(A).uuid), this.matcap && this.matcap.isTexture && (g.matcap = this.matcap.toJSON(A).uuid), this.alphaMap && this.alphaMap.isTexture && (g.alphaMap = this.alphaMap.toJSON(A).uuid), this.lightMap && this.lightMap.isTexture && (g.lightMap = this.lightMap.toJSON(A).uuid, g.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (g.aoMap = this.aoMap.toJSON(A).uuid, g.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (g.bumpMap = this.bumpMap.toJSON(A).uuid, g.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (g.normalMap = this.normalMap.toJSON(A).uuid, g.normalMapType = this.normalMapType, g.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (g.displacementMap = this.displacementMap.toJSON(A).uuid, g.displacementScale = this.displacementScale, g.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (g.roughnessMap = this.roughnessMap.toJSON(A).uuid), this.metalnessMap && this.metalnessMap.isTexture && (g.metalnessMap = this.metalnessMap.toJSON(A).uuid), this.emissiveMap && this.emissiveMap.isTexture && (g.emissiveMap = this.emissiveMap.toJSON(A).uuid), this.specularMap && this.specularMap.isTexture && (g.specularMap = this.specularMap.toJSON(A).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (g.specularIntensityMap = this.specularIntensityMap.toJSON(A).uuid), this.specularColorMap && this.specularColorMap.isTexture && (g.specularColorMap = this.specularColorMap.toJSON(A).uuid), this.envMap && this.envMap.isTexture && (g.envMap = this.envMap.toJSON(A).uuid, this.combine !== void 0 && (g.combine = this.combine)), this.envMapRotation !== void 0 && (g.envMapRotation = this.envMapRotation.toArray()), this.envMapIntensity !== void 0 && (g.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (g.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (g.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (g.gradientMap = this.gradientMap.toJSON(A).uuid), this.transmission !== void 0 && (g.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (g.transmissionMap = this.transmissionMap.toJSON(A).uuid), this.thickness !== void 0 && (g.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (g.thicknessMap = this.thicknessMap.toJSON(A).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (g.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (g.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (g.size = this.size), this.shadowSide !== null && (g.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (g.sizeAttenuation = this.sizeAttenuation), this.blending !== pB && (g.blending = this.blending), this.side !== Wg && (g.side = this.side), this.vertexColors === true && (g.vertexColors = true), this.opacity < 1 && (g.opacity = this.opacity), this.transparent === true && (g.transparent = true), this.blendSrc !== Ko && (g.blendSrc = this.blendSrc), this.blendDst !== Uo && (g.blendDst = this.blendDst), this.blendEquation !== PC && (g.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (g.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (g.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (g.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (g.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (g.blendAlpha = this.blendAlpha), this.depthFunc !== qB && (g.depthFunc = this.depthFunc), this.depthTest === false && (g.depthTest = this.depthTest), this.depthWrite === false && (g.depthWrite = this.depthWrite), this.colorWrite === false && (g.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (g.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== is && (g.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (g.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (g.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== oB && (g.stencilFail = this.stencilFail), this.stencilZFail !== oB && (g.stencilZFail = this.stencilZFail), this.stencilZPass !== oB && (g.stencilZPass = this.stencilZPass), this.stencilWrite === true && (g.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (g.rotation = this.rotation), this.polygonOffset === true && (g.polygonOffset = true), this.polygonOffsetFactor !== 0 && (g.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (g.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (g.linewidth = this.linewidth), this.dashSize !== void 0 && (g.dashSize = this.dashSize), this.gapSize !== void 0 && (g.gapSize = this.gapSize), this.scale !== void 0 && (g.scale = this.scale), this.dithering === true && (g.dithering = true), this.alphaTest > 0 && (g.alphaTest = this.alphaTest), this.alphaHash === true && (g.alphaHash = true), this.alphaToCoverage === true && (g.alphaToCoverage = true), this.premultipliedAlpha === true && (g.premultipliedAlpha = true), this.forceSinglePass === true && (g.forceSinglePass = true), this.wireframe === true && (g.wireframe = true), this.wireframeLinewidth > 1 && (g.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (g.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (g.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === true && (g.flatShading = true), this.visible === false && (g.visible = false), this.toneMapped === false && (g.toneMapped = false), this.fog === false && (g.fog = false), Object.keys(this.userData).length > 0 && (g.userData = this.userData);
          function B(Q) {
            const E = [];
            for (const i in Q) {
              const o = Q[i];
              delete o.metadata, E.push(o);
            }
            return E;
          }
          if (I) {
            const Q = B(A.textures), E = B(A.images);
            Q.length > 0 && (g.textures = Q), E.length > 0 && (g.images = E);
          }
          return g;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(A) {
          this.name = A.name, this.blending = A.blending, this.side = A.side, this.vertexColors = A.vertexColors, this.opacity = A.opacity, this.transparent = A.transparent, this.blendSrc = A.blendSrc, this.blendDst = A.blendDst, this.blendEquation = A.blendEquation, this.blendSrcAlpha = A.blendSrcAlpha, this.blendDstAlpha = A.blendDstAlpha, this.blendEquationAlpha = A.blendEquationAlpha, this.blendColor.copy(A.blendColor), this.blendAlpha = A.blendAlpha, this.depthFunc = A.depthFunc, this.depthTest = A.depthTest, this.depthWrite = A.depthWrite, this.stencilWriteMask = A.stencilWriteMask, this.stencilFunc = A.stencilFunc, this.stencilRef = A.stencilRef, this.stencilFuncMask = A.stencilFuncMask, this.stencilFail = A.stencilFail, this.stencilZFail = A.stencilZFail, this.stencilZPass = A.stencilZPass, this.stencilWrite = A.stencilWrite;
          const I = A.clippingPlanes;
          let g = null;
          if (I !== null) {
            const B = I.length;
            g = new Array(B);
            for (let Q = 0; Q !== B; ++Q) g[Q] = I[Q].clone();
          }
          return this.clippingPlanes = g, this.clipIntersection = A.clipIntersection, this.clipShadows = A.clipShadows, this.shadowSide = A.shadowSide, this.colorWrite = A.colorWrite, this.precision = A.precision, this.polygonOffset = A.polygonOffset, this.polygonOffsetFactor = A.polygonOffsetFactor, this.polygonOffsetUnits = A.polygonOffsetUnits, this.dithering = A.dithering, this.alphaTest = A.alphaTest, this.alphaHash = A.alphaHash, this.alphaToCoverage = A.alphaToCoverage, this.premultipliedAlpha = A.premultipliedAlpha, this.forceSinglePass = A.forceSinglePass, this.visible = A.visible, this.toneMapped = A.toneMapped, this.userData = JSON.parse(JSON.stringify(A.userData)), this;
        }
        dispose() {
          this.dispatchEvent({
            type: "dispose"
          });
        }
        set needsUpdate(A) {
          A === true && this.version++;
        }
      }
      class VC extends Pg {
        constructor(A) {
          super(), this.isMeshBasicMaterial = true, this.type = "MeshBasicMaterial", this.color = new mA(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new pI(), this.combine = SD, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = true, this.setValues(A);
        }
        copy(A) {
          return super.copy(A), this.color.copy(A.color), this.map = A.map, this.lightMap = A.lightMap, this.lightMapIntensity = A.lightMapIntensity, this.aoMap = A.aoMap, this.aoMapIntensity = A.aoMapIntensity, this.specularMap = A.specularMap, this.alphaMap = A.alphaMap, this.envMap = A.envMap, this.envMapRotation.copy(A.envMapRotation), this.combine = A.combine, this.reflectivity = A.reflectivity, this.refractionRatio = A.refractionRatio, this.wireframe = A.wireframe, this.wireframeLinewidth = A.wireframeLinewidth, this.wireframeLinecap = A.wireframeLinecap, this.wireframeLinejoin = A.wireframeLinejoin, this.fog = A.fog, this;
        }
      }
      const sC = Ph();
      function Ph() {
        const C = new ArrayBuffer(4), A = new Float32Array(C), I = new Uint32Array(C), g = new Uint32Array(512), B = new Uint32Array(512);
        for (let o = 0; o < 256; ++o) {
          const t = o - 127;
          t < -27 ? (g[o] = 0, g[o | 256] = 32768, B[o] = 24, B[o | 256] = 24) : t < -14 ? (g[o] = 1024 >> -t - 14, g[o | 256] = 1024 >> -t - 14 | 32768, B[o] = -t - 1, B[o | 256] = -t - 1) : t <= 15 ? (g[o] = t + 15 << 10, g[o | 256] = t + 15 << 10 | 32768, B[o] = 13, B[o | 256] = 13) : t < 128 ? (g[o] = 31744, g[o | 256] = 64512, B[o] = 24, B[o | 256] = 24) : (g[o] = 31744, g[o | 256] = 64512, B[o] = 13, B[o | 256] = 13);
        }
        const Q = new Uint32Array(2048), E = new Uint32Array(64), i = new Uint32Array(64);
        for (let o = 1; o < 1024; ++o) {
          let t = o << 13, e = 0;
          for (; (t & 8388608) === 0; ) t <<= 1, e -= 8388608;
          t &= -8388609, e += 947912704, Q[o] = t | e;
        }
        for (let o = 1024; o < 2048; ++o) Q[o] = 939524096 + (o - 1024 << 13);
        for (let o = 1; o < 31; ++o) E[o] = o << 23;
        E[31] = 1199570944, E[32] = 2147483648;
        for (let o = 33; o < 63; ++o) E[o] = 2147483648 + (o - 32 << 23);
        E[63] = 3347054592;
        for (let o = 1; o < 64; ++o) o !== 32 && (i[o] = 1024);
        return {
          floatView: A,
          uint32View: I,
          baseTable: g,
          shiftTable: B,
          mantissaTable: Q,
          exponentTable: E,
          offsetTable: i
        };
      }
      function Wh(C) {
        Math.abs(C) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), C = WA(C, -65504, 65504), sC.floatView[0] = C;
        const A = sC.uint32View[0], I = A >> 23 & 511;
        return sC.baseTable[I] + ((A & 8388607) >> sC.shiftTable[I]);
      }
      function jh(C) {
        const A = C >> 10;
        return sC.uint32View[0] = sC.mantissaTable[sC.offsetTable[A] + (C & 1023)] + sC.exponentTable[A], sC.floatView[0];
      }
      class Vh {
        static toHalfFloat(A) {
          return Wh(A);
        }
        static fromHalfFloat(A) {
          return jh(A);
        }
      }
      const YI = new J(), CE = new XA();
      let Xh = 0;
      class tg {
        constructor(A, I, g = false) {
          if (Array.isArray(A)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
          this.isBufferAttribute = true, Object.defineProperty(this, "id", {
            value: Xh++
          }), this.name = "", this.array = A, this.itemSize = I, this.count = A !== void 0 ? A.length / I : 0, this.normalized = g, this.usage = st, this.updateRanges = [], this.gpuType = dg, this.version = 0;
        }
        onUploadCallback() {
        }
        set needsUpdate(A) {
          A === true && this.version++;
        }
        setUsage(A) {
          return this.usage = A, this;
        }
        addUpdateRange(A, I) {
          this.updateRanges.push({
            start: A,
            count: I
          });
        }
        clearUpdateRanges() {
          this.updateRanges.length = 0;
        }
        copy(A) {
          return this.name = A.name, this.array = new A.array.constructor(A.array), this.itemSize = A.itemSize, this.count = A.count, this.normalized = A.normalized, this.usage = A.usage, this.gpuType = A.gpuType, this;
        }
        copyAt(A, I, g) {
          A *= this.itemSize, g *= I.itemSize;
          for (let B = 0, Q = this.itemSize; B < Q; B++) this.array[A + B] = I.array[g + B];
          return this;
        }
        copyArray(A) {
          return this.array.set(A), this;
        }
        applyMatrix3(A) {
          if (this.itemSize === 2) for (let I = 0, g = this.count; I < g; I++) CE.fromBufferAttribute(this, I), CE.applyMatrix3(A), this.setXY(I, CE.x, CE.y);
          else if (this.itemSize === 3) for (let I = 0, g = this.count; I < g; I++) YI.fromBufferAttribute(this, I), YI.applyMatrix3(A), this.setXYZ(I, YI.x, YI.y, YI.z);
          return this;
        }
        applyMatrix4(A) {
          for (let I = 0, g = this.count; I < g; I++) YI.fromBufferAttribute(this, I), YI.applyMatrix4(A), this.setXYZ(I, YI.x, YI.y, YI.z);
          return this;
        }
        applyNormalMatrix(A) {
          for (let I = 0, g = this.count; I < g; I++) YI.fromBufferAttribute(this, I), YI.applyNormalMatrix(A), this.setXYZ(I, YI.x, YI.y, YI.z);
          return this;
        }
        transformDirection(A) {
          for (let I = 0, g = this.count; I < g; I++) YI.fromBufferAttribute(this, I), YI.transformDirection(A), this.setXYZ(I, YI.x, YI.y, YI.z);
          return this;
        }
        set(A, I = 0) {
          return this.array.set(A, I), this;
        }
        getComponent(A, I) {
          let g = this.array[A * this.itemSize + I];
          return this.normalized && (g = pg(g, this.array)), g;
        }
        setComponent(A, I, g) {
          return this.normalized && (g = iI(g, this.array)), this.array[A * this.itemSize + I] = g, this;
        }
        getX(A) {
          let I = this.array[A * this.itemSize];
          return this.normalized && (I = pg(I, this.array)), I;
        }
        setX(A, I) {
          return this.normalized && (I = iI(I, this.array)), this.array[A * this.itemSize] = I, this;
        }
        getY(A) {
          let I = this.array[A * this.itemSize + 1];
          return this.normalized && (I = pg(I, this.array)), I;
        }
        setY(A, I) {
          return this.normalized && (I = iI(I, this.array)), this.array[A * this.itemSize + 1] = I, this;
        }
        getZ(A) {
          let I = this.array[A * this.itemSize + 2];
          return this.normalized && (I = pg(I, this.array)), I;
        }
        setZ(A, I) {
          return this.normalized && (I = iI(I, this.array)), this.array[A * this.itemSize + 2] = I, this;
        }
        getW(A) {
          let I = this.array[A * this.itemSize + 3];
          return this.normalized && (I = pg(I, this.array)), I;
        }
        setW(A, I) {
          return this.normalized && (I = iI(I, this.array)), this.array[A * this.itemSize + 3] = I, this;
        }
        setXY(A, I, g) {
          return A *= this.itemSize, this.normalized && (I = iI(I, this.array), g = iI(g, this.array)), this.array[A + 0] = I, this.array[A + 1] = g, this;
        }
        setXYZ(A, I, g, B) {
          return A *= this.itemSize, this.normalized && (I = iI(I, this.array), g = iI(g, this.array), B = iI(B, this.array)), this.array[A + 0] = I, this.array[A + 1] = g, this.array[A + 2] = B, this;
        }
        setXYZW(A, I, g, B, Q) {
          return A *= this.itemSize, this.normalized && (I = iI(I, this.array), g = iI(g, this.array), B = iI(B, this.array), Q = iI(Q, this.array)), this.array[A + 0] = I, this.array[A + 1] = g, this.array[A + 2] = B, this.array[A + 3] = Q, this;
        }
        onUpload(A) {
          return this.onUploadCallback = A, this;
        }
        clone() {
          return new this.constructor(this.array, this.itemSize).copy(this);
        }
        toJSON() {
          const A = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.from(this.array),
            normalized: this.normalized
          };
          return this.name !== "" && (A.name = this.name), this.usage !== st && (A.usage = this.usage), A;
        }
      }
      class LD extends tg {
        constructor(A, I, g) {
          super(new Uint16Array(A), I, g);
        }
      }
      class fD extends tg {
        constructor(A, I, g) {
          super(new Uint32Array(A), I, g);
        }
      }
      class hC extends tg {
        constructor(A, I, g) {
          super(new Float32Array(A), I, g);
        }
      }
      let zh = 0;
      const yg = new uA(), fi = new UI(), cB = new J(), cg = new Xg(), BQ = new Xg(), bI = new J();
      class fg extends PB {
        constructor() {
          super(), this.isBufferGeometry = true, Object.defineProperty(this, "id", {
            value: zh++
          }), this.uuid = Yg(), this.name = "", this.type = "BufferGeometry", this.index = null, this.indirect = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = false, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = {
            start: 0,
            count: 1 / 0
          }, this.userData = {};
        }
        getIndex() {
          return this.index;
        }
        setIndex(A) {
          return Array.isArray(A) ? this.index = new (dD(A) ? fD : LD)(A, 1) : this.index = A, this;
        }
        setIndirect(A) {
          return this.indirect = A, this;
        }
        getIndirect() {
          return this.indirect;
        }
        getAttribute(A) {
          return this.attributes[A];
        }
        setAttribute(A, I) {
          return this.attributes[A] = I, this;
        }
        deleteAttribute(A) {
          return delete this.attributes[A], this;
        }
        hasAttribute(A) {
          return this.attributes[A] !== void 0;
        }
        addGroup(A, I, g = 0) {
          this.groups.push({
            start: A,
            count: I,
            materialIndex: g
          });
        }
        clearGroups() {
          this.groups = [];
        }
        setDrawRange(A, I) {
          this.drawRange.start = A, this.drawRange.count = I;
        }
        applyMatrix4(A) {
          const I = this.attributes.position;
          I !== void 0 && (I.applyMatrix4(A), I.needsUpdate = true);
          const g = this.attributes.normal;
          if (g !== void 0) {
            const Q = new ZA().getNormalMatrix(A);
            g.applyNormalMatrix(Q), g.needsUpdate = true;
          }
          const B = this.attributes.tangent;
          return B !== void 0 && (B.transformDirection(A), B.needsUpdate = true), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
        }
        applyQuaternion(A) {
          return yg.makeRotationFromQuaternion(A), this.applyMatrix4(yg), this;
        }
        rotateX(A) {
          return yg.makeRotationX(A), this.applyMatrix4(yg), this;
        }
        rotateY(A) {
          return yg.makeRotationY(A), this.applyMatrix4(yg), this;
        }
        rotateZ(A) {
          return yg.makeRotationZ(A), this.applyMatrix4(yg), this;
        }
        translate(A, I, g) {
          return yg.makeTranslation(A, I, g), this.applyMatrix4(yg), this;
        }
        scale(A, I, g) {
          return yg.makeScale(A, I, g), this.applyMatrix4(yg), this;
        }
        lookAt(A) {
          return fi.lookAt(A), fi.updateMatrix(), this.applyMatrix4(fi.matrix), this;
        }
        center() {
          return this.computeBoundingBox(), this.boundingBox.getCenter(cB).negate(), this.translate(cB.x, cB.y, cB.z), this;
        }
        setFromPoints(A) {
          const I = this.getAttribute("position");
          if (I === void 0) {
            const g = [];
            for (let B = 0, Q = A.length; B < Q; B++) {
              const E = A[B];
              g.push(E.x, E.y, E.z || 0);
            }
            this.setAttribute("position", new hC(g, 3));
          } else {
            const g = Math.min(A.length, I.count);
            for (let B = 0; B < g; B++) {
              const Q = A[B];
              I.setXYZ(B, Q.x, Q.y, Q.z || 0);
            }
            A.length > I.count && console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."), I.needsUpdate = true;
          }
          return this;
        }
        computeBoundingBox() {
          this.boundingBox === null && (this.boundingBox = new Xg());
          const A = this.attributes.position, I = this.morphAttributes.position;
          if (A && A.isGLBufferAttribute) {
            console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this), this.boundingBox.set(new J(-1 / 0, -1 / 0, -1 / 0), new J(1 / 0, 1 / 0, 1 / 0));
            return;
          }
          if (A !== void 0) {
            if (this.boundingBox.setFromBufferAttribute(A), I) for (let g = 0, B = I.length; g < B; g++) {
              const Q = I[g];
              cg.setFromBufferAttribute(Q), this.morphTargetsRelative ? (bI.addVectors(this.boundingBox.min, cg.min), this.boundingBox.expandByPoint(bI), bI.addVectors(this.boundingBox.max, cg.max), this.boundingBox.expandByPoint(bI)) : (this.boundingBox.expandByPoint(cg.min), this.boundingBox.expandByPoint(cg.max));
            }
          } else this.boundingBox.makeEmpty();
          (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
        }
        computeBoundingSphere() {
          this.boundingSphere === null && (this.boundingSphere = new zg());
          const A = this.attributes.position, I = this.morphAttributes.position;
          if (A && A.isGLBufferAttribute) {
            console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this), this.boundingSphere.set(new J(), 1 / 0);
            return;
          }
          if (A) {
            const g = this.boundingSphere.center;
            if (cg.setFromBufferAttribute(A), I) for (let Q = 0, E = I.length; Q < E; Q++) {
              const i = I[Q];
              BQ.setFromBufferAttribute(i), this.morphTargetsRelative ? (bI.addVectors(cg.min, BQ.min), cg.expandByPoint(bI), bI.addVectors(cg.max, BQ.max), cg.expandByPoint(bI)) : (cg.expandByPoint(BQ.min), cg.expandByPoint(BQ.max));
            }
            cg.getCenter(g);
            let B = 0;
            for (let Q = 0, E = A.count; Q < E; Q++) bI.fromBufferAttribute(A, Q), B = Math.max(B, g.distanceToSquared(bI));
            if (I) for (let Q = 0, E = I.length; Q < E; Q++) {
              const i = I[Q], o = this.morphTargetsRelative;
              for (let t = 0, e = i.count; t < e; t++) bI.fromBufferAttribute(i, t), o && (cB.fromBufferAttribute(A, t), bI.add(cB)), B = Math.max(B, g.distanceToSquared(bI));
            }
            this.boundingSphere.radius = Math.sqrt(B), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
          }
        }
        computeTangents() {
          const A = this.index, I = this.attributes;
          if (A === null || I.position === void 0 || I.normal === void 0 || I.uv === void 0) {
            console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
            return;
          }
          const g = I.position, B = I.normal, Q = I.uv;
          this.hasAttribute("tangent") === false && this.setAttribute("tangent", new tg(new Float32Array(4 * g.count), 4));
          const E = this.getAttribute("tangent"), i = [], o = [];
          for (let m = 0; m < g.count; m++) i[m] = new J(), o[m] = new J();
          const t = new J(), e = new J(), s = new J(), a = new XA(), r = new XA(), c = new XA(), S = new J(), h = new J();
          function D(m, K, y) {
            t.fromBufferAttribute(g, m), e.fromBufferAttribute(g, K), s.fromBufferAttribute(g, y), a.fromBufferAttribute(Q, m), r.fromBufferAttribute(Q, K), c.fromBufferAttribute(Q, y), e.sub(t), s.sub(t), r.sub(a), c.sub(a);
            const q = 1 / (r.x * c.y - c.x * r.y);
            isFinite(q) && (S.copy(e).multiplyScalar(c.y).addScaledVector(s, -r.y).multiplyScalar(q), h.copy(s).multiplyScalar(r.x).addScaledVector(e, -c.x).multiplyScalar(q), i[m].add(S), i[K].add(S), i[y].add(S), o[m].add(h), o[K].add(h), o[y].add(h));
          }
          let U = this.groups;
          U.length === 0 && (U = [
            {
              start: 0,
              count: A.count
            }
          ]);
          for (let m = 0, K = U.length; m < K; ++m) {
            const y = U[m], q = y.start, x = y.count;
            for (let Z = q, j = q + x; Z < j; Z += 3) D(A.getX(Z + 0), A.getX(Z + 1), A.getX(Z + 2));
          }
          const M = new J(), k = new J(), p = new J(), R = new J();
          function Y(m) {
            p.fromBufferAttribute(B, m), R.copy(p);
            const K = i[m];
            M.copy(K), M.sub(p.multiplyScalar(p.dot(K))).normalize(), k.crossVectors(R, K);
            const q = k.dot(o[m]) < 0 ? -1 : 1;
            E.setXYZW(m, M.x, M.y, M.z, q);
          }
          for (let m = 0, K = U.length; m < K; ++m) {
            const y = U[m], q = y.start, x = y.count;
            for (let Z = q, j = q + x; Z < j; Z += 3) Y(A.getX(Z + 0)), Y(A.getX(Z + 1)), Y(A.getX(Z + 2));
          }
        }
        computeVertexNormals() {
          const A = this.index, I = this.getAttribute("position");
          if (I !== void 0) {
            let g = this.getAttribute("normal");
            if (g === void 0) g = new tg(new Float32Array(I.count * 3), 3), this.setAttribute("normal", g);
            else for (let a = 0, r = g.count; a < r; a++) g.setXYZ(a, 0, 0, 0);
            const B = new J(), Q = new J(), E = new J(), i = new J(), o = new J(), t = new J(), e = new J(), s = new J();
            if (A) for (let a = 0, r = A.count; a < r; a += 3) {
              const c = A.getX(a + 0), S = A.getX(a + 1), h = A.getX(a + 2);
              B.fromBufferAttribute(I, c), Q.fromBufferAttribute(I, S), E.fromBufferAttribute(I, h), e.subVectors(E, Q), s.subVectors(B, Q), e.cross(s), i.fromBufferAttribute(g, c), o.fromBufferAttribute(g, S), t.fromBufferAttribute(g, h), i.add(e), o.add(e), t.add(e), g.setXYZ(c, i.x, i.y, i.z), g.setXYZ(S, o.x, o.y, o.z), g.setXYZ(h, t.x, t.y, t.z);
            }
            else for (let a = 0, r = I.count; a < r; a += 3) B.fromBufferAttribute(I, a + 0), Q.fromBufferAttribute(I, a + 1), E.fromBufferAttribute(I, a + 2), e.subVectors(E, Q), s.subVectors(B, Q), e.cross(s), g.setXYZ(a + 0, e.x, e.y, e.z), g.setXYZ(a + 1, e.x, e.y, e.z), g.setXYZ(a + 2, e.x, e.y, e.z);
            this.normalizeNormals(), g.needsUpdate = true;
          }
        }
        normalizeNormals() {
          const A = this.attributes.normal;
          for (let I = 0, g = A.count; I < g; I++) bI.fromBufferAttribute(A, I), bI.normalize(), A.setXYZ(I, bI.x, bI.y, bI.z);
        }
        toNonIndexed() {
          function A(i, o) {
            const t = i.array, e = i.itemSize, s = i.normalized, a = new t.constructor(o.length * e);
            let r = 0, c = 0;
            for (let S = 0, h = o.length; S < h; S++) {
              i.isInterleavedBufferAttribute ? r = o[S] * i.data.stride + i.offset : r = o[S] * e;
              for (let D = 0; D < e; D++) a[c++] = t[r++];
            }
            return new tg(a, e, s);
          }
          if (this.index === null) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
          const I = new fg(), g = this.index.array, B = this.attributes;
          for (const i in B) {
            const o = B[i], t = A(o, g);
            I.setAttribute(i, t);
          }
          const Q = this.morphAttributes;
          for (const i in Q) {
            const o = [], t = Q[i];
            for (let e = 0, s = t.length; e < s; e++) {
              const a = t[e], r = A(a, g);
              o.push(r);
            }
            I.morphAttributes[i] = o;
          }
          I.morphTargetsRelative = this.morphTargetsRelative;
          const E = this.groups;
          for (let i = 0, o = E.length; i < o; i++) {
            const t = E[i];
            I.addGroup(t.start, t.count, t.materialIndex);
          }
          return I;
        }
        toJSON() {
          const A = {
            metadata: {
              version: 4.7,
              type: "BufferGeometry",
              generator: "BufferGeometry.toJSON"
            }
          };
          if (A.uuid = this.uuid, A.type = this.type, this.name !== "" && (A.name = this.name), Object.keys(this.userData).length > 0 && (A.userData = this.userData), this.parameters !== void 0) {
            const o = this.parameters;
            for (const t in o) o[t] !== void 0 && (A[t] = o[t]);
            return A;
          }
          A.data = {
            attributes: {}
          };
          const I = this.index;
          I !== null && (A.data.index = {
            type: I.array.constructor.name,
            array: Array.prototype.slice.call(I.array)
          });
          const g = this.attributes;
          for (const o in g) {
            const t = g[o];
            A.data.attributes[o] = t.toJSON(A.data);
          }
          const B = {};
          let Q = false;
          for (const o in this.morphAttributes) {
            const t = this.morphAttributes[o], e = [];
            for (let s = 0, a = t.length; s < a; s++) {
              const r = t[s];
              e.push(r.toJSON(A.data));
            }
            e.length > 0 && (B[o] = e, Q = true);
          }
          Q && (A.data.morphAttributes = B, A.data.morphTargetsRelative = this.morphTargetsRelative);
          const E = this.groups;
          E.length > 0 && (A.data.groups = JSON.parse(JSON.stringify(E)));
          const i = this.boundingSphere;
          return i !== null && (A.data.boundingSphere = i.toJSON()), A;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(A) {
          this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
          const I = {};
          this.name = A.name;
          const g = A.index;
          g !== null && this.setIndex(g.clone());
          const B = A.attributes;
          for (const t in B) {
            const e = B[t];
            this.setAttribute(t, e.clone(I));
          }
          const Q = A.morphAttributes;
          for (const t in Q) {
            const e = [], s = Q[t];
            for (let a = 0, r = s.length; a < r; a++) e.push(s[a].clone(I));
            this.morphAttributes[t] = e;
          }
          this.morphTargetsRelative = A.morphTargetsRelative;
          const E = A.groups;
          for (let t = 0, e = E.length; t < e; t++) {
            const s = E[t];
            this.addGroup(s.start, s.count, s.materialIndex);
          }
          const i = A.boundingBox;
          i !== null && (this.boundingBox = i.clone());
          const o = A.boundingSphere;
          return o !== null && (this.boundingSphere = o.clone()), this.drawRange.start = A.drawRange.start, this.drawRange.count = A.drawRange.count, this.userData = A.userData, this;
        }
        dispose() {
          this.dispatchEvent({
            type: "dispose"
          });
        }
      }
      const ks = new uA(), TC = new bQ(), BE = new zg(), ys = new J(), QE = new J(), EE = new J(), iE = new J(), ui = new J(), oE = new J(), Ms = new J(), tE = new J();
      class ig extends UI {
        constructor(A = new fg(), I = new VC()) {
          super(), this.isMesh = true, this.type = "Mesh", this.geometry = A, this.material = I, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.count = 1, this.updateMorphTargets();
        }
        copy(A, I) {
          return super.copy(A, I), A.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = A.morphTargetInfluences.slice()), A.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, A.morphTargetDictionary)), this.material = Array.isArray(A.material) ? A.material.slice() : A.material, this.geometry = A.geometry, this;
        }
        updateMorphTargets() {
          const I = this.geometry.morphAttributes, g = Object.keys(I);
          if (g.length > 0) {
            const B = I[g[0]];
            if (B !== void 0) {
              this.morphTargetInfluences = [], this.morphTargetDictionary = {};
              for (let Q = 0, E = B.length; Q < E; Q++) {
                const i = B[Q].name || String(Q);
                this.morphTargetInfluences.push(0), this.morphTargetDictionary[i] = Q;
              }
            }
          }
        }
        getVertexPosition(A, I) {
          const g = this.geometry, B = g.attributes.position, Q = g.morphAttributes.position, E = g.morphTargetsRelative;
          I.fromBufferAttribute(B, A);
          const i = this.morphTargetInfluences;
          if (Q && i) {
            oE.set(0, 0, 0);
            for (let o = 0, t = Q.length; o < t; o++) {
              const e = i[o], s = Q[o];
              e !== 0 && (ui.fromBufferAttribute(s, A), E ? oE.addScaledVector(ui, e) : oE.addScaledVector(ui.sub(I), e));
            }
            I.add(oE);
          }
          return I;
        }
        raycast(A, I) {
          const g = this.geometry, B = this.material, Q = this.matrixWorld;
          B !== void 0 && (g.boundingSphere === null && g.computeBoundingSphere(), BE.copy(g.boundingSphere), BE.applyMatrix4(Q), TC.copy(A.ray).recast(A.near), !(BE.containsPoint(TC.origin) === false && (TC.intersectSphere(BE, ys) === null || TC.origin.distanceToSquared(ys) > (A.far - A.near) ** 2)) && (ks.copy(Q).invert(), TC.copy(A.ray).applyMatrix4(ks), !(g.boundingBox !== null && TC.intersectsBox(g.boundingBox) === false) && this._computeIntersections(A, I, TC)));
        }
        _computeIntersections(A, I, g) {
          let B;
          const Q = this.geometry, E = this.material, i = Q.index, o = Q.attributes.position, t = Q.attributes.uv, e = Q.attributes.uv1, s = Q.attributes.normal, a = Q.groups, r = Q.drawRange;
          if (i !== null) if (Array.isArray(E)) for (let c = 0, S = a.length; c < S; c++) {
            const h = a[c], D = E[h.materialIndex], U = Math.max(h.start, r.start), M = Math.min(i.count, Math.min(h.start + h.count, r.start + r.count));
            for (let k = U, p = M; k < p; k += 3) {
              const R = i.getX(k), Y = i.getX(k + 1), m = i.getX(k + 2);
              B = eE(this, D, A, g, t, e, s, R, Y, m), B && (B.faceIndex = Math.floor(k / 3), B.face.materialIndex = h.materialIndex, I.push(B));
            }
          }
          else {
            const c = Math.max(0, r.start), S = Math.min(i.count, r.start + r.count);
            for (let h = c, D = S; h < D; h += 3) {
              const U = i.getX(h), M = i.getX(h + 1), k = i.getX(h + 2);
              B = eE(this, E, A, g, t, e, s, U, M, k), B && (B.faceIndex = Math.floor(h / 3), I.push(B));
            }
          }
          else if (o !== void 0) if (Array.isArray(E)) for (let c = 0, S = a.length; c < S; c++) {
            const h = a[c], D = E[h.materialIndex], U = Math.max(h.start, r.start), M = Math.min(o.count, Math.min(h.start + h.count, r.start + r.count));
            for (let k = U, p = M; k < p; k += 3) {
              const R = k, Y = k + 1, m = k + 2;
              B = eE(this, D, A, g, t, e, s, R, Y, m), B && (B.faceIndex = Math.floor(k / 3), B.face.materialIndex = h.materialIndex, I.push(B));
            }
          }
          else {
            const c = Math.max(0, r.start), S = Math.min(o.count, r.start + r.count);
            for (let h = c, D = S; h < D; h += 3) {
              const U = h, M = h + 1, k = h + 2;
              B = eE(this, E, A, g, t, e, s, U, M, k), B && (B.faceIndex = Math.floor(h / 3), I.push(B));
            }
          }
        }
      }
      function $h(C, A, I, g, B, Q, E, i) {
        let o;
        if (A.side === Dg ? o = g.intersectTriangle(E, Q, B, true, i) : o = g.intersectTriangle(B, Q, E, A.side === Wg, i), o === null) return null;
        tE.copy(i), tE.applyMatrix4(C.matrixWorld);
        const t = I.ray.origin.distanceTo(tE);
        return t < I.near || t > I.far ? null : {
          distance: t,
          point: tE.clone(),
          object: C
        };
      }
      function eE(C, A, I, g, B, Q, E, i, o, t) {
        C.getVertexPosition(i, QE), C.getVertexPosition(o, EE), C.getVertexPosition(t, iE);
        const e = $h(C, A, I, g, QE, EE, iE, Ms);
        if (e) {
          const s = new J();
          CQ.getBarycoord(Ms, QE, EE, iE, s), B && (e.uv = CQ.getInterpolatedAttribute(B, i, o, t, s, new XA())), Q && (e.uv1 = CQ.getInterpolatedAttribute(Q, i, o, t, s, new XA())), E && (e.normal = CQ.getInterpolatedAttribute(E, i, o, t, s, new J()), e.normal.dot(g.direction) > 0 && e.normal.multiplyScalar(-1));
          const a = {
            a: i,
            b: o,
            c: t,
            normal: new J(),
            materialIndex: 0
          };
          CQ.getNormal(QE, EE, iE, a.normal), e.face = a, e.barycoord = s;
        }
        return e;
      }
      class xQ extends fg {
        constructor(A = 1, I = 1, g = 1, B = 1, Q = 1, E = 1) {
          super(), this.type = "BoxGeometry", this.parameters = {
            width: A,
            height: I,
            depth: g,
            widthSegments: B,
            heightSegments: Q,
            depthSegments: E
          };
          const i = this;
          B = Math.floor(B), Q = Math.floor(Q), E = Math.floor(E);
          const o = [], t = [], e = [], s = [];
          let a = 0, r = 0;
          c("z", "y", "x", -1, -1, g, I, A, E, Q, 0), c("z", "y", "x", 1, -1, g, I, -A, E, Q, 1), c("x", "z", "y", 1, 1, A, g, I, B, E, 2), c("x", "z", "y", 1, -1, A, g, -I, B, E, 3), c("x", "y", "z", 1, -1, A, I, g, B, Q, 4), c("x", "y", "z", -1, -1, A, I, -g, B, Q, 5), this.setIndex(o), this.setAttribute("position", new hC(t, 3)), this.setAttribute("normal", new hC(e, 3)), this.setAttribute("uv", new hC(s, 2));
          function c(S, h, D, U, M, k, p, R, Y, m, K) {
            const y = k / Y, q = p / m, x = k / 2, Z = p / 2, j = R / 2, z = Y + 1, V = m + 1;
            let iA = 0, v = 0;
            const sA = new J();
            for (let rA = 0; rA < V; rA++) {
              const JA = rA * q - Z;
              for (let jA = 0; jA < z; jA++) {
                const nI = jA * y - x;
                sA[S] = nI * U, sA[h] = JA * M, sA[D] = j, t.push(sA.x, sA.y, sA.z), sA[S] = 0, sA[h] = 0, sA[D] = R > 0 ? 1 : -1, e.push(sA.x, sA.y, sA.z), s.push(jA / Y), s.push(1 - rA / m), iA += 1;
              }
            }
            for (let rA = 0; rA < m; rA++) for (let JA = 0; JA < Y; JA++) {
              const jA = a + JA + z * rA, nI = a + JA + z * (rA + 1), lI = a + (JA + 1) + z * (rA + 1), QI = a + (JA + 1) + z * rA;
              o.push(jA, nI, QI), o.push(nI, lI, QI), v += 6;
            }
            i.addGroup(r, v, K), r += v, a += iA;
          }
        }
        copy(A) {
          return super.copy(A), this.parameters = Object.assign({}, A.parameters), this;
        }
        static fromJSON(A) {
          return new xQ(A.width, A.height, A.depth, A.widthSegments, A.heightSegments, A.depthSegments);
        }
      }
      function mB(C) {
        const A = {};
        for (const I in C) {
          A[I] = {};
          for (const g in C[I]) {
            const B = C[I][g];
            B && (B.isColor || B.isMatrix3 || B.isMatrix4 || B.isVector2 || B.isVector3 || B.isVector4 || B.isTexture || B.isQuaternion) ? B.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), A[I][g] = null) : A[I][g] = B.clone() : Array.isArray(B) ? A[I][g] = B.slice() : A[I][g] = B;
          }
        }
        return A;
      }
      function Cg(C) {
        const A = {};
        for (let I = 0; I < C.length; I++) {
          const g = mB(C[I]);
          for (const B in g) A[B] = g[B];
        }
        return A;
      }
      function Aw(C) {
        const A = [];
        for (let I = 0; I < C.length; I++) A.push(C[I].clone());
        return A;
      }
      function uD(C) {
        const A = C.getRenderTarget();
        return A === null ? C.outputColorSpace : A.isXRRenderTarget === true ? A.texture.colorSpace : gI.workingColorSpace;
      }
      const Iw = {
        clone: mB,
        merge: Cg
      };
      var gw = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, Cw = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
      class YC extends Pg {
        constructor(A) {
          super(), this.isShaderMaterial = true, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = gw, this.fragmentShader = Cw, this.linewidth = 1, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.lights = false, this.clipping = false, this.forceSinglePass = true, this.extensions = {
            clipCullDistance: false,
            multiDraw: false
          }, this.defaultAttributeValues = {
            color: [
              1,
              1,
              1
            ],
            uv: [
              0,
              0
            ],
            uv1: [
              0,
              0
            ]
          }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = false, this.glslVersion = null, A !== void 0 && this.setValues(A);
        }
        copy(A) {
          return super.copy(A), this.fragmentShader = A.fragmentShader, this.vertexShader = A.vertexShader, this.uniforms = mB(A.uniforms), this.uniformsGroups = Aw(A.uniformsGroups), this.defines = Object.assign({}, A.defines), this.wireframe = A.wireframe, this.wireframeLinewidth = A.wireframeLinewidth, this.fog = A.fog, this.lights = A.lights, this.clipping = A.clipping, this.extensions = Object.assign({}, A.extensions), this.glslVersion = A.glslVersion, this;
        }
        toJSON(A) {
          const I = super.toJSON(A);
          I.glslVersion = this.glslVersion, I.uniforms = {};
          for (const B in this.uniforms) {
            const E = this.uniforms[B].value;
            E && E.isTexture ? I.uniforms[B] = {
              type: "t",
              value: E.toJSON(A).uuid
            } : E && E.isColor ? I.uniforms[B] = {
              type: "c",
              value: E.getHex()
            } : E && E.isVector2 ? I.uniforms[B] = {
              type: "v2",
              value: E.toArray()
            } : E && E.isVector3 ? I.uniforms[B] = {
              type: "v3",
              value: E.toArray()
            } : E && E.isVector4 ? I.uniforms[B] = {
              type: "v4",
              value: E.toArray()
            } : E && E.isMatrix3 ? I.uniforms[B] = {
              type: "m3",
              value: E.toArray()
            } : E && E.isMatrix4 ? I.uniforms[B] = {
              type: "m4",
              value: E.toArray()
            } : I.uniforms[B] = {
              value: E
            };
          }
          Object.keys(this.defines).length > 0 && (I.defines = this.defines), I.vertexShader = this.vertexShader, I.fragmentShader = this.fragmentShader, I.lights = this.lights, I.clipping = this.clipping;
          const g = {};
          for (const B in this.extensions) this.extensions[B] === true && (g[B] = true);
          return Object.keys(g).length > 0 && (I.extensions = g), I;
        }
      }
      class HD extends UI {
        constructor() {
          super(), this.isCamera = true, this.type = "Camera", this.matrixWorldInverse = new uA(), this.projectionMatrix = new uA(), this.projectionMatrixInverse = new uA(), this.coordinateSystem = vg, this._reversedDepth = false;
        }
        get reversedDepth() {
          return this._reversedDepth;
        }
        copy(A, I) {
          return super.copy(A, I), this.matrixWorldInverse.copy(A.matrixWorldInverse), this.projectionMatrix.copy(A.projectionMatrix), this.projectionMatrixInverse.copy(A.projectionMatrixInverse), this.coordinateSystem = A.coordinateSystem, this;
        }
        getWorldDirection(A) {
          return super.getWorldDirection(A).negate();
        }
        updateMatrixWorld(A) {
          super.updateMatrixWorld(A), this.matrixWorldInverse.copy(this.matrixWorld).invert();
        }
        updateWorldMatrix(A, I) {
          super.updateWorldMatrix(A, I), this.matrixWorldInverse.copy(this.matrixWorld).invert();
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      const UC = new J(), Ks = new XA(), Us = new XA();
      class Qg extends HD {
        constructor(A = 50, I = 1, g = 0.1, B = 2e3) {
          super(), this.isPerspectiveCamera = true, this.type = "PerspectiveCamera", this.fov = A, this.zoom = 1, this.near = g, this.far = B, this.focus = 10, this.aspect = I, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
        }
        copy(A, I) {
          return super.copy(A, I), this.fov = A.fov, this.zoom = A.zoom, this.near = A.near, this.far = A.far, this.focus = A.focus, this.aspect = A.aspect, this.view = A.view === null ? null : Object.assign({}, A.view), this.filmGauge = A.filmGauge, this.filmOffset = A.filmOffset, this;
        }
        setFocalLength(A) {
          const I = 0.5 * this.getFilmHeight() / A;
          this.fov = HB * 2 * Math.atan(I), this.updateProjectionMatrix();
        }
        getFocalLength() {
          const A = Math.tan(rQ * 0.5 * this.fov);
          return 0.5 * this.getFilmHeight() / A;
        }
        getEffectiveFOV() {
          return HB * 2 * Math.atan(Math.tan(rQ * 0.5 * this.fov) / this.zoom);
        }
        getFilmWidth() {
          return this.filmGauge * Math.min(this.aspect, 1);
        }
        getFilmHeight() {
          return this.filmGauge / Math.max(this.aspect, 1);
        }
        getViewBounds(A, I, g) {
          UC.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse), I.set(UC.x, UC.y).multiplyScalar(-A / UC.z), UC.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse), g.set(UC.x, UC.y).multiplyScalar(-A / UC.z);
        }
        getViewSize(A, I) {
          return this.getViewBounds(A, Ks, Us), I.subVectors(Us, Ks);
        }
        setViewOffset(A, I, g, B, Q, E) {
          this.aspect = A / I, this.view === null && (this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
          }), this.view.enabled = true, this.view.fullWidth = A, this.view.fullHeight = I, this.view.offsetX = g, this.view.offsetY = B, this.view.width = Q, this.view.height = E, this.updateProjectionMatrix();
        }
        clearViewOffset() {
          this.view !== null && (this.view.enabled = false), this.updateProjectionMatrix();
        }
        updateProjectionMatrix() {
          const A = this.near;
          let I = A * Math.tan(rQ * 0.5 * this.fov) / this.zoom, g = 2 * I, B = this.aspect * g, Q = -0.5 * B;
          const E = this.view;
          if (this.view !== null && this.view.enabled) {
            const o = E.fullWidth, t = E.fullHeight;
            Q += E.offsetX * B / o, I -= E.offsetY * g / t, B *= E.width / o, g *= E.height / t;
          }
          const i = this.filmOffset;
          i !== 0 && (Q += A * i / this.getFilmWidth()), this.projectionMatrix.makePerspective(Q, Q + B, I, I - g, A, this.far, this.coordinateSystem, this.reversedDepth), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        }
        toJSON(A) {
          const I = super.toJSON(A);
          return I.object.fov = this.fov, I.object.zoom = this.zoom, I.object.near = this.near, I.object.far = this.far, I.object.focus = this.focus, I.object.aspect = this.aspect, this.view !== null && (I.object.view = Object.assign({}, this.view)), I.object.filmGauge = this.filmGauge, I.object.filmOffset = this.filmOffset, I;
        }
      }
      const SB = -90, lB = 1;
      class Bw extends UI {
        constructor(A, I, g) {
          super(), this.type = "CubeCamera", this.renderTarget = g, this.coordinateSystem = null, this.activeMipmapLevel = 0;
          const B = new Qg(SB, lB, A, I);
          B.layers = this.layers, this.add(B);
          const Q = new Qg(SB, lB, A, I);
          Q.layers = this.layers, this.add(Q);
          const E = new Qg(SB, lB, A, I);
          E.layers = this.layers, this.add(E);
          const i = new Qg(SB, lB, A, I);
          i.layers = this.layers, this.add(i);
          const o = new Qg(SB, lB, A, I);
          o.layers = this.layers, this.add(o);
          const t = new Qg(SB, lB, A, I);
          t.layers = this.layers, this.add(t);
        }
        updateCoordinateSystem() {
          const A = this.coordinateSystem, I = this.children.concat(), [g, B, Q, E, i, o] = I;
          for (const t of I) this.remove(t);
          if (A === vg) g.up.set(0, 1, 0), g.lookAt(1, 0, 0), B.up.set(0, 1, 0), B.lookAt(-1, 0, 0), Q.up.set(0, 0, -1), Q.lookAt(0, 1, 0), E.up.set(0, 0, 1), E.lookAt(0, -1, 0), i.up.set(0, 1, 0), i.lookAt(0, 0, 1), o.up.set(0, 1, 0), o.lookAt(0, 0, -1);
          else if (A === HE) g.up.set(0, -1, 0), g.lookAt(-1, 0, 0), B.up.set(0, -1, 0), B.lookAt(1, 0, 0), Q.up.set(0, 0, 1), Q.lookAt(0, 1, 0), E.up.set(0, 0, -1), E.lookAt(0, -1, 0), i.up.set(0, -1, 0), i.lookAt(0, 0, 1), o.up.set(0, -1, 0), o.lookAt(0, 0, -1);
          else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + A);
          for (const t of I) this.add(t), t.updateMatrixWorld();
        }
        update(A, I) {
          this.parent === null && this.updateMatrixWorld();
          const { renderTarget: g, activeMipmapLevel: B } = this;
          this.coordinateSystem !== A.coordinateSystem && (this.coordinateSystem = A.coordinateSystem, this.updateCoordinateSystem());
          const [Q, E, i, o, t, e] = this.children, s = A.getRenderTarget(), a = A.getActiveCubeFace(), r = A.getActiveMipmapLevel(), c = A.xr.enabled;
          A.xr.enabled = false;
          const S = g.texture.generateMipmaps;
          g.texture.generateMipmaps = false, A.setRenderTarget(g, 0, B), A.render(I, Q), A.setRenderTarget(g, 1, B), A.render(I, E), A.setRenderTarget(g, 2, B), A.render(I, i), A.setRenderTarget(g, 3, B), A.render(I, o), A.setRenderTarget(g, 4, B), A.render(I, t), g.texture.generateMipmaps = S, A.setRenderTarget(g, 5, B), A.render(I, e), A.setRenderTarget(s, a, r), A.xr.enabled = c, g.texture.needsPMREMUpdate = true;
        }
      }
      class mD extends uI {
        constructor(A = [], I = LB, g, B, Q, E, i, o, t, e) {
          super(A, I, g, B, Q, E, i, o, t, e), this.isCubeTexture = true, this.flipY = false;
        }
        get images() {
          return this.image;
        }
        set images(A) {
          this.image = A;
        }
      }
      class Qw extends gB {
        constructor(A = 1, I = {}) {
          super(A, A, I), this.isWebGLCubeRenderTarget = true;
          const g = {
            width: A,
            height: A,
            depth: 1
          }, B = [
            g,
            g,
            g,
            g,
            g,
            g
          ];
          this.texture = new mD(B), this._setTextureOptions(I), this.texture.isRenderTargetTexture = true;
        }
        fromEquirectangularTexture(A, I) {
          this.texture.type = I.type, this.texture.colorSpace = I.colorSpace, this.texture.generateMipmaps = I.generateMipmaps, this.texture.minFilter = I.minFilter, this.texture.magFilter = I.magFilter;
          const g = {
            uniforms: {
              tEquirect: {
                value: null
              }
            },
            vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
            fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
          }, B = new xQ(5, 5, 5), Q = new YC({
            name: "CubemapFromEquirect",
            uniforms: mB(g.uniforms),
            vertexShader: g.vertexShader,
            fragmentShader: g.fragmentShader,
            side: Dg,
            blending: pC
          });
          Q.uniforms.tEquirect.value = I;
          const E = new ig(B, Q), i = I.minFilter;
          return I.minFilter === aC && (I.minFilter = sg), new Bw(1, 10, this).update(A, E), I.minFilter = i, E.geometry.dispose(), E.material.dispose(), this;
        }
        clear(A, I = true, g = true, B = true) {
          const Q = A.getRenderTarget();
          for (let E = 0; E < 6; E++) A.setRenderTarget(this, E), A.clear(I, g, B);
          A.setRenderTarget(Q);
        }
      }
      class XC extends UI {
        constructor() {
          super(), this.isGroup = true, this.type = "Group";
        }
      }
      const Ew = {
        type: "move"
      };
      class Hi {
        constructor() {
          this._targetRay = null, this._grip = null, this._hand = null;
        }
        getHandSpace() {
          return this._hand === null && (this._hand = new XC(), this._hand.matrixAutoUpdate = false, this._hand.visible = false, this._hand.joints = {}, this._hand.inputState = {
            pinching: false
          }), this._hand;
        }
        getTargetRaySpace() {
          return this._targetRay === null && (this._targetRay = new XC(), this._targetRay.matrixAutoUpdate = false, this._targetRay.visible = false, this._targetRay.hasLinearVelocity = false, this._targetRay.linearVelocity = new J(), this._targetRay.hasAngularVelocity = false, this._targetRay.angularVelocity = new J()), this._targetRay;
        }
        getGripSpace() {
          return this._grip === null && (this._grip = new XC(), this._grip.matrixAutoUpdate = false, this._grip.visible = false, this._grip.hasLinearVelocity = false, this._grip.linearVelocity = new J(), this._grip.hasAngularVelocity = false, this._grip.angularVelocity = new J()), this._grip;
        }
        dispatchEvent(A) {
          return this._targetRay !== null && this._targetRay.dispatchEvent(A), this._grip !== null && this._grip.dispatchEvent(A), this._hand !== null && this._hand.dispatchEvent(A), this;
        }
        connect(A) {
          if (A && A.hand) {
            const I = this._hand;
            if (I) for (const g of A.hand.values()) this._getHandJoint(I, g);
          }
          return this.dispatchEvent({
            type: "connected",
            data: A
          }), this;
        }
        disconnect(A) {
          return this.dispatchEvent({
            type: "disconnected",
            data: A
          }), this._targetRay !== null && (this._targetRay.visible = false), this._grip !== null && (this._grip.visible = false), this._hand !== null && (this._hand.visible = false), this;
        }
        update(A, I, g) {
          let B = null, Q = null, E = null;
          const i = this._targetRay, o = this._grip, t = this._hand;
          if (A && I.session.visibilityState !== "visible-blurred") {
            if (t && A.hand) {
              E = true;
              for (const S of A.hand.values()) {
                const h = I.getJointPose(S, g), D = this._getHandJoint(t, S);
                h !== null && (D.matrix.fromArray(h.transform.matrix), D.matrix.decompose(D.position, D.rotation, D.scale), D.matrixWorldNeedsUpdate = true, D.jointRadius = h.radius), D.visible = h !== null;
              }
              const e = t.joints["index-finger-tip"], s = t.joints["thumb-tip"], a = e.position.distanceTo(s.position), r = 0.02, c = 5e-3;
              t.inputState.pinching && a > r + c ? (t.inputState.pinching = false, this.dispatchEvent({
                type: "pinchend",
                handedness: A.handedness,
                target: this
              })) : !t.inputState.pinching && a <= r - c && (t.inputState.pinching = true, this.dispatchEvent({
                type: "pinchstart",
                handedness: A.handedness,
                target: this
              }));
            } else o !== null && A.gripSpace && (Q = I.getPose(A.gripSpace, g), Q !== null && (o.matrix.fromArray(Q.transform.matrix), o.matrix.decompose(o.position, o.rotation, o.scale), o.matrixWorldNeedsUpdate = true, Q.linearVelocity ? (o.hasLinearVelocity = true, o.linearVelocity.copy(Q.linearVelocity)) : o.hasLinearVelocity = false, Q.angularVelocity ? (o.hasAngularVelocity = true, o.angularVelocity.copy(Q.angularVelocity)) : o.hasAngularVelocity = false));
            i !== null && (B = I.getPose(A.targetRaySpace, g), B === null && Q !== null && (B = Q), B !== null && (i.matrix.fromArray(B.transform.matrix), i.matrix.decompose(i.position, i.rotation, i.scale), i.matrixWorldNeedsUpdate = true, B.linearVelocity ? (i.hasLinearVelocity = true, i.linearVelocity.copy(B.linearVelocity)) : i.hasLinearVelocity = false, B.angularVelocity ? (i.hasAngularVelocity = true, i.angularVelocity.copy(B.angularVelocity)) : i.hasAngularVelocity = false, this.dispatchEvent(Ew)));
          }
          return i !== null && (i.visible = B !== null), o !== null && (o.visible = Q !== null), t !== null && (t.visible = E !== null), this;
        }
        _getHandJoint(A, I) {
          if (A.joints[I.jointName] === void 0) {
            const g = new XC();
            g.matrixAutoUpdate = false, g.visible = false, A.joints[I.jointName] = g, A.add(g);
          }
          return A.joints[I.jointName];
        }
      }
      let iw = class extends UI {
        constructor() {
          super(), this.isScene = true, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.backgroundRotation = new pI(), this.environmentIntensity = 1, this.environmentRotation = new pI(), this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
          }));
        }
        copy(A, I) {
          return super.copy(A, I), A.background !== null && (this.background = A.background.clone()), A.environment !== null && (this.environment = A.environment.clone()), A.fog !== null && (this.fog = A.fog.clone()), this.backgroundBlurriness = A.backgroundBlurriness, this.backgroundIntensity = A.backgroundIntensity, this.backgroundRotation.copy(A.backgroundRotation), this.environmentIntensity = A.environmentIntensity, this.environmentRotation.copy(A.environmentRotation), A.overrideMaterial !== null && (this.overrideMaterial = A.overrideMaterial.clone()), this.matrixAutoUpdate = A.matrixAutoUpdate, this;
        }
        toJSON(A) {
          const I = super.toJSON(A);
          return this.fog !== null && (I.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (I.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (I.object.backgroundIntensity = this.backgroundIntensity), I.object.backgroundRotation = this.backgroundRotation.toArray(), this.environmentIntensity !== 1 && (I.object.environmentIntensity = this.environmentIntensity), I.object.environmentRotation = this.environmentRotation.toArray(), I;
        }
      };
      class ow {
        constructor(A, I) {
          this.isInterleavedBuffer = true, this.array = A, this.stride = I, this.count = A !== void 0 ? A.length / I : 0, this.usage = st, this.updateRanges = [], this.version = 0, this.uuid = Yg();
        }
        onUploadCallback() {
        }
        set needsUpdate(A) {
          A === true && this.version++;
        }
        setUsage(A) {
          return this.usage = A, this;
        }
        addUpdateRange(A, I) {
          this.updateRanges.push({
            start: A,
            count: I
          });
        }
        clearUpdateRanges() {
          this.updateRanges.length = 0;
        }
        copy(A) {
          return this.array = new A.array.constructor(A.array), this.count = A.count, this.stride = A.stride, this.usage = A.usage, this;
        }
        copyAt(A, I, g) {
          A *= this.stride, g *= I.stride;
          for (let B = 0, Q = this.stride; B < Q; B++) this.array[A + B] = I.array[g + B];
          return this;
        }
        set(A, I = 0) {
          return this.array.set(A, I), this;
        }
        clone(A) {
          A.arrayBuffers === void 0 && (A.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Yg()), A.arrayBuffers[this.array.buffer._uuid] === void 0 && (A.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
          const I = new this.array.constructor(A.arrayBuffers[this.array.buffer._uuid]), g = new this.constructor(I, this.stride);
          return g.setUsage(this.usage), g;
        }
        onUpload(A) {
          return this.onUploadCallback = A, this;
        }
        toJSON(A) {
          return A.arrayBuffers === void 0 && (A.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Yg()), A.arrayBuffers[this.array.buffer._uuid] === void 0 && (A.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
            uuid: this.uuid,
            buffer: this.array.buffer._uuid,
            type: this.array.constructor.name,
            stride: this.stride
          };
        }
      }
      const gg = new J();
      class ge {
        constructor(A, I, g, B = false) {
          this.isInterleavedBufferAttribute = true, this.name = "", this.data = A, this.itemSize = I, this.offset = g, this.normalized = B;
        }
        get count() {
          return this.data.count;
        }
        get array() {
          return this.data.array;
        }
        set needsUpdate(A) {
          this.data.needsUpdate = A;
        }
        applyMatrix4(A) {
          for (let I = 0, g = this.data.count; I < g; I++) gg.fromBufferAttribute(this, I), gg.applyMatrix4(A), this.setXYZ(I, gg.x, gg.y, gg.z);
          return this;
        }
        applyNormalMatrix(A) {
          for (let I = 0, g = this.count; I < g; I++) gg.fromBufferAttribute(this, I), gg.applyNormalMatrix(A), this.setXYZ(I, gg.x, gg.y, gg.z);
          return this;
        }
        transformDirection(A) {
          for (let I = 0, g = this.count; I < g; I++) gg.fromBufferAttribute(this, I), gg.transformDirection(A), this.setXYZ(I, gg.x, gg.y, gg.z);
          return this;
        }
        getComponent(A, I) {
          let g = this.array[A * this.data.stride + this.offset + I];
          return this.normalized && (g = pg(g, this.array)), g;
        }
        setComponent(A, I, g) {
          return this.normalized && (g = iI(g, this.array)), this.data.array[A * this.data.stride + this.offset + I] = g, this;
        }
        setX(A, I) {
          return this.normalized && (I = iI(I, this.array)), this.data.array[A * this.data.stride + this.offset] = I, this;
        }
        setY(A, I) {
          return this.normalized && (I = iI(I, this.array)), this.data.array[A * this.data.stride + this.offset + 1] = I, this;
        }
        setZ(A, I) {
          return this.normalized && (I = iI(I, this.array)), this.data.array[A * this.data.stride + this.offset + 2] = I, this;
        }
        setW(A, I) {
          return this.normalized && (I = iI(I, this.array)), this.data.array[A * this.data.stride + this.offset + 3] = I, this;
        }
        getX(A) {
          let I = this.data.array[A * this.data.stride + this.offset];
          return this.normalized && (I = pg(I, this.array)), I;
        }
        getY(A) {
          let I = this.data.array[A * this.data.stride + this.offset + 1];
          return this.normalized && (I = pg(I, this.array)), I;
        }
        getZ(A) {
          let I = this.data.array[A * this.data.stride + this.offset + 2];
          return this.normalized && (I = pg(I, this.array)), I;
        }
        getW(A) {
          let I = this.data.array[A * this.data.stride + this.offset + 3];
          return this.normalized && (I = pg(I, this.array)), I;
        }
        setXY(A, I, g) {
          return A = A * this.data.stride + this.offset, this.normalized && (I = iI(I, this.array), g = iI(g, this.array)), this.data.array[A + 0] = I, this.data.array[A + 1] = g, this;
        }
        setXYZ(A, I, g, B) {
          return A = A * this.data.stride + this.offset, this.normalized && (I = iI(I, this.array), g = iI(g, this.array), B = iI(B, this.array)), this.data.array[A + 0] = I, this.data.array[A + 1] = g, this.data.array[A + 2] = B, this;
        }
        setXYZW(A, I, g, B, Q) {
          return A = A * this.data.stride + this.offset, this.normalized && (I = iI(I, this.array), g = iI(g, this.array), B = iI(B, this.array), Q = iI(Q, this.array)), this.data.array[A + 0] = I, this.data.array[A + 1] = g, this.data.array[A + 2] = B, this.data.array[A + 3] = Q, this;
        }
        clone(A) {
          if (A === void 0) {
            console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
            const I = [];
            for (let g = 0; g < this.count; g++) {
              const B = g * this.data.stride + this.offset;
              for (let Q = 0; Q < this.itemSize; Q++) I.push(this.data.array[B + Q]);
            }
            return new tg(new this.array.constructor(I), this.itemSize, this.normalized);
          } else return A.interleavedBuffers === void 0 && (A.interleavedBuffers = {}), A.interleavedBuffers[this.data.uuid] === void 0 && (A.interleavedBuffers[this.data.uuid] = this.data.clone(A)), new ge(A.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
        }
        toJSON(A) {
          if (A === void 0) {
            console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
            const I = [];
            for (let g = 0; g < this.count; g++) {
              const B = g * this.data.stride + this.offset;
              for (let Q = 0; Q < this.itemSize; Q++) I.push(this.data.array[B + Q]);
            }
            return {
              itemSize: this.itemSize,
              type: this.array.constructor.name,
              array: I,
              normalized: this.normalized
            };
          } else return A.interleavedBuffers === void 0 && (A.interleavedBuffers = {}), A.interleavedBuffers[this.data.uuid] === void 0 && (A.interleavedBuffers[this.data.uuid] = this.data.toJSON(A)), {
            isInterleavedBufferAttribute: true,
            itemSize: this.itemSize,
            data: this.data.uuid,
            offset: this.offset,
            normalized: this.normalized
          };
        }
      }
      const Ns = new J(), Fs = new BI(), Js = new BI(), tw = new J(), Rs = new uA(), sE = new J(), mi = new zg(), ps = new uA(), Ti = new bQ();
      class ew extends ig {
        constructor(A, I) {
          super(A, I), this.isSkinnedMesh = true, this.type = "SkinnedMesh", this.bindMode = Cs, this.bindMatrix = new uA(), this.bindMatrixInverse = new uA(), this.boundingBox = null, this.boundingSphere = null;
        }
        computeBoundingBox() {
          const A = this.geometry;
          this.boundingBox === null && (this.boundingBox = new Xg()), this.boundingBox.makeEmpty();
          const I = A.getAttribute("position");
          for (let g = 0; g < I.count; g++) this.getVertexPosition(g, sE), this.boundingBox.expandByPoint(sE);
        }
        computeBoundingSphere() {
          const A = this.geometry;
          this.boundingSphere === null && (this.boundingSphere = new zg()), this.boundingSphere.makeEmpty();
          const I = A.getAttribute("position");
          for (let g = 0; g < I.count; g++) this.getVertexPosition(g, sE), this.boundingSphere.expandByPoint(sE);
        }
        copy(A, I) {
          return super.copy(A, I), this.bindMode = A.bindMode, this.bindMatrix.copy(A.bindMatrix), this.bindMatrixInverse.copy(A.bindMatrixInverse), this.skeleton = A.skeleton, A.boundingBox !== null && (this.boundingBox = A.boundingBox.clone()), A.boundingSphere !== null && (this.boundingSphere = A.boundingSphere.clone()), this;
        }
        raycast(A, I) {
          const g = this.material, B = this.matrixWorld;
          g !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), mi.copy(this.boundingSphere), mi.applyMatrix4(B), A.ray.intersectsSphere(mi) !== false && (ps.copy(B).invert(), Ti.copy(A.ray).applyMatrix4(ps), !(this.boundingBox !== null && Ti.intersectsBox(this.boundingBox) === false) && this._computeIntersections(A, I, Ti)));
        }
        getVertexPosition(A, I) {
          return super.getVertexPosition(A, I), this.applyBoneTransform(A, I), I;
        }
        bind(A, I) {
          this.skeleton = A, I === void 0 && (this.updateMatrixWorld(true), this.skeleton.calculateInverses(), I = this.matrixWorld), this.bindMatrix.copy(I), this.bindMatrixInverse.copy(I).invert();
        }
        pose() {
          this.skeleton.pose();
        }
        normalizeSkinWeights() {
          const A = new BI(), I = this.geometry.attributes.skinWeight;
          for (let g = 0, B = I.count; g < B; g++) {
            A.fromBufferAttribute(I, g);
            const Q = 1 / A.manhattanLength();
            Q !== 1 / 0 ? A.multiplyScalar(Q) : A.set(1, 0, 0, 0), I.setXYZW(g, A.x, A.y, A.z, A.w);
          }
        }
        updateMatrixWorld(A) {
          super.updateMatrixWorld(A), this.bindMode === Cs ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === Ih ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
        }
        applyBoneTransform(A, I) {
          const g = this.skeleton, B = this.geometry;
          Fs.fromBufferAttribute(B.attributes.skinIndex, A), Js.fromBufferAttribute(B.attributes.skinWeight, A), Ns.copy(I).applyMatrix4(this.bindMatrix), I.set(0, 0, 0);
          for (let Q = 0; Q < 4; Q++) {
            const E = Js.getComponent(Q);
            if (E !== 0) {
              const i = Fs.getComponent(Q);
              Rs.multiplyMatrices(g.bones[i].matrixWorld, g.boneInverses[i]), I.addScaledVector(tw.copy(Ns).applyMatrix4(Rs), E);
            }
          }
          return I.applyMatrix4(this.bindMatrixInverse);
        }
      }
      class TD extends UI {
        constructor() {
          super(), this.isBone = true, this.type = "Bone";
        }
      }
      class Ce extends uI {
        constructor(A = null, I = 1, g = 1, B, Q, E, i, o, t = og, e = og, s, a) {
          super(null, E, i, o, t, e, B, Q, s, a), this.isDataTexture = true, this.image = {
            data: A,
            width: I,
            height: g
          }, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1;
        }
      }
      const ds = new uA(), sw = new uA();
      class Be {
        constructor(A = [], I = []) {
          this.uuid = Yg(), this.bones = A.slice(0), this.boneInverses = I, this.boneMatrices = null, this.boneTexture = null, this.init();
        }
        init() {
          const A = this.bones, I = this.boneInverses;
          if (this.boneMatrices = new Float32Array(A.length * 16), I.length === 0) this.calculateInverses();
          else if (A.length !== I.length) {
            console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
            for (let g = 0, B = this.bones.length; g < B; g++) this.boneInverses.push(new uA());
          }
        }
        calculateInverses() {
          this.boneInverses.length = 0;
          for (let A = 0, I = this.bones.length; A < I; A++) {
            const g = new uA();
            this.bones[A] && g.copy(this.bones[A].matrixWorld).invert(), this.boneInverses.push(g);
          }
        }
        pose() {
          for (let A = 0, I = this.bones.length; A < I; A++) {
            const g = this.bones[A];
            g && g.matrixWorld.copy(this.boneInverses[A]).invert();
          }
          for (let A = 0, I = this.bones.length; A < I; A++) {
            const g = this.bones[A];
            g && (g.parent && g.parent.isBone ? (g.matrix.copy(g.parent.matrixWorld).invert(), g.matrix.multiply(g.matrixWorld)) : g.matrix.copy(g.matrixWorld), g.matrix.decompose(g.position, g.quaternion, g.scale));
          }
        }
        update() {
          const A = this.bones, I = this.boneInverses, g = this.boneMatrices, B = this.boneTexture;
          for (let Q = 0, E = A.length; Q < E; Q++) {
            const i = A[Q] ? A[Q].matrixWorld : sw;
            ds.multiplyMatrices(i, I[Q]), ds.toArray(g, Q * 16);
          }
          B !== null && (B.needsUpdate = true);
        }
        clone() {
          return new Be(this.bones, this.boneInverses);
        }
        computeBoneTexture() {
          let A = Math.sqrt(this.bones.length * 4);
          A = Math.ceil(A / 4) * 4, A = Math.max(A, 4);
          const I = new Float32Array(A * A * 4);
          I.set(this.boneMatrices);
          const g = new Ce(I, A, A, ag, dg);
          return g.needsUpdate = true, this.boneMatrices = I, this.boneTexture = g, this;
        }
        getBoneByName(A) {
          for (let I = 0, g = this.bones.length; I < g; I++) {
            const B = this.bones[I];
            if (B.name === A) return B;
          }
        }
        dispose() {
          this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
        }
        fromJSON(A, I) {
          this.uuid = A.uuid;
          for (let g = 0, B = A.bones.length; g < B; g++) {
            const Q = A.bones[g];
            let E = I[Q];
            E === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", Q), E = new TD()), this.bones.push(E), this.boneInverses.push(new uA().fromArray(A.boneInverses[g]));
          }
          return this.init(), this;
        }
        toJSON() {
          const A = {
            metadata: {
              version: 4.7,
              type: "Skeleton",
              generator: "Skeleton.toJSON"
            },
            bones: [],
            boneInverses: []
          };
          A.uuid = this.uuid;
          const I = this.bones, g = this.boneInverses;
          for (let B = 0, Q = I.length; B < Q; B++) {
            const E = I[B];
            A.bones.push(E.uuid);
            const i = g[B];
            A.boneInverses.push(i.toArray());
          }
          return A;
        }
      }
      class at extends tg {
        constructor(A, I, g, B = 1) {
          super(A, I, g), this.isInstancedBufferAttribute = true, this.meshPerAttribute = B;
        }
        copy(A) {
          return super.copy(A), this.meshPerAttribute = A.meshPerAttribute, this;
        }
        toJSON() {
          const A = super.toJSON();
          return A.meshPerAttribute = this.meshPerAttribute, A.isInstancedBufferAttribute = true, A;
        }
      }
      const GB = new uA(), Ys = new uA(), aE = [], qs = new Xg(), aw = new uA(), QQ = new ig(), EQ = new zg();
      class Dw extends ig {
        constructor(A, I, g) {
          super(A, I), this.isInstancedMesh = true, this.instanceMatrix = new at(new Float32Array(g * 16), 16), this.instanceColor = null, this.morphTexture = null, this.count = g, this.boundingBox = null, this.boundingSphere = null;
          for (let B = 0; B < g; B++) this.setMatrixAt(B, aw);
        }
        computeBoundingBox() {
          const A = this.geometry, I = this.count;
          this.boundingBox === null && (this.boundingBox = new Xg()), A.boundingBox === null && A.computeBoundingBox(), this.boundingBox.makeEmpty();
          for (let g = 0; g < I; g++) this.getMatrixAt(g, GB), qs.copy(A.boundingBox).applyMatrix4(GB), this.boundingBox.union(qs);
        }
        computeBoundingSphere() {
          const A = this.geometry, I = this.count;
          this.boundingSphere === null && (this.boundingSphere = new zg()), A.boundingSphere === null && A.computeBoundingSphere(), this.boundingSphere.makeEmpty();
          for (let g = 0; g < I; g++) this.getMatrixAt(g, GB), EQ.copy(A.boundingSphere).applyMatrix4(GB), this.boundingSphere.union(EQ);
        }
        copy(A, I) {
          return super.copy(A, I), this.instanceMatrix.copy(A.instanceMatrix), A.morphTexture !== null && (this.morphTexture = A.morphTexture.clone()), A.instanceColor !== null && (this.instanceColor = A.instanceColor.clone()), this.count = A.count, A.boundingBox !== null && (this.boundingBox = A.boundingBox.clone()), A.boundingSphere !== null && (this.boundingSphere = A.boundingSphere.clone()), this;
        }
        getColorAt(A, I) {
          I.fromArray(this.instanceColor.array, A * 3);
        }
        getMatrixAt(A, I) {
          I.fromArray(this.instanceMatrix.array, A * 16);
        }
        getMorphAt(A, I) {
          const g = I.morphTargetInfluences, B = this.morphTexture.source.data.data, Q = g.length + 1, E = A * Q + 1;
          for (let i = 0; i < g.length; i++) g[i] = B[E + i];
        }
        raycast(A, I) {
          const g = this.matrixWorld, B = this.count;
          if (QQ.geometry = this.geometry, QQ.material = this.material, QQ.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), EQ.copy(this.boundingSphere), EQ.applyMatrix4(g), A.ray.intersectsSphere(EQ) !== false)) for (let Q = 0; Q < B; Q++) {
            this.getMatrixAt(Q, GB), Ys.multiplyMatrices(g, GB), QQ.matrixWorld = Ys, QQ.raycast(A, aE);
            for (let E = 0, i = aE.length; E < i; E++) {
              const o = aE[E];
              o.instanceId = Q, o.object = this, I.push(o);
            }
            aE.length = 0;
          }
        }
        setColorAt(A, I) {
          this.instanceColor === null && (this.instanceColor = new at(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3)), I.toArray(this.instanceColor.array, A * 3);
        }
        setMatrixAt(A, I) {
          I.toArray(this.instanceMatrix.array, A * 16);
        }
        setMorphAt(A, I) {
          const g = I.morphTargetInfluences, B = g.length + 1;
          this.morphTexture === null && (this.morphTexture = new Ce(new Float32Array(B * this.count), B, this.count, jt, dg));
          const Q = this.morphTexture.source.data.data;
          let E = 0;
          for (let t = 0; t < g.length; t++) E += g[t];
          const i = this.geometry.morphTargetsRelative ? 1 : 1 - E, o = B * A;
          Q[o] = i, Q.set(g, o + 1);
        }
        updateMorphTargets() {
        }
        dispose() {
          this.dispatchEvent({
            type: "dispose"
          }), this.morphTexture !== null && (this.morphTexture.dispose(), this.morphTexture = null);
        }
      }
      const bi = new J(), nw = new J(), rw = new ZA();
      class ZC {
        constructor(A = new J(1, 0, 0), I = 0) {
          this.isPlane = true, this.normal = A, this.constant = I;
        }
        set(A, I) {
          return this.normal.copy(A), this.constant = I, this;
        }
        setComponents(A, I, g, B) {
          return this.normal.set(A, I, g), this.constant = B, this;
        }
        setFromNormalAndCoplanarPoint(A, I) {
          return this.normal.copy(A), this.constant = -I.dot(this.normal), this;
        }
        setFromCoplanarPoints(A, I, g) {
          const B = bi.subVectors(g, I).cross(nw.subVectors(A, I)).normalize();
          return this.setFromNormalAndCoplanarPoint(B, A), this;
        }
        copy(A) {
          return this.normal.copy(A.normal), this.constant = A.constant, this;
        }
        normalize() {
          const A = 1 / this.normal.length();
          return this.normal.multiplyScalar(A), this.constant *= A, this;
        }
        negate() {
          return this.constant *= -1, this.normal.negate(), this;
        }
        distanceToPoint(A) {
          return this.normal.dot(A) + this.constant;
        }
        distanceToSphere(A) {
          return this.distanceToPoint(A.center) - A.radius;
        }
        projectPoint(A, I) {
          return I.copy(A).addScaledVector(this.normal, -this.distanceToPoint(A));
        }
        intersectLine(A, I) {
          const g = A.delta(bi), B = this.normal.dot(g);
          if (B === 0) return this.distanceToPoint(A.start) === 0 ? I.copy(A.start) : null;
          const Q = -(A.start.dot(this.normal) + this.constant) / B;
          return Q < 0 || Q > 1 ? null : I.copy(A.start).addScaledVector(g, Q);
        }
        intersectsLine(A) {
          const I = this.distanceToPoint(A.start), g = this.distanceToPoint(A.end);
          return I < 0 && g > 0 || g < 0 && I > 0;
        }
        intersectsBox(A) {
          return A.intersectsPlane(this);
        }
        intersectsSphere(A) {
          return A.intersectsPlane(this);
        }
        coplanarPoint(A) {
          return A.copy(this.normal).multiplyScalar(-this.constant);
        }
        applyMatrix4(A, I) {
          const g = I || rw.getNormalMatrix(A), B = this.coplanarPoint(bi).applyMatrix4(A), Q = this.normal.applyMatrix3(g).normalize();
          return this.constant = -B.dot(Q), this;
        }
        translate(A) {
          return this.constant -= A.dot(this.normal), this;
        }
        equals(A) {
          return A.normal.equals(this.normal) && A.constant === this.constant;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      const bC = new zg(), hw = new XA(0.5, 0.5), DE = new J();
      class Qe {
        constructor(A = new ZC(), I = new ZC(), g = new ZC(), B = new ZC(), Q = new ZC(), E = new ZC()) {
          this.planes = [
            A,
            I,
            g,
            B,
            Q,
            E
          ];
        }
        set(A, I, g, B, Q, E) {
          const i = this.planes;
          return i[0].copy(A), i[1].copy(I), i[2].copy(g), i[3].copy(B), i[4].copy(Q), i[5].copy(E), this;
        }
        copy(A) {
          const I = this.planes;
          for (let g = 0; g < 6; g++) I[g].copy(A.planes[g]);
          return this;
        }
        setFromProjectionMatrix(A, I = vg, g = false) {
          const B = this.planes, Q = A.elements, E = Q[0], i = Q[1], o = Q[2], t = Q[3], e = Q[4], s = Q[5], a = Q[6], r = Q[7], c = Q[8], S = Q[9], h = Q[10], D = Q[11], U = Q[12], M = Q[13], k = Q[14], p = Q[15];
          if (B[0].setComponents(t - E, r - e, D - c, p - U).normalize(), B[1].setComponents(t + E, r + e, D + c, p + U).normalize(), B[2].setComponents(t + i, r + s, D + S, p + M).normalize(), B[3].setComponents(t - i, r - s, D - S, p - M).normalize(), g) B[4].setComponents(o, a, h, k).normalize(), B[5].setComponents(t - o, r - a, D - h, p - k).normalize();
          else if (B[4].setComponents(t - o, r - a, D - h, p - k).normalize(), I === vg) B[5].setComponents(t + o, r + a, D + h, p + k).normalize();
          else if (I === HE) B[5].setComponents(o, a, h, k).normalize();
          else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + I);
          return this;
        }
        intersectsObject(A) {
          if (A.boundingSphere !== void 0) A.boundingSphere === null && A.computeBoundingSphere(), bC.copy(A.boundingSphere).applyMatrix4(A.matrixWorld);
          else {
            const I = A.geometry;
            I.boundingSphere === null && I.computeBoundingSphere(), bC.copy(I.boundingSphere).applyMatrix4(A.matrixWorld);
          }
          return this.intersectsSphere(bC);
        }
        intersectsSprite(A) {
          bC.center.set(0, 0, 0);
          const I = hw.distanceTo(A.center);
          return bC.radius = 0.7071067811865476 + I, bC.applyMatrix4(A.matrixWorld), this.intersectsSphere(bC);
        }
        intersectsSphere(A) {
          const I = this.planes, g = A.center, B = -A.radius;
          for (let Q = 0; Q < 6; Q++) if (I[Q].distanceToPoint(g) < B) return false;
          return true;
        }
        intersectsBox(A) {
          const I = this.planes;
          for (let g = 0; g < 6; g++) {
            const B = I[g];
            if (DE.x = B.normal.x > 0 ? A.max.x : A.min.x, DE.y = B.normal.y > 0 ? A.max.y : A.min.y, DE.z = B.normal.z > 0 ? A.max.z : A.min.z, B.distanceToPoint(DE) < 0) return false;
          }
          return true;
        }
        containsPoint(A) {
          const I = this.planes;
          for (let g = 0; g < 6; g++) if (I[g].distanceToPoint(A) < 0) return false;
          return true;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      class Ee extends Pg {
        constructor(A) {
          super(), this.isLineBasicMaterial = true, this.type = "LineBasicMaterial", this.color = new mA(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = true, this.setValues(A);
        }
        copy(A) {
          return super.copy(A), this.color.copy(A.color), this.map = A.map, this.linewidth = A.linewidth, this.linecap = A.linecap, this.linejoin = A.linejoin, this.fog = A.fog, this;
        }
      }
      const mE = new J(), TE = new J(), Ls = new uA(), iQ = new bQ(), nE = new zg(), xi = new J(), fs = new J();
      class ie extends UI {
        constructor(A = new fg(), I = new Ee()) {
          super(), this.isLine = true, this.type = "Line", this.geometry = A, this.material = I, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets();
        }
        copy(A, I) {
          return super.copy(A, I), this.material = Array.isArray(A.material) ? A.material.slice() : A.material, this.geometry = A.geometry, this;
        }
        computeLineDistances() {
          const A = this.geometry;
          if (A.index === null) {
            const I = A.attributes.position, g = [
              0
            ];
            for (let B = 1, Q = I.count; B < Q; B++) mE.fromBufferAttribute(I, B - 1), TE.fromBufferAttribute(I, B), g[B] = g[B - 1], g[B] += mE.distanceTo(TE);
            A.setAttribute("lineDistance", new hC(g, 1));
          } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
          return this;
        }
        raycast(A, I) {
          const g = this.geometry, B = this.matrixWorld, Q = A.params.Line.threshold, E = g.drawRange;
          if (g.boundingSphere === null && g.computeBoundingSphere(), nE.copy(g.boundingSphere), nE.applyMatrix4(B), nE.radius += Q, A.ray.intersectsSphere(nE) === false) return;
          Ls.copy(B).invert(), iQ.copy(A.ray).applyMatrix4(Ls);
          const i = Q / ((this.scale.x + this.scale.y + this.scale.z) / 3), o = i * i, t = this.isLineSegments ? 2 : 1, e = g.index, a = g.attributes.position;
          if (e !== null) {
            const r = Math.max(0, E.start), c = Math.min(e.count, E.start + E.count);
            for (let S = r, h = c - 1; S < h; S += t) {
              const D = e.getX(S), U = e.getX(S + 1), M = rE(this, A, iQ, o, D, U, S);
              M && I.push(M);
            }
            if (this.isLineLoop) {
              const S = e.getX(c - 1), h = e.getX(r), D = rE(this, A, iQ, o, S, h, c - 1);
              D && I.push(D);
            }
          } else {
            const r = Math.max(0, E.start), c = Math.min(a.count, E.start + E.count);
            for (let S = r, h = c - 1; S < h; S += t) {
              const D = rE(this, A, iQ, o, S, S + 1, S);
              D && I.push(D);
            }
            if (this.isLineLoop) {
              const S = rE(this, A, iQ, o, c - 1, r, c - 1);
              S && I.push(S);
            }
          }
        }
        updateMorphTargets() {
          const I = this.geometry.morphAttributes, g = Object.keys(I);
          if (g.length > 0) {
            const B = I[g[0]];
            if (B !== void 0) {
              this.morphTargetInfluences = [], this.morphTargetDictionary = {};
              for (let Q = 0, E = B.length; Q < E; Q++) {
                const i = B[Q].name || String(Q);
                this.morphTargetInfluences.push(0), this.morphTargetDictionary[i] = Q;
              }
            }
          }
        }
      }
      function rE(C, A, I, g, B, Q, E) {
        const i = C.geometry.attributes.position;
        if (mE.fromBufferAttribute(i, B), TE.fromBufferAttribute(i, Q), I.distanceSqToSegment(mE, TE, xi, fs) > g) return;
        xi.applyMatrix4(C.matrixWorld);
        const t = A.ray.origin.distanceTo(xi);
        if (!(t < A.near || t > A.far)) return {
          distance: t,
          point: fs.clone().applyMatrix4(C.matrixWorld),
          index: E,
          face: null,
          faceIndex: null,
          barycoord: null,
          object: C
        };
      }
      const us = new J(), Hs = new J();
      class bD extends ie {
        constructor(A, I) {
          super(A, I), this.isLineSegments = true, this.type = "LineSegments";
        }
        computeLineDistances() {
          const A = this.geometry;
          if (A.index === null) {
            const I = A.attributes.position, g = [];
            for (let B = 0, Q = I.count; B < Q; B += 2) us.fromBufferAttribute(I, B), Hs.fromBufferAttribute(I, B + 1), g[B] = B === 0 ? 0 : g[B - 1], g[B + 1] = g[B] + us.distanceTo(Hs);
            A.setAttribute("lineDistance", new hC(g, 1));
          } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
          return this;
        }
      }
      class ww extends ie {
        constructor(A, I) {
          super(A, I), this.isLineLoop = true, this.type = "LineLoop";
        }
      }
      class xD extends Pg {
        constructor(A) {
          super(), this.isPointsMaterial = true, this.type = "PointsMaterial", this.color = new mA(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = true, this.fog = true, this.setValues(A);
        }
        copy(A) {
          return super.copy(A), this.color.copy(A.color), this.map = A.map, this.alphaMap = A.alphaMap, this.size = A.size, this.sizeAttenuation = A.sizeAttenuation, this.fog = A.fog, this;
        }
      }
      const ms = new uA(), Dt = new bQ(), hE = new zg(), wE = new J();
      class cw extends UI {
        constructor(A = new fg(), I = new xD()) {
          super(), this.isPoints = true, this.type = "Points", this.geometry = A, this.material = I, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets();
        }
        copy(A, I) {
          return super.copy(A, I), this.material = Array.isArray(A.material) ? A.material.slice() : A.material, this.geometry = A.geometry, this;
        }
        raycast(A, I) {
          const g = this.geometry, B = this.matrixWorld, Q = A.params.Points.threshold, E = g.drawRange;
          if (g.boundingSphere === null && g.computeBoundingSphere(), hE.copy(g.boundingSphere), hE.applyMatrix4(B), hE.radius += Q, A.ray.intersectsSphere(hE) === false) return;
          ms.copy(B).invert(), Dt.copy(A.ray).applyMatrix4(ms);
          const i = Q / ((this.scale.x + this.scale.y + this.scale.z) / 3), o = i * i, t = g.index, s = g.attributes.position;
          if (t !== null) {
            const a = Math.max(0, E.start), r = Math.min(t.count, E.start + E.count);
            for (let c = a, S = r; c < S; c++) {
              const h = t.getX(c);
              wE.fromBufferAttribute(s, h), Ts(wE, h, o, B, A, I, this);
            }
          } else {
            const a = Math.max(0, E.start), r = Math.min(s.count, E.start + E.count);
            for (let c = a, S = r; c < S; c++) wE.fromBufferAttribute(s, c), Ts(wE, c, o, B, A, I, this);
          }
        }
        updateMorphTargets() {
          const I = this.geometry.morphAttributes, g = Object.keys(I);
          if (g.length > 0) {
            const B = I[g[0]];
            if (B !== void 0) {
              this.morphTargetInfluences = [], this.morphTargetDictionary = {};
              for (let Q = 0, E = B.length; Q < E; Q++) {
                const i = B[Q].name || String(Q);
                this.morphTargetInfluences.push(0), this.morphTargetDictionary[i] = Q;
              }
            }
          }
        }
      }
      function Ts(C, A, I, g, B, Q, E) {
        const i = Dt.distanceSqToPoint(C);
        if (i < I) {
          const o = new J();
          Dt.closestPointToPoint(C, o), o.applyMatrix4(g);
          const t = B.ray.origin.distanceTo(o);
          if (t < B.near || t > B.far) return;
          Q.push({
            distance: t,
            distanceToRay: Math.sqrt(i),
            point: o,
            index: A,
            face: null,
            faceIndex: null,
            barycoord: null,
            object: E
          });
        }
      }
      class OD extends uI {
        constructor(A, I, g = IB, B, Q, E, i = og, o = og, t, e = MQ, s = 1) {
          if (e !== MQ && e !== KQ) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
          const a = {
            width: A,
            height: I,
            depth: s
          };
          super(a, B, Q, E, i, o, e, g, t), this.isDepthTexture = true, this.flipY = false, this.generateMipmaps = false, this.compareFunction = null;
        }
        copy(A) {
          return super.copy(A), this.source = new Ae(Object.assign({}, A.image)), this.compareFunction = A.compareFunction, this;
        }
        toJSON(A) {
          const I = super.toJSON(A);
          return this.compareFunction !== null && (I.compareFunction = this.compareFunction), I;
        }
      }
      class _D extends uI {
        constructor(A = null) {
          super(), this.sourceTexture = A, this.isExternalTexture = true;
        }
        copy(A) {
          return super.copy(A), this.sourceTexture = A.sourceTexture, this;
        }
      }
      class zE extends fg {
        constructor(A = 1, I = 1, g = 1, B = 1) {
          super(), this.type = "PlaneGeometry", this.parameters = {
            width: A,
            height: I,
            widthSegments: g,
            heightSegments: B
          };
          const Q = A / 2, E = I / 2, i = Math.floor(g), o = Math.floor(B), t = i + 1, e = o + 1, s = A / i, a = I / o, r = [], c = [], S = [], h = [];
          for (let D = 0; D < e; D++) {
            const U = D * a - E;
            for (let M = 0; M < t; M++) {
              const k = M * s - Q;
              c.push(k, -U, 0), S.push(0, 0, 1), h.push(M / i), h.push(1 - D / o);
            }
          }
          for (let D = 0; D < o; D++) for (let U = 0; U < i; U++) {
            const M = U + t * D, k = U + t * (D + 1), p = U + 1 + t * (D + 1), R = U + 1 + t * D;
            r.push(M, k, R), r.push(k, p, R);
          }
          this.setIndex(r), this.setAttribute("position", new hC(c, 3)), this.setAttribute("normal", new hC(S, 3)), this.setAttribute("uv", new hC(h, 2));
        }
        copy(A) {
          return super.copy(A), this.parameters = Object.assign({}, A.parameters), this;
        }
        static fromJSON(A) {
          return new zE(A.width, A.height, A.widthSegments, A.heightSegments);
        }
      }
      class oe extends Pg {
        constructor(A) {
          super(), this.isMeshStandardMaterial = true, this.type = "MeshStandardMaterial", this.defines = {
            STANDARD: ""
          }, this.color = new mA(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new mA(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = JD, this.normalScale = new XA(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new pI(), this.envMapIntensity = 1, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = false, this.fog = true, this.setValues(A);
        }
        copy(A) {
          return super.copy(A), this.defines = {
            STANDARD: ""
          }, this.color.copy(A.color), this.roughness = A.roughness, this.metalness = A.metalness, this.map = A.map, this.lightMap = A.lightMap, this.lightMapIntensity = A.lightMapIntensity, this.aoMap = A.aoMap, this.aoMapIntensity = A.aoMapIntensity, this.emissive.copy(A.emissive), this.emissiveMap = A.emissiveMap, this.emissiveIntensity = A.emissiveIntensity, this.bumpMap = A.bumpMap, this.bumpScale = A.bumpScale, this.normalMap = A.normalMap, this.normalMapType = A.normalMapType, this.normalScale.copy(A.normalScale), this.displacementMap = A.displacementMap, this.displacementScale = A.displacementScale, this.displacementBias = A.displacementBias, this.roughnessMap = A.roughnessMap, this.metalnessMap = A.metalnessMap, this.alphaMap = A.alphaMap, this.envMap = A.envMap, this.envMapRotation.copy(A.envMapRotation), this.envMapIntensity = A.envMapIntensity, this.wireframe = A.wireframe, this.wireframeLinewidth = A.wireframeLinewidth, this.wireframeLinecap = A.wireframeLinecap, this.wireframeLinejoin = A.wireframeLinejoin, this.flatShading = A.flatShading, this.fog = A.fog, this;
        }
      }
      class $g extends oe {
        constructor(A) {
          super(), this.isMeshPhysicalMaterial = true, this.defines = {
            STANDARD: "",
            PHYSICAL: ""
          }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new XA(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
            get: function() {
              return WA(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
            },
            set: function(I) {
              this.ior = (1 + 0.4 * I) / (1 - 0.4 * I);
            }
          }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [
            100,
            400
          ], this.iridescenceThicknessMap = null, this.sheenColor = new mA(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new mA(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new mA(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._dispersion = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(A);
        }
        get anisotropy() {
          return this._anisotropy;
        }
        set anisotropy(A) {
          this._anisotropy > 0 != A > 0 && this.version++, this._anisotropy = A;
        }
        get clearcoat() {
          return this._clearcoat;
        }
        set clearcoat(A) {
          this._clearcoat > 0 != A > 0 && this.version++, this._clearcoat = A;
        }
        get iridescence() {
          return this._iridescence;
        }
        set iridescence(A) {
          this._iridescence > 0 != A > 0 && this.version++, this._iridescence = A;
        }
        get dispersion() {
          return this._dispersion;
        }
        set dispersion(A) {
          this._dispersion > 0 != A > 0 && this.version++, this._dispersion = A;
        }
        get sheen() {
          return this._sheen;
        }
        set sheen(A) {
          this._sheen > 0 != A > 0 && this.version++, this._sheen = A;
        }
        get transmission() {
          return this._transmission;
        }
        set transmission(A) {
          this._transmission > 0 != A > 0 && this.version++, this._transmission = A;
        }
        copy(A) {
          return super.copy(A), this.defines = {
            STANDARD: "",
            PHYSICAL: ""
          }, this.anisotropy = A.anisotropy, this.anisotropyRotation = A.anisotropyRotation, this.anisotropyMap = A.anisotropyMap, this.clearcoat = A.clearcoat, this.clearcoatMap = A.clearcoatMap, this.clearcoatRoughness = A.clearcoatRoughness, this.clearcoatRoughnessMap = A.clearcoatRoughnessMap, this.clearcoatNormalMap = A.clearcoatNormalMap, this.clearcoatNormalScale.copy(A.clearcoatNormalScale), this.dispersion = A.dispersion, this.ior = A.ior, this.iridescence = A.iridescence, this.iridescenceMap = A.iridescenceMap, this.iridescenceIOR = A.iridescenceIOR, this.iridescenceThicknessRange = [
            ...A.iridescenceThicknessRange
          ], this.iridescenceThicknessMap = A.iridescenceThicknessMap, this.sheen = A.sheen, this.sheenColor.copy(A.sheenColor), this.sheenColorMap = A.sheenColorMap, this.sheenRoughness = A.sheenRoughness, this.sheenRoughnessMap = A.sheenRoughnessMap, this.transmission = A.transmission, this.transmissionMap = A.transmissionMap, this.thickness = A.thickness, this.thicknessMap = A.thicknessMap, this.attenuationDistance = A.attenuationDistance, this.attenuationColor.copy(A.attenuationColor), this.specularIntensity = A.specularIntensity, this.specularIntensityMap = A.specularIntensityMap, this.specularColor.copy(A.specularColor), this.specularColorMap = A.specularColorMap, this;
        }
      }
      class Sw extends Pg {
        constructor(A) {
          super(), this.isMeshDepthMaterial = true, this.type = "MeshDepthMaterial", this.depthPacking = Qh, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = false, this.wireframeLinewidth = 1, this.setValues(A);
        }
        copy(A) {
          return super.copy(A), this.depthPacking = A.depthPacking, this.map = A.map, this.alphaMap = A.alphaMap, this.displacementMap = A.displacementMap, this.displacementScale = A.displacementScale, this.displacementBias = A.displacementBias, this.wireframe = A.wireframe, this.wireframeLinewidth = A.wireframeLinewidth, this;
        }
      }
      class lw extends Pg {
        constructor(A) {
          super(), this.isMeshDistanceMaterial = true, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(A);
        }
        copy(A) {
          return super.copy(A), this.map = A.map, this.alphaMap = A.alphaMap, this.displacementMap = A.displacementMap, this.displacementScale = A.displacementScale, this.displacementBias = A.displacementBias, this;
        }
      }
      function cE(C, A) {
        return !C || C.constructor === A ? C : typeof A.BYTES_PER_ELEMENT == "number" ? new A(C) : Array.prototype.slice.call(C);
      }
      function Gw(C) {
        return ArrayBuffer.isView(C) && !(C instanceof DataView);
      }
      function kw(C) {
        function A(B, Q) {
          return C[B] - C[Q];
        }
        const I = C.length, g = new Array(I);
        for (let B = 0; B !== I; ++B) g[B] = B;
        return g.sort(A), g;
      }
      function bs(C, A, I) {
        const g = C.length, B = new C.constructor(g);
        for (let Q = 0, E = 0; E !== g; ++Q) {
          const i = I[Q] * A;
          for (let o = 0; o !== A; ++o) B[E++] = C[i + o];
        }
        return B;
      }
      function ZD(C, A, I, g) {
        let B = 1, Q = C[0];
        for (; Q !== void 0 && Q[g] === void 0; ) Q = C[B++];
        if (Q === void 0) return;
        let E = Q[g];
        if (E !== void 0) if (Array.isArray(E)) do
          E = Q[g], E !== void 0 && (A.push(Q.time), I.push(...E)), Q = C[B++];
        while (Q !== void 0);
        else if (E.toArray !== void 0) do
          E = Q[g], E !== void 0 && (A.push(Q.time), E.toArray(I, I.length)), Q = C[B++];
        while (Q !== void 0);
        else do
          E = Q[g], E !== void 0 && (A.push(Q.time), I.push(E)), Q = C[B++];
        while (Q !== void 0);
      }
      class OQ {
        constructor(A, I, g, B) {
          this.parameterPositions = A, this._cachedIndex = 0, this.resultBuffer = B !== void 0 ? B : new I.constructor(g), this.sampleValues = I, this.valueSize = g, this.settings = null, this.DefaultSettings_ = {};
        }
        evaluate(A) {
          const I = this.parameterPositions;
          let g = this._cachedIndex, B = I[g], Q = I[g - 1];
          g: {
            A: {
              let E;
              I: {
                C: if (!(A < B)) {
                  for (let i = g + 2; ; ) {
                    if (B === void 0) {
                      if (A < Q) break C;
                      return g = I.length, this._cachedIndex = g, this.copySampleValue_(g - 1);
                    }
                    if (g === i) break;
                    if (Q = B, B = I[++g], A < B) break A;
                  }
                  E = I.length;
                  break I;
                }
                if (!(A >= Q)) {
                  const i = I[1];
                  A < i && (g = 2, Q = i);
                  for (let o = g - 2; ; ) {
                    if (Q === void 0) return this._cachedIndex = 0, this.copySampleValue_(0);
                    if (g === o) break;
                    if (B = Q, Q = I[--g - 1], A >= Q) break A;
                  }
                  E = g, g = 0;
                  break I;
                }
                break g;
              }
              for (; g < E; ) {
                const i = g + E >>> 1;
                A < I[i] ? E = i : g = i + 1;
              }
              if (B = I[g], Q = I[g - 1], Q === void 0) return this._cachedIndex = 0, this.copySampleValue_(0);
              if (B === void 0) return g = I.length, this._cachedIndex = g, this.copySampleValue_(g - 1);
            }
            this._cachedIndex = g, this.intervalChanged_(g, Q, B);
          }
          return this.interpolate_(g, Q, A, B);
        }
        getSettings_() {
          return this.settings || this.DefaultSettings_;
        }
        copySampleValue_(A) {
          const I = this.resultBuffer, g = this.sampleValues, B = this.valueSize, Q = A * B;
          for (let E = 0; E !== B; ++E) I[E] = g[Q + E];
          return I;
        }
        interpolate_() {
          throw new Error("call to abstract method");
        }
        intervalChanged_() {
        }
      }
      class yw extends OQ {
        constructor(A, I, g, B) {
          super(A, I, g, B), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
            endingStart: Bs,
            endingEnd: Bs
          };
        }
        intervalChanged_(A, I, g) {
          const B = this.parameterPositions;
          let Q = A - 2, E = A + 1, i = B[Q], o = B[E];
          if (i === void 0) switch (this.getSettings_().endingStart) {
            case Qs:
              Q = A, i = 2 * I - g;
              break;
            case Es:
              Q = B.length - 2, i = I + B[Q] - B[Q + 1];
              break;
            default:
              Q = A, i = g;
          }
          if (o === void 0) switch (this.getSettings_().endingEnd) {
            case Qs:
              E = A, o = 2 * g - I;
              break;
            case Es:
              E = 1, o = g + B[1] - B[0];
              break;
            default:
              E = A - 1, o = I;
          }
          const t = (g - I) * 0.5, e = this.valueSize;
          this._weightPrev = t / (I - i), this._weightNext = t / (o - g), this._offsetPrev = Q * e, this._offsetNext = E * e;
        }
        interpolate_(A, I, g, B) {
          const Q = this.resultBuffer, E = this.sampleValues, i = this.valueSize, o = A * i, t = o - i, e = this._offsetPrev, s = this._offsetNext, a = this._weightPrev, r = this._weightNext, c = (g - I) / (B - I), S = c * c, h = S * c, D = -a * h + 2 * a * S - a * c, U = (1 + a) * h + (-1.5 - 2 * a) * S + (-0.5 + a) * c + 1, M = (-1 - r) * h + (1.5 + r) * S + 0.5 * c, k = r * h - r * S;
          for (let p = 0; p !== i; ++p) Q[p] = D * E[e + p] + U * E[t + p] + M * E[o + p] + k * E[s + p];
          return Q;
        }
      }
      class Mw extends OQ {
        constructor(A, I, g, B) {
          super(A, I, g, B);
        }
        interpolate_(A, I, g, B) {
          const Q = this.resultBuffer, E = this.sampleValues, i = this.valueSize, o = A * i, t = o - i, e = (g - I) / (B - I), s = 1 - e;
          for (let a = 0; a !== i; ++a) Q[a] = E[t + a] * s + E[o + a] * e;
          return Q;
        }
      }
      class Kw extends OQ {
        constructor(A, I, g, B) {
          super(A, I, g, B);
        }
        interpolate_(A) {
          return this.copySampleValue_(A - 1);
        }
      }
      class ug {
        constructor(A, I, g, B) {
          if (A === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
          if (I === void 0 || I.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + A);
          this.name = A, this.times = cE(I, this.TimeBufferType), this.values = cE(g, this.ValueBufferType), this.setInterpolation(B || this.DefaultInterpolation);
        }
        static toJSON(A) {
          const I = A.constructor;
          let g;
          if (I.toJSON !== this.toJSON) g = I.toJSON(A);
          else {
            g = {
              name: A.name,
              times: cE(A.times, Array),
              values: cE(A.values, Array)
            };
            const B = A.getInterpolation();
            B !== A.DefaultInterpolation && (g.interpolation = B);
          }
          return g.type = A.ValueTypeName, g;
        }
        InterpolantFactoryMethodDiscrete(A) {
          return new Kw(this.times, this.values, this.getValueSize(), A);
        }
        InterpolantFactoryMethodLinear(A) {
          return new Mw(this.times, this.values, this.getValueSize(), A);
        }
        InterpolantFactoryMethodSmooth(A) {
          return new yw(this.times, this.values, this.getValueSize(), A);
        }
        setInterpolation(A) {
          let I;
          switch (A) {
            case UQ:
              I = this.InterpolantFactoryMethodDiscrete;
              break;
            case NQ:
              I = this.InterpolantFactoryMethodLinear;
              break;
            case wi:
              I = this.InterpolantFactoryMethodSmooth;
              break;
          }
          if (I === void 0) {
            const g = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
            if (this.createInterpolant === void 0) if (A !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
            else throw new Error(g);
            return console.warn("THREE.KeyframeTrack:", g), this;
          }
          return this.createInterpolant = I, this;
        }
        getInterpolation() {
          switch (this.createInterpolant) {
            case this.InterpolantFactoryMethodDiscrete:
              return UQ;
            case this.InterpolantFactoryMethodLinear:
              return NQ;
            case this.InterpolantFactoryMethodSmooth:
              return wi;
          }
        }
        getValueSize() {
          return this.values.length / this.times.length;
        }
        shift(A) {
          if (A !== 0) {
            const I = this.times;
            for (let g = 0, B = I.length; g !== B; ++g) I[g] += A;
          }
          return this;
        }
        scale(A) {
          if (A !== 1) {
            const I = this.times;
            for (let g = 0, B = I.length; g !== B; ++g) I[g] *= A;
          }
          return this;
        }
        trim(A, I) {
          const g = this.times, B = g.length;
          let Q = 0, E = B - 1;
          for (; Q !== B && g[Q] < A; ) ++Q;
          for (; E !== -1 && g[E] > I; ) --E;
          if (++E, Q !== 0 || E !== B) {
            Q >= E && (E = Math.max(E, 1), Q = E - 1);
            const i = this.getValueSize();
            this.times = g.slice(Q, E), this.values = this.values.slice(Q * i, E * i);
          }
          return this;
        }
        validate() {
          let A = true;
          const I = this.getValueSize();
          I - Math.floor(I) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), A = false);
          const g = this.times, B = this.values, Q = g.length;
          Q === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), A = false);
          let E = null;
          for (let i = 0; i !== Q; i++) {
            const o = g[i];
            if (typeof o == "number" && isNaN(o)) {
              console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, o), A = false;
              break;
            }
            if (E !== null && E > o) {
              console.error("THREE.KeyframeTrack: Out of order keys.", this, i, o, E), A = false;
              break;
            }
            E = o;
          }
          if (B !== void 0 && Gw(B)) for (let i = 0, o = B.length; i !== o; ++i) {
            const t = B[i];
            if (isNaN(t)) {
              console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, t), A = false;
              break;
            }
          }
          return A;
        }
        optimize() {
          const A = this.times.slice(), I = this.values.slice(), g = this.getValueSize(), B = this.getInterpolation() === wi, Q = A.length - 1;
          let E = 1;
          for (let i = 1; i < Q; ++i) {
            let o = false;
            const t = A[i], e = A[i + 1];
            if (t !== e && (i !== 1 || t !== A[0])) if (B) o = true;
            else {
              const s = i * g, a = s - g, r = s + g;
              for (let c = 0; c !== g; ++c) {
                const S = I[s + c];
                if (S !== I[a + c] || S !== I[r + c]) {
                  o = true;
                  break;
                }
              }
            }
            if (o) {
              if (i !== E) {
                A[E] = A[i];
                const s = i * g, a = E * g;
                for (let r = 0; r !== g; ++r) I[a + r] = I[s + r];
              }
              ++E;
            }
          }
          if (Q > 0) {
            A[E] = A[Q];
            for (let i = Q * g, o = E * g, t = 0; t !== g; ++t) I[o + t] = I[i + t];
            ++E;
          }
          return E !== A.length ? (this.times = A.slice(0, E), this.values = I.slice(0, E * g)) : (this.times = A, this.values = I), this;
        }
        clone() {
          const A = this.times.slice(), I = this.values.slice(), g = this.constructor, B = new g(this.name, A, I);
          return B.createInterpolant = this.createInterpolant, B;
        }
      }
      ug.prototype.ValueTypeName = "";
      ug.prototype.TimeBufferType = Float32Array;
      ug.prototype.ValueBufferType = Float32Array;
      ug.prototype.DefaultInterpolation = NQ;
      class WB extends ug {
        constructor(A, I, g) {
          super(A, I, g);
        }
      }
      WB.prototype.ValueTypeName = "bool";
      WB.prototype.ValueBufferType = Array;
      WB.prototype.DefaultInterpolation = UQ;
      WB.prototype.InterpolantFactoryMethodLinear = void 0;
      WB.prototype.InterpolantFactoryMethodSmooth = void 0;
      class vD extends ug {
        constructor(A, I, g, B) {
          super(A, I, g, B);
        }
      }
      vD.prototype.ValueTypeName = "color";
      class TB extends ug {
        constructor(A, I, g, B) {
          super(A, I, g, B);
        }
      }
      TB.prototype.ValueTypeName = "number";
      class Uw extends OQ {
        constructor(A, I, g, B) {
          super(A, I, g, B);
        }
        interpolate_(A, I, g, B) {
          const Q = this.resultBuffer, E = this.sampleValues, i = this.valueSize, o = (g - I) / (B - I);
          let t = A * i;
          for (let e = t + i; t !== e; t += 4) SI.slerpFlat(Q, 0, E, t - i, E, t, o);
          return Q;
        }
      }
      class bB extends ug {
        constructor(A, I, g, B) {
          super(A, I, g, B);
        }
        InterpolantFactoryMethodLinear(A) {
          return new Uw(this.times, this.values, this.getValueSize(), A);
        }
      }
      bB.prototype.ValueTypeName = "quaternion";
      bB.prototype.InterpolantFactoryMethodSmooth = void 0;
      class jB extends ug {
        constructor(A, I, g) {
          super(A, I, g);
        }
      }
      jB.prototype.ValueTypeName = "string";
      jB.prototype.ValueBufferType = Array;
      jB.prototype.DefaultInterpolation = UQ;
      jB.prototype.InterpolantFactoryMethodLinear = void 0;
      jB.prototype.InterpolantFactoryMethodSmooth = void 0;
      class xB extends ug {
        constructor(A, I, g, B) {
          super(A, I, g, B);
        }
      }
      xB.prototype.ValueTypeName = "vector";
      class Nw {
        constructor(A = "", I = -1, g = [], B = Ch) {
          this.name = A, this.tracks = g, this.duration = I, this.blendMode = B, this.uuid = Yg(), this.userData = {}, this.duration < 0 && this.resetDuration();
        }
        static parse(A) {
          const I = [], g = A.tracks, B = 1 / (A.fps || 1);
          for (let E = 0, i = g.length; E !== i; ++E) I.push(Jw(g[E]).scale(B));
          const Q = new this(A.name, A.duration, I, A.blendMode);
          return Q.uuid = A.uuid, Q.userData = JSON.parse(A.userData || "{}"), Q;
        }
        static toJSON(A) {
          const I = [], g = A.tracks, B = {
            name: A.name,
            duration: A.duration,
            tracks: I,
            uuid: A.uuid,
            blendMode: A.blendMode,
            userData: JSON.stringify(A.userData)
          };
          for (let Q = 0, E = g.length; Q !== E; ++Q) I.push(ug.toJSON(g[Q]));
          return B;
        }
        static CreateFromMorphTargetSequence(A, I, g, B) {
          const Q = I.length, E = [];
          for (let i = 0; i < Q; i++) {
            let o = [], t = [];
            o.push((i + Q - 1) % Q, i, (i + 1) % Q), t.push(0, 1, 0);
            const e = kw(o);
            o = bs(o, 1, e), t = bs(t, 1, e), !B && o[0] === 0 && (o.push(Q), t.push(t[0])), E.push(new TB(".morphTargetInfluences[" + I[i].name + "]", o, t).scale(1 / g));
          }
          return new this(A, -1, E);
        }
        static findByName(A, I) {
          let g = A;
          if (!Array.isArray(A)) {
            const B = A;
            g = B.geometry && B.geometry.animations || B.animations;
          }
          for (let B = 0; B < g.length; B++) if (g[B].name === I) return g[B];
          return null;
        }
        static CreateClipsFromMorphTargetSequences(A, I, g) {
          const B = {}, Q = /^([\w-]*?)([\d]+)$/;
          for (let i = 0, o = A.length; i < o; i++) {
            const t = A[i], e = t.name.match(Q);
            if (e && e.length > 1) {
              const s = e[1];
              let a = B[s];
              a || (B[s] = a = []), a.push(t);
            }
          }
          const E = [];
          for (const i in B) E.push(this.CreateFromMorphTargetSequence(i, B[i], I, g));
          return E;
        }
        static parseAnimation(A, I) {
          if (console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"), !A) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
          const g = function(s, a, r, c, S) {
            if (r.length !== 0) {
              const h = [], D = [];
              ZD(r, h, D, c), h.length !== 0 && S.push(new s(a, h, D));
            }
          }, B = [], Q = A.name || "default", E = A.fps || 30, i = A.blendMode;
          let o = A.length || -1;
          const t = A.hierarchy || [];
          for (let s = 0; s < t.length; s++) {
            const a = t[s].keys;
            if (!(!a || a.length === 0)) if (a[0].morphTargets) {
              const r = {};
              let c;
              for (c = 0; c < a.length; c++) if (a[c].morphTargets) for (let S = 0; S < a[c].morphTargets.length; S++) r[a[c].morphTargets[S]] = -1;
              for (const S in r) {
                const h = [], D = [];
                for (let U = 0; U !== a[c].morphTargets.length; ++U) {
                  const M = a[c];
                  h.push(M.time), D.push(M.morphTarget === S ? 1 : 0);
                }
                B.push(new TB(".morphTargetInfluence[" + S + "]", h, D));
              }
              o = r.length * E;
            } else {
              const r = ".bones[" + I[s].name + "]";
              g(xB, r + ".position", a, "pos", B), g(bB, r + ".quaternion", a, "rot", B), g(xB, r + ".scale", a, "scl", B);
            }
          }
          return B.length === 0 ? null : new this(Q, o, B, i);
        }
        resetDuration() {
          const A = this.tracks;
          let I = 0;
          for (let g = 0, B = A.length; g !== B; ++g) {
            const Q = this.tracks[g];
            I = Math.max(I, Q.times[Q.times.length - 1]);
          }
          return this.duration = I, this;
        }
        trim() {
          for (let A = 0; A < this.tracks.length; A++) this.tracks[A].trim(0, this.duration);
          return this;
        }
        validate() {
          let A = true;
          for (let I = 0; I < this.tracks.length; I++) A = A && this.tracks[I].validate();
          return A;
        }
        optimize() {
          for (let A = 0; A < this.tracks.length; A++) this.tracks[A].optimize();
          return this;
        }
        clone() {
          const A = [];
          for (let g = 0; g < this.tracks.length; g++) A.push(this.tracks[g].clone());
          const I = new this.constructor(this.name, this.duration, A, this.blendMode);
          return I.userData = JSON.parse(JSON.stringify(this.userData)), I;
        }
        toJSON() {
          return this.constructor.toJSON(this);
        }
      }
      function Fw(C) {
        switch (C.toLowerCase()) {
          case "scalar":
          case "double":
          case "float":
          case "number":
          case "integer":
            return TB;
          case "vector":
          case "vector2":
          case "vector3":
          case "vector4":
            return xB;
          case "color":
            return vD;
          case "quaternion":
            return bB;
          case "bool":
          case "boolean":
            return WB;
          case "string":
            return jB;
        }
        throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + C);
      }
      function Jw(C) {
        if (C.type === void 0) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
        const A = Fw(C.type);
        if (C.times === void 0) {
          const I = [], g = [];
          ZD(C.keys, I, g, "value"), C.times = I, C.values = g;
        }
        return A.parse !== void 0 ? A.parse(C) : new A(C.name, C.times, C.values, C.interpolation);
      }
      const nC = {
        enabled: false,
        files: {},
        add: function(C, A) {
          this.enabled !== false && (this.files[C] = A);
        },
        get: function(C) {
          if (this.enabled !== false) return this.files[C];
        },
        remove: function(C) {
          delete this.files[C];
        },
        clear: function() {
          this.files = {};
        }
      };
      class Rw {
        constructor(A, I, g) {
          const B = this;
          let Q = false, E = 0, i = 0, o;
          const t = [];
          this.onStart = void 0, this.onLoad = A, this.onProgress = I, this.onError = g, this.abortController = new AbortController(), this.itemStart = function(e) {
            i++, Q === false && B.onStart !== void 0 && B.onStart(e, E, i), Q = true;
          }, this.itemEnd = function(e) {
            E++, B.onProgress !== void 0 && B.onProgress(e, E, i), E === i && (Q = false, B.onLoad !== void 0 && B.onLoad());
          }, this.itemError = function(e) {
            B.onError !== void 0 && B.onError(e);
          }, this.resolveURL = function(e) {
            return o ? o(e) : e;
          }, this.setURLModifier = function(e) {
            return o = e, this;
          }, this.addHandler = function(e, s) {
            return t.push(e, s), this;
          }, this.removeHandler = function(e) {
            const s = t.indexOf(e);
            return s !== -1 && t.splice(s, 2), this;
          }, this.getHandler = function(e) {
            for (let s = 0, a = t.length; s < a; s += 2) {
              const r = t[s], c = t[s + 1];
              if (r.global && (r.lastIndex = 0), r.test(e)) return c;
            }
            return null;
          }, this.abort = function() {
            return this.abortController.abort(), this.abortController = new AbortController(), this;
          };
        }
      }
      const pw = new Rw();
      class EB {
        constructor(A) {
          this.manager = A !== void 0 ? A : pw, this.crossOrigin = "anonymous", this.withCredentials = false, this.path = "", this.resourcePath = "", this.requestHeader = {};
        }
        load() {
        }
        loadAsync(A, I) {
          const g = this;
          return new Promise(function(B, Q) {
            g.load(A, B, I, Q);
          });
        }
        parse() {
        }
        setCrossOrigin(A) {
          return this.crossOrigin = A, this;
        }
        setWithCredentials(A) {
          return this.withCredentials = A, this;
        }
        setPath(A) {
          return this.path = A, this;
        }
        setResourcePath(A) {
          return this.resourcePath = A, this;
        }
        setRequestHeader(A) {
          return this.requestHeader = A, this;
        }
        abort() {
          return this;
        }
      }
      EB.DEFAULT_MATERIAL_NAME = "__DEFAULT";
      const iC = {};
      class dw extends Error {
        constructor(A, I) {
          super(A), this.response = I;
        }
      }
      class te extends EB {
        constructor(A) {
          super(A), this.mimeType = "", this.responseType = "", this._abortController = new AbortController();
        }
        load(A, I, g, B) {
          A === void 0 && (A = ""), this.path !== void 0 && (A = this.path + A), A = this.manager.resolveURL(A);
          const Q = nC.get(`file:${A}`);
          if (Q !== void 0) return this.manager.itemStart(A), setTimeout(() => {
            I && I(Q), this.manager.itemEnd(A);
          }, 0), Q;
          if (iC[A] !== void 0) {
            iC[A].push({
              onLoad: I,
              onProgress: g,
              onError: B
            });
            return;
          }
          iC[A] = [], iC[A].push({
            onLoad: I,
            onProgress: g,
            onError: B
          });
          const E = new Request(A, {
            headers: new Headers(this.requestHeader),
            credentials: this.withCredentials ? "include" : "same-origin",
            signal: typeof AbortSignal.any == "function" ? AbortSignal.any([
              this._abortController.signal,
              this.manager.abortController.signal
            ]) : this._abortController.signal
          }), i = this.mimeType, o = this.responseType;
          fetch(E).then((t) => {
            if (t.status === 200 || t.status === 0) {
              if (t.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || t.body === void 0 || t.body.getReader === void 0) return t;
              const e = iC[A], s = t.body.getReader(), a = t.headers.get("X-File-Size") || t.headers.get("Content-Length"), r = a ? parseInt(a) : 0, c = r !== 0;
              let S = 0;
              const h = new ReadableStream({
                start(D) {
                  U();
                  function U() {
                    s.read().then(({ done: M, value: k }) => {
                      if (M) D.close();
                      else {
                        S += k.byteLength;
                        const p = new ProgressEvent("progress", {
                          lengthComputable: c,
                          loaded: S,
                          total: r
                        });
                        for (let R = 0, Y = e.length; R < Y; R++) {
                          const m = e[R];
                          m.onProgress && m.onProgress(p);
                        }
                        D.enqueue(k), U();
                      }
                    }, (M) => {
                      D.error(M);
                    });
                  }
                }
              });
              return new Response(h);
            } else throw new dw(`fetch for "${t.url}" responded with ${t.status}: ${t.statusText}`, t);
          }).then((t) => {
            switch (o) {
              case "arraybuffer":
                return t.arrayBuffer();
              case "blob":
                return t.blob();
              case "document":
                return t.text().then((e) => new DOMParser().parseFromString(e, i));
              case "json":
                return t.json();
              default:
                if (i === "") return t.text();
                {
                  const s = /charset="?([^;"\s]*)"?/i.exec(i), a = s && s[1] ? s[1].toLowerCase() : void 0, r = new TextDecoder(a);
                  return t.arrayBuffer().then((c) => r.decode(c));
                }
            }
          }).then((t) => {
            nC.add(`file:${A}`, t);
            const e = iC[A];
            delete iC[A];
            for (let s = 0, a = e.length; s < a; s++) {
              const r = e[s];
              r.onLoad && r.onLoad(t);
            }
          }).catch((t) => {
            const e = iC[A];
            if (e === void 0) throw this.manager.itemError(A), t;
            delete iC[A];
            for (let s = 0, a = e.length; s < a; s++) {
              const r = e[s];
              r.onError && r.onError(t);
            }
            this.manager.itemError(A);
          }).finally(() => {
            this.manager.itemEnd(A);
          }), this.manager.itemStart(A);
        }
        setResponseType(A) {
          return this.responseType = A, this;
        }
        setMimeType(A) {
          return this.mimeType = A, this;
        }
        abort() {
          return this._abortController.abort(), this._abortController = new AbortController(), this;
        }
      }
      const kB = /* @__PURE__ */ new WeakMap();
      class Yw extends EB {
        constructor(A) {
          super(A);
        }
        load(A, I, g, B) {
          this.path !== void 0 && (A = this.path + A), A = this.manager.resolveURL(A);
          const Q = this, E = nC.get(`image:${A}`);
          if (E !== void 0) {
            if (E.complete === true) Q.manager.itemStart(A), setTimeout(function() {
              I && I(E), Q.manager.itemEnd(A);
            }, 0);
            else {
              let s = kB.get(E);
              s === void 0 && (s = [], kB.set(E, s)), s.push({
                onLoad: I,
                onError: B
              });
            }
            return E;
          }
          const i = FQ("img");
          function o() {
            e(), I && I(this);
            const s = kB.get(this) || [];
            for (let a = 0; a < s.length; a++) {
              const r = s[a];
              r.onLoad && r.onLoad(this);
            }
            kB.delete(this), Q.manager.itemEnd(A);
          }
          function t(s) {
            e(), B && B(s), nC.remove(`image:${A}`);
            const a = kB.get(this) || [];
            for (let r = 0; r < a.length; r++) {
              const c = a[r];
              c.onError && c.onError(s);
            }
            kB.delete(this), Q.manager.itemError(A), Q.manager.itemEnd(A);
          }
          function e() {
            i.removeEventListener("load", o, false), i.removeEventListener("error", t, false);
          }
          return i.addEventListener("load", o, false), i.addEventListener("error", t, false), A.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (i.crossOrigin = this.crossOrigin), nC.add(`image:${A}`, i), Q.manager.itemStart(A), i.src = A, i;
        }
      }
      class PD extends EB {
        constructor(A) {
          super(A);
        }
        load(A, I, g, B) {
          const Q = new uI(), E = new Yw(this.manager);
          return E.setCrossOrigin(this.crossOrigin), E.setPath(this.path), E.load(A, function(i) {
            Q.image = i, Q.needsUpdate = true, I !== void 0 && I(Q);
          }, g, B), Q;
        }
      }
      class $E extends UI {
        constructor(A, I = 1) {
          super(), this.isLight = true, this.type = "Light", this.color = new mA(A), this.intensity = I;
        }
        dispose() {
        }
        copy(A, I) {
          return super.copy(A, I), this.color.copy(A.color), this.intensity = A.intensity, this;
        }
        toJSON(A) {
          const I = super.toJSON(A);
          return I.object.color = this.color.getHex(), I.object.intensity = this.intensity, this.groundColor !== void 0 && (I.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (I.object.distance = this.distance), this.angle !== void 0 && (I.object.angle = this.angle), this.decay !== void 0 && (I.object.decay = this.decay), this.penumbra !== void 0 && (I.object.penumbra = this.penumbra), this.shadow !== void 0 && (I.object.shadow = this.shadow.toJSON()), this.target !== void 0 && (I.object.target = this.target.uuid), I;
        }
      }
      const Oi = new uA(), xs = new J(), Os = new J();
      class ee {
        constructor(A) {
          this.camera = A, this.intensity = 1, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new XA(512, 512), this.mapType = jg, this.map = null, this.mapPass = null, this.matrix = new uA(), this.autoUpdate = true, this.needsUpdate = false, this._frustum = new Qe(), this._frameExtents = new XA(1, 1), this._viewportCount = 1, this._viewports = [
            new BI(0, 0, 1, 1)
          ];
        }
        getViewportCount() {
          return this._viewportCount;
        }
        getFrustum() {
          return this._frustum;
        }
        updateMatrices(A) {
          const I = this.camera, g = this.matrix;
          xs.setFromMatrixPosition(A.matrixWorld), I.position.copy(xs), Os.setFromMatrixPosition(A.target.matrixWorld), I.lookAt(Os), I.updateMatrixWorld(), Oi.multiplyMatrices(I.projectionMatrix, I.matrixWorldInverse), this._frustum.setFromProjectionMatrix(Oi, I.coordinateSystem, I.reversedDepth), I.reversedDepth ? g.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 1, 0, 0, 0, 0, 1) : g.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1), g.multiply(Oi);
        }
        getViewport(A) {
          return this._viewports[A];
        }
        getFrameExtents() {
          return this._frameExtents;
        }
        dispose() {
          this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
        }
        copy(A) {
          return this.camera = A.camera.clone(), this.intensity = A.intensity, this.bias = A.bias, this.radius = A.radius, this.autoUpdate = A.autoUpdate, this.needsUpdate = A.needsUpdate, this.normalBias = A.normalBias, this.blurSamples = A.blurSamples, this.mapSize.copy(A.mapSize), this;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        toJSON() {
          const A = {};
          return this.intensity !== 1 && (A.intensity = this.intensity), this.bias !== 0 && (A.bias = this.bias), this.normalBias !== 0 && (A.normalBias = this.normalBias), this.radius !== 1 && (A.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (A.mapSize = this.mapSize.toArray()), A.camera = this.camera.toJSON(false).object, delete A.camera.matrix, A;
        }
      }
      class qw extends ee {
        constructor() {
          super(new Qg(50, 1, 0.5, 500)), this.isSpotLightShadow = true, this.focus = 1, this.aspect = 1;
        }
        updateMatrices(A) {
          const I = this.camera, g = HB * 2 * A.angle * this.focus, B = this.mapSize.width / this.mapSize.height * this.aspect, Q = A.distance || I.far;
          (g !== I.fov || B !== I.aspect || Q !== I.far) && (I.fov = g, I.aspect = B, I.far = Q, I.updateProjectionMatrix()), super.updateMatrices(A);
        }
        copy(A) {
          return super.copy(A), this.focus = A.focus, this;
        }
      }
      class Lw extends $E {
        constructor(A, I, g = 0, B = Math.PI / 3, Q = 0, E = 2) {
          super(A, I), this.isSpotLight = true, this.type = "SpotLight", this.position.copy(UI.DEFAULT_UP), this.updateMatrix(), this.target = new UI(), this.distance = g, this.angle = B, this.penumbra = Q, this.decay = E, this.map = null, this.shadow = new qw();
        }
        get power() {
          return this.intensity * Math.PI;
        }
        set power(A) {
          this.intensity = A / Math.PI;
        }
        dispose() {
          this.shadow.dispose();
        }
        copy(A, I) {
          return super.copy(A, I), this.distance = A.distance, this.angle = A.angle, this.penumbra = A.penumbra, this.decay = A.decay, this.target = A.target.clone(), this.shadow = A.shadow.clone(), this;
        }
      }
      const _s = new uA(), oQ = new J(), _i = new J();
      class fw extends ee {
        constructor() {
          super(new Qg(90, 1, 0.5, 500)), this.isPointLightShadow = true, this._frameExtents = new XA(4, 2), this._viewportCount = 6, this._viewports = [
            new BI(2, 1, 1, 1),
            new BI(0, 1, 1, 1),
            new BI(3, 1, 1, 1),
            new BI(1, 1, 1, 1),
            new BI(3, 0, 1, 1),
            new BI(1, 0, 1, 1)
          ], this._cubeDirections = [
            new J(1, 0, 0),
            new J(-1, 0, 0),
            new J(0, 0, 1),
            new J(0, 0, -1),
            new J(0, 1, 0),
            new J(0, -1, 0)
          ], this._cubeUps = [
            new J(0, 1, 0),
            new J(0, 1, 0),
            new J(0, 1, 0),
            new J(0, 1, 0),
            new J(0, 0, 1),
            new J(0, 0, -1)
          ];
        }
        updateMatrices(A, I = 0) {
          const g = this.camera, B = this.matrix, Q = A.distance || g.far;
          Q !== g.far && (g.far = Q, g.updateProjectionMatrix()), oQ.setFromMatrixPosition(A.matrixWorld), g.position.copy(oQ), _i.copy(g.position), _i.add(this._cubeDirections[I]), g.up.copy(this._cubeUps[I]), g.lookAt(_i), g.updateMatrixWorld(), B.makeTranslation(-oQ.x, -oQ.y, -oQ.z), _s.multiplyMatrices(g.projectionMatrix, g.matrixWorldInverse), this._frustum.setFromProjectionMatrix(_s, g.coordinateSystem, g.reversedDepth);
        }
      }
      class uw extends $E {
        constructor(A, I, g = 0, B = 2) {
          super(A, I), this.isPointLight = true, this.type = "PointLight", this.distance = g, this.decay = B, this.shadow = new fw();
        }
        get power() {
          return this.intensity * 4 * Math.PI;
        }
        set power(A) {
          this.intensity = A / (4 * Math.PI);
        }
        dispose() {
          this.shadow.dispose();
        }
        copy(A, I) {
          return super.copy(A, I), this.distance = A.distance, this.decay = A.decay, this.shadow = A.shadow.clone(), this;
        }
      }
      class se extends HD {
        constructor(A = -1, I = 1, g = 1, B = -1, Q = 0.1, E = 2e3) {
          super(), this.isOrthographicCamera = true, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = A, this.right = I, this.top = g, this.bottom = B, this.near = Q, this.far = E, this.updateProjectionMatrix();
        }
        copy(A, I) {
          return super.copy(A, I), this.left = A.left, this.right = A.right, this.top = A.top, this.bottom = A.bottom, this.near = A.near, this.far = A.far, this.zoom = A.zoom, this.view = A.view === null ? null : Object.assign({}, A.view), this;
        }
        setViewOffset(A, I, g, B, Q, E) {
          this.view === null && (this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
          }), this.view.enabled = true, this.view.fullWidth = A, this.view.fullHeight = I, this.view.offsetX = g, this.view.offsetY = B, this.view.width = Q, this.view.height = E, this.updateProjectionMatrix();
        }
        clearViewOffset() {
          this.view !== null && (this.view.enabled = false), this.updateProjectionMatrix();
        }
        updateProjectionMatrix() {
          const A = (this.right - this.left) / (2 * this.zoom), I = (this.top - this.bottom) / (2 * this.zoom), g = (this.right + this.left) / 2, B = (this.top + this.bottom) / 2;
          let Q = g - A, E = g + A, i = B + I, o = B - I;
          if (this.view !== null && this.view.enabled) {
            const t = (this.right - this.left) / this.view.fullWidth / this.zoom, e = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            Q += t * this.view.offsetX, E = Q + t * this.view.width, i -= e * this.view.offsetY, o = i - e * this.view.height;
          }
          this.projectionMatrix.makeOrthographic(Q, E, i, o, this.near, this.far, this.coordinateSystem, this.reversedDepth), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        }
        toJSON(A) {
          const I = super.toJSON(A);
          return I.object.zoom = this.zoom, I.object.left = this.left, I.object.right = this.right, I.object.top = this.top, I.object.bottom = this.bottom, I.object.near = this.near, I.object.far = this.far, this.view !== null && (I.object.view = Object.assign({}, this.view)), I;
        }
      }
      class Hw extends ee {
        constructor() {
          super(new se(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = true;
        }
      }
      class WD extends $E {
        constructor(A, I) {
          super(A, I), this.isDirectionalLight = true, this.type = "DirectionalLight", this.position.copy(UI.DEFAULT_UP), this.updateMatrix(), this.target = new UI(), this.shadow = new Hw();
        }
        dispose() {
          this.shadow.dispose();
        }
        copy(A) {
          return super.copy(A), this.target = A.target.clone(), this.shadow = A.shadow.clone(), this;
        }
      }
      class mw extends $E {
        constructor(A, I) {
          super(A, I), this.isAmbientLight = true, this.type = "AmbientLight";
        }
      }
      class wQ {
        static extractUrlBase(A) {
          const I = A.lastIndexOf("/");
          return I === -1 ? "./" : A.slice(0, I + 1);
        }
        static resolveURL(A, I) {
          return typeof A != "string" || A === "" ? "" : (/^https?:\/\//i.test(I) && /^\//.test(A) && (I = I.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(A) || /^data:.*,.*$/i.test(A) || /^blob:.*$/i.test(A) ? A : I + A);
        }
      }
      const Zi = /* @__PURE__ */ new WeakMap();
      class Tw extends EB {
        constructor(A) {
          super(A), this.isImageBitmapLoader = true, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = {
            premultiplyAlpha: "none"
          }, this._abortController = new AbortController();
        }
        setOptions(A) {
          return this.options = A, this;
        }
        load(A, I, g, B) {
          A === void 0 && (A = ""), this.path !== void 0 && (A = this.path + A), A = this.manager.resolveURL(A);
          const Q = this, E = nC.get(`image-bitmap:${A}`);
          if (E !== void 0) {
            if (Q.manager.itemStart(A), E.then) {
              E.then((t) => {
                if (Zi.has(E) === true) B && B(Zi.get(E)), Q.manager.itemError(A), Q.manager.itemEnd(A);
                else return I && I(t), Q.manager.itemEnd(A), t;
              });
              return;
            }
            return setTimeout(function() {
              I && I(E), Q.manager.itemEnd(A);
            }, 0), E;
          }
          const i = {};
          i.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", i.headers = this.requestHeader, i.signal = typeof AbortSignal.any == "function" ? AbortSignal.any([
            this._abortController.signal,
            this.manager.abortController.signal
          ]) : this._abortController.signal;
          const o = fetch(A, i).then(function(t) {
            return t.blob();
          }).then(function(t) {
            return createImageBitmap(t, Object.assign(Q.options, {
              colorSpaceConversion: "none"
            }));
          }).then(function(t) {
            return nC.add(`image-bitmap:${A}`, t), I && I(t), Q.manager.itemEnd(A), t;
          }).catch(function(t) {
            B && B(t), Zi.set(o, t), nC.remove(`image-bitmap:${A}`), Q.manager.itemError(A), Q.manager.itemEnd(A);
          });
          nC.add(`image-bitmap:${A}`, o), Q.manager.itemStart(A);
        }
        abort() {
          return this._abortController.abort(), this._abortController = new AbortController(), this;
        }
      }
      class bw extends Qg {
        constructor(A = []) {
          super(), this.isArrayCamera = true, this.isMultiViewCamera = false, this.cameras = A;
        }
      }
      class xw {
        constructor(A = true) {
          this.autoStart = A, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = false;
        }
        start() {
          this.startTime = performance.now(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = true;
        }
        stop() {
          this.getElapsedTime(), this.running = false, this.autoStart = false;
        }
        getElapsedTime() {
          return this.getDelta(), this.elapsedTime;
        }
        getDelta() {
          let A = 0;
          if (this.autoStart && !this.running) return this.start(), 0;
          if (this.running) {
            const I = performance.now();
            A = (I - this.oldTime) / 1e3, this.oldTime = I, this.elapsedTime += A;
          }
          return A;
        }
      }
      const ae = "\\[\\]\\.:\\/", Ow = new RegExp("[" + ae + "]", "g"), De = "[^" + ae + "]", _w = "[^" + ae.replace("\\.", "") + "]", Zw = /((?:WC+[\/:])*)/.source.replace("WC", De), vw = /(WCOD+)?/.source.replace("WCOD", _w), Pw = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", De), Ww = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", De), jw = new RegExp("^" + Zw + vw + Pw + Ww + "$"), Vw = [
        "material",
        "materials",
        "bones",
        "map"
      ];
      class Xw {
        constructor(A, I, g) {
          const B = g || oI.parseTrackName(I);
          this._targetGroup = A, this._bindings = A.subscribe_(I, B);
        }
        getValue(A, I) {
          this.bind();
          const g = this._targetGroup.nCachedObjects_, B = this._bindings[g];
          B !== void 0 && B.getValue(A, I);
        }
        setValue(A, I) {
          const g = this._bindings;
          for (let B = this._targetGroup.nCachedObjects_, Q = g.length; B !== Q; ++B) g[B].setValue(A, I);
        }
        bind() {
          const A = this._bindings;
          for (let I = this._targetGroup.nCachedObjects_, g = A.length; I !== g; ++I) A[I].bind();
        }
        unbind() {
          const A = this._bindings;
          for (let I = this._targetGroup.nCachedObjects_, g = A.length; I !== g; ++I) A[I].unbind();
        }
      }
      class oI {
        constructor(A, I, g) {
          this.path = I, this.parsedPath = g || oI.parseTrackName(I), this.node = oI.findNode(A, this.parsedPath.nodeName), this.rootNode = A, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
        }
        static create(A, I, g) {
          return A && A.isAnimationObjectGroup ? new oI.Composite(A, I, g) : new oI(A, I, g);
        }
        static sanitizeNodeName(A) {
          return A.replace(/\s/g, "_").replace(Ow, "");
        }
        static parseTrackName(A) {
          const I = jw.exec(A);
          if (I === null) throw new Error("PropertyBinding: Cannot parse trackName: " + A);
          const g = {
            nodeName: I[2],
            objectName: I[3],
            objectIndex: I[4],
            propertyName: I[5],
            propertyIndex: I[6]
          }, B = g.nodeName && g.nodeName.lastIndexOf(".");
          if (B !== void 0 && B !== -1) {
            const Q = g.nodeName.substring(B + 1);
            Vw.indexOf(Q) !== -1 && (g.nodeName = g.nodeName.substring(0, B), g.objectName = Q);
          }
          if (g.propertyName === null || g.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + A);
          return g;
        }
        static findNode(A, I) {
          if (I === void 0 || I === "" || I === "." || I === -1 || I === A.name || I === A.uuid) return A;
          if (A.skeleton) {
            const g = A.skeleton.getBoneByName(I);
            if (g !== void 0) return g;
          }
          if (A.children) {
            const g = function(Q) {
              for (let E = 0; E < Q.length; E++) {
                const i = Q[E];
                if (i.name === I || i.uuid === I) return i;
                const o = g(i.children);
                if (o) return o;
              }
              return null;
            }, B = g(A.children);
            if (B) return B;
          }
          return null;
        }
        _getValue_unavailable() {
        }
        _setValue_unavailable() {
        }
        _getValue_direct(A, I) {
          A[I] = this.targetObject[this.propertyName];
        }
        _getValue_array(A, I) {
          const g = this.resolvedProperty;
          for (let B = 0, Q = g.length; B !== Q; ++B) A[I++] = g[B];
        }
        _getValue_arrayElement(A, I) {
          A[I] = this.resolvedProperty[this.propertyIndex];
        }
        _getValue_toArray(A, I) {
          this.resolvedProperty.toArray(A, I);
        }
        _setValue_direct(A, I) {
          this.targetObject[this.propertyName] = A[I];
        }
        _setValue_direct_setNeedsUpdate(A, I) {
          this.targetObject[this.propertyName] = A[I], this.targetObject.needsUpdate = true;
        }
        _setValue_direct_setMatrixWorldNeedsUpdate(A, I) {
          this.targetObject[this.propertyName] = A[I], this.targetObject.matrixWorldNeedsUpdate = true;
        }
        _setValue_array(A, I) {
          const g = this.resolvedProperty;
          for (let B = 0, Q = g.length; B !== Q; ++B) g[B] = A[I++];
        }
        _setValue_array_setNeedsUpdate(A, I) {
          const g = this.resolvedProperty;
          for (let B = 0, Q = g.length; B !== Q; ++B) g[B] = A[I++];
          this.targetObject.needsUpdate = true;
        }
        _setValue_array_setMatrixWorldNeedsUpdate(A, I) {
          const g = this.resolvedProperty;
          for (let B = 0, Q = g.length; B !== Q; ++B) g[B] = A[I++];
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
        _setValue_arrayElement(A, I) {
          this.resolvedProperty[this.propertyIndex] = A[I];
        }
        _setValue_arrayElement_setNeedsUpdate(A, I) {
          this.resolvedProperty[this.propertyIndex] = A[I], this.targetObject.needsUpdate = true;
        }
        _setValue_arrayElement_setMatrixWorldNeedsUpdate(A, I) {
          this.resolvedProperty[this.propertyIndex] = A[I], this.targetObject.matrixWorldNeedsUpdate = true;
        }
        _setValue_fromArray(A, I) {
          this.resolvedProperty.fromArray(A, I);
        }
        _setValue_fromArray_setNeedsUpdate(A, I) {
          this.resolvedProperty.fromArray(A, I), this.targetObject.needsUpdate = true;
        }
        _setValue_fromArray_setMatrixWorldNeedsUpdate(A, I) {
          this.resolvedProperty.fromArray(A, I), this.targetObject.matrixWorldNeedsUpdate = true;
        }
        _getValue_unbound(A, I) {
          this.bind(), this.getValue(A, I);
        }
        _setValue_unbound(A, I) {
          this.bind(), this.setValue(A, I);
        }
        bind() {
          let A = this.node;
          const I = this.parsedPath, g = I.objectName, B = I.propertyName;
          let Q = I.propertyIndex;
          if (A || (A = oI.findNode(this.rootNode, I.nodeName), this.node = A), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !A) {
            console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
            return;
          }
          if (g) {
            let t = I.objectIndex;
            switch (g) {
              case "materials":
                if (!A.material) {
                  console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                  return;
                }
                if (!A.material.materials) {
                  console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                  return;
                }
                A = A.material.materials;
                break;
              case "bones":
                if (!A.skeleton) {
                  console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                  return;
                }
                A = A.skeleton.bones;
                for (let e = 0; e < A.length; e++) if (A[e].name === t) {
                  t = e;
                  break;
                }
                break;
              case "map":
                if ("map" in A) {
                  A = A.map;
                  break;
                }
                if (!A.material) {
                  console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                  return;
                }
                if (!A.material.map) {
                  console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
                  return;
                }
                A = A.material.map;
                break;
              default:
                if (A[g] === void 0) {
                  console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                  return;
                }
                A = A[g];
            }
            if (t !== void 0) {
              if (A[t] === void 0) {
                console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, A);
                return;
              }
              A = A[t];
            }
          }
          const E = A[B];
          if (E === void 0) {
            const t = I.nodeName;
            console.error("THREE.PropertyBinding: Trying to update property for track: " + t + "." + B + " but it wasn't found.", A);
            return;
          }
          let i = this.Versioning.None;
          this.targetObject = A, A.isMaterial === true ? i = this.Versioning.NeedsUpdate : A.isObject3D === true && (i = this.Versioning.MatrixWorldNeedsUpdate);
          let o = this.BindingType.Direct;
          if (Q !== void 0) {
            if (B === "morphTargetInfluences") {
              if (!A.geometry) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                return;
              }
              if (!A.geometry.morphAttributes) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                return;
              }
              A.morphTargetDictionary[Q] !== void 0 && (Q = A.morphTargetDictionary[Q]);
            }
            o = this.BindingType.ArrayElement, this.resolvedProperty = E, this.propertyIndex = Q;
          } else E.fromArray !== void 0 && E.toArray !== void 0 ? (o = this.BindingType.HasFromToArray, this.resolvedProperty = E) : Array.isArray(E) ? (o = this.BindingType.EntireArray, this.resolvedProperty = E) : this.propertyName = B;
          this.getValue = this.GetterByBindingType[o], this.setValue = this.SetterByBindingTypeAndVersioning[o][i];
        }
        unbind() {
          this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
        }
      }
      oI.Composite = Xw;
      oI.prototype.BindingType = {
        Direct: 0,
        EntireArray: 1,
        ArrayElement: 2,
        HasFromToArray: 3
      };
      oI.prototype.Versioning = {
        None: 0,
        NeedsUpdate: 1,
        MatrixWorldNeedsUpdate: 2
      };
      oI.prototype.GetterByBindingType = [
        oI.prototype._getValue_direct,
        oI.prototype._getValue_array,
        oI.prototype._getValue_arrayElement,
        oI.prototype._getValue_toArray
      ];
      oI.prototype.SetterByBindingTypeAndVersioning = [
        [
          oI.prototype._setValue_direct,
          oI.prototype._setValue_direct_setNeedsUpdate,
          oI.prototype._setValue_direct_setMatrixWorldNeedsUpdate
        ],
        [
          oI.prototype._setValue_array,
          oI.prototype._setValue_array_setNeedsUpdate,
          oI.prototype._setValue_array_setMatrixWorldNeedsUpdate
        ],
        [
          oI.prototype._setValue_arrayElement,
          oI.prototype._setValue_arrayElement_setNeedsUpdate,
          oI.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
        ],
        [
          oI.prototype._setValue_fromArray,
          oI.prototype._setValue_fromArray_setNeedsUpdate,
          oI.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
        ]
      ];
      const Zs = new uA();
      class zw {
        constructor(A, I, g = 0, B = 1 / 0) {
          this.ray = new bQ(A, I), this.near = g, this.far = B, this.camera = null, this.layers = new Ie(), this.params = {
            Mesh: {},
            Line: {
              threshold: 1
            },
            LOD: {},
            Points: {
              threshold: 1
            },
            Sprite: {}
          };
        }
        set(A, I) {
          this.ray.set(A, I);
        }
        setFromCamera(A, I) {
          I.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(I.matrixWorld), this.ray.direction.set(A.x, A.y, 0.5).unproject(I).sub(this.ray.origin).normalize(), this.camera = I) : I.isOrthographicCamera ? (this.ray.origin.set(A.x, A.y, (I.near + I.far) / (I.near - I.far)).unproject(I), this.ray.direction.set(0, 0, -1).transformDirection(I.matrixWorld), this.camera = I) : console.error("THREE.Raycaster: Unsupported camera type: " + I.type);
        }
        setFromXRController(A) {
          return Zs.identity().extractRotation(A.matrixWorld), this.ray.origin.setFromMatrixPosition(A.matrixWorld), this.ray.direction.set(0, 0, -1).applyMatrix4(Zs), this;
        }
        intersectObject(A, I = true, g = []) {
          return nt(A, this, g, I), g.sort(vs), g;
        }
        intersectObjects(A, I = true, g = []) {
          for (let B = 0, Q = A.length; B < Q; B++) nt(A[B], this, g, I);
          return g.sort(vs), g;
        }
      }
      function vs(C, A) {
        return C.distance - A.distance;
      }
      function nt(C, A, I, g) {
        let B = true;
        if (C.layers.test(A.layers) && C.raycast(A, I) === false && (B = false), B === true && g === true) {
          const Q = C.children;
          for (let E = 0, i = Q.length; E < i; E++) nt(Q[E], A, I, true);
        }
      }
      function Ps(C, A, I, g) {
        const B = $w(g);
        switch (I) {
          case KD:
            return C * A;
          case jt:
            return C * A / B.components * B.byteLength;
          case Vt:
            return C * A / B.components * B.byteLength;
          case ND:
            return C * A * 2 / B.components * B.byteLength;
          case Xt:
            return C * A * 2 / B.components * B.byteLength;
          case UD:
            return C * A * 3 / B.components * B.byteLength;
          case ag:
            return C * A * 4 / B.components * B.byteLength;
          case zt:
            return C * A * 4 / B.components * B.byteLength;
          case FE:
          case JE:
            return Math.floor((C + 3) / 4) * Math.floor((A + 3) / 4) * 8;
          case RE:
          case pE:
            return Math.floor((C + 3) / 4) * Math.floor((A + 3) / 4) * 16;
          case uo:
          case mo:
            return Math.max(C, 16) * Math.max(A, 8) / 4;
          case fo:
          case Ho:
            return Math.max(C, 8) * Math.max(A, 8) / 2;
          case To:
          case bo:
            return Math.floor((C + 3) / 4) * Math.floor((A + 3) / 4) * 8;
          case xo:
            return Math.floor((C + 3) / 4) * Math.floor((A + 3) / 4) * 16;
          case Oo:
            return Math.floor((C + 3) / 4) * Math.floor((A + 3) / 4) * 16;
          case _o:
            return Math.floor((C + 4) / 5) * Math.floor((A + 3) / 4) * 16;
          case Zo:
            return Math.floor((C + 4) / 5) * Math.floor((A + 4) / 5) * 16;
          case vo:
            return Math.floor((C + 5) / 6) * Math.floor((A + 4) / 5) * 16;
          case Po:
            return Math.floor((C + 5) / 6) * Math.floor((A + 5) / 6) * 16;
          case Wo:
            return Math.floor((C + 7) / 8) * Math.floor((A + 4) / 5) * 16;
          case jo:
            return Math.floor((C + 7) / 8) * Math.floor((A + 5) / 6) * 16;
          case Vo:
            return Math.floor((C + 7) / 8) * Math.floor((A + 7) / 8) * 16;
          case Xo:
            return Math.floor((C + 9) / 10) * Math.floor((A + 4) / 5) * 16;
          case zo:
            return Math.floor((C + 9) / 10) * Math.floor((A + 5) / 6) * 16;
          case $o:
            return Math.floor((C + 9) / 10) * Math.floor((A + 7) / 8) * 16;
          case At:
            return Math.floor((C + 9) / 10) * Math.floor((A + 9) / 10) * 16;
          case It:
            return Math.floor((C + 11) / 12) * Math.floor((A + 9) / 10) * 16;
          case gt:
            return Math.floor((C + 11) / 12) * Math.floor((A + 11) / 12) * 16;
          case Ct:
          case Bt:
          case Qt:
            return Math.ceil(C / 4) * Math.ceil(A / 4) * 16;
          case Et:
          case it:
            return Math.ceil(C / 4) * Math.ceil(A / 4) * 8;
          case ot:
          case tt:
            return Math.ceil(C / 4) * Math.ceil(A / 4) * 16;
        }
        throw new Error(`Unable to determine texture byte length for ${I} format.`);
      }
      function $w(C) {
        switch (C) {
          case jg:
          case GD:
            return {
              byteLength: 1,
              components: 1
            };
          case kQ:
          case kD:
          case DC:
            return {
              byteLength: 2,
              components: 1
            };
          case Pt:
          case Wt:
            return {
              byteLength: 2,
              components: 4
            };
          case IB:
          case vt:
          case dg:
            return {
              byteLength: 4,
              components: 1
            };
          case yD:
          case MD:
            return {
              byteLength: 4,
              components: 3
            };
        }
        throw new Error(`Unknown texture type ${C}.`);
      }
      typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
        detail: {
          revision: _t
        }
      }));
      typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = _t);
      function jD() {
        let C = null, A = false, I = null, g = null;
        function B(Q, E) {
          I(Q, E), g = C.requestAnimationFrame(B);
        }
        return {
          start: function() {
            A !== true && I !== null && (g = C.requestAnimationFrame(B), A = true);
          },
          stop: function() {
            C.cancelAnimationFrame(g), A = false;
          },
          setAnimationLoop: function(Q) {
            I = Q;
          },
          setContext: function(Q) {
            C = Q;
          }
        };
      }
      function Ac(C) {
        const A = /* @__PURE__ */ new WeakMap();
        function I(i, o) {
          const t = i.array, e = i.usage, s = t.byteLength, a = C.createBuffer();
          C.bindBuffer(o, a), C.bufferData(o, t, e), i.onUploadCallback();
          let r;
          if (t instanceof Float32Array) r = C.FLOAT;
          else if (typeof Float16Array < "u" && t instanceof Float16Array) r = C.HALF_FLOAT;
          else if (t instanceof Uint16Array) i.isFloat16BufferAttribute ? r = C.HALF_FLOAT : r = C.UNSIGNED_SHORT;
          else if (t instanceof Int16Array) r = C.SHORT;
          else if (t instanceof Uint32Array) r = C.UNSIGNED_INT;
          else if (t instanceof Int32Array) r = C.INT;
          else if (t instanceof Int8Array) r = C.BYTE;
          else if (t instanceof Uint8Array) r = C.UNSIGNED_BYTE;
          else if (t instanceof Uint8ClampedArray) r = C.UNSIGNED_BYTE;
          else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + t);
          return {
            buffer: a,
            type: r,
            bytesPerElement: t.BYTES_PER_ELEMENT,
            version: i.version,
            size: s
          };
        }
        function g(i, o, t) {
          const e = o.array, s = o.updateRanges;
          if (C.bindBuffer(t, i), s.length === 0) C.bufferSubData(t, 0, e);
          else {
            s.sort((r, c) => r.start - c.start);
            let a = 0;
            for (let r = 1; r < s.length; r++) {
              const c = s[a], S = s[r];
              S.start <= c.start + c.count + 1 ? c.count = Math.max(c.count, S.start + S.count - c.start) : (++a, s[a] = S);
            }
            s.length = a + 1;
            for (let r = 0, c = s.length; r < c; r++) {
              const S = s[r];
              C.bufferSubData(t, S.start * e.BYTES_PER_ELEMENT, e, S.start, S.count);
            }
            o.clearUpdateRanges();
          }
          o.onUploadCallback();
        }
        function B(i) {
          return i.isInterleavedBufferAttribute && (i = i.data), A.get(i);
        }
        function Q(i) {
          i.isInterleavedBufferAttribute && (i = i.data);
          const o = A.get(i);
          o && (C.deleteBuffer(o.buffer), A.delete(i));
        }
        function E(i, o) {
          if (i.isInterleavedBufferAttribute && (i = i.data), i.isGLBufferAttribute) {
            const e = A.get(i);
            (!e || e.version < i.version) && A.set(i, {
              buffer: i.buffer,
              type: i.type,
              bytesPerElement: i.elementSize,
              version: i.version
            });
            return;
          }
          const t = A.get(i);
          if (t === void 0) A.set(i, I(i, o));
          else if (t.version < i.version) {
            if (t.size !== i.array.byteLength) throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
            g(t.buffer, i, o), t.version = i.version;
          }
        }
        return {
          get: B,
          remove: Q,
          update: E
        };
      }
      var Ic = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, gc = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, Cc = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, Bc = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, Qc = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`, Ec = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, ic = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, oc = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, tc = `#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`, ec = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`, sc = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, ac = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, Dc = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, nc = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, rc = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, hc = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`, wc = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, cc = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, Sc = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, lc = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, Gc = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, kc = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`, yc = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`, Mc = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, Kc = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, Uc = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, Nc = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, Fc = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, Jc = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, Rc = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, pc = "gl_FragColor = linearToOutputTexel( gl_FragColor );", dc = `vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`, Yc = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, qc = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, Lc = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, fc = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, uc = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, Hc = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, mc = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, Tc = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, bc = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, xc = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, Oc = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, _c = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, Zc = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, vc = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, Pc = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, Wc = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, jc = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, Vc = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, Xc = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, zc = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`, $c = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, AS = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, IS = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, gS = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, CS = `#if defined( USE_LOGARITHMIC_DEPTH_BUFFER )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, BS = `#if defined( USE_LOGARITHMIC_DEPTH_BUFFER )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, QS = `#ifdef USE_LOGARITHMIC_DEPTH_BUFFER
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, ES = `#ifdef USE_LOGARITHMIC_DEPTH_BUFFER
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`, iS = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, oS = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, tS = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, eS = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, sS = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, aS = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, DS = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`, nS = `#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, rS = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, hS = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`, wS = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, cS = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, SS = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, lS = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, GS = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, kS = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, yS = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, MS = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, KS = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, US = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, NS = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, FS = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, JS = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, RS = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, pS = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, dS = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, YS = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, qS = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, LS = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, fS = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		float depth = unpackRGBAToDepth( texture2D( depths, uv ) );
		#ifdef USE_REVERSED_DEPTH_BUFFER
			return step( depth, compare );
		#else
			return step( compare, depth );
		#endif
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow( sampler2D shadow, vec2 uv, float compare ) {
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		#ifdef USE_REVERSED_DEPTH_BUFFER
			float hard_shadow = step( distribution.x, compare );
		#else
			float hard_shadow = step( compare, distribution.x );
		#endif
		if ( hard_shadow != 1.0 ) {
			float distance = compare - distribution.x;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`, uS = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, HS = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, mS = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, TS = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, bS = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, xS = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, OS = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, _S = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, ZS = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, vS = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, PS = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, WS = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, jS = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, VS = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, XS = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, zS = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, $S = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
      const Al = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, Il = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, gl = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, Cl = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, Bl = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, Ql = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, El = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, il = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	#ifdef USE_REVERSED_DEPTH_BUFFER
		float fragCoordZ = vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ];
	#else
		float fragCoordZ = 0.5 * vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ] + 0.5;
	#endif
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`, ol = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, tl = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, el = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, sl = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, al = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, Dl = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, nl = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, rl = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, hl = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, wl = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, cl = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, Sl = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, ll = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, Gl = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, kl = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, yl = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Ml = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, Kl = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Ul = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Nl = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Fl = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, Jl = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, Rl = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, pl = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, dl = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, Yl = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, bA = {
        alphahash_fragment: Ic,
        alphahash_pars_fragment: gc,
        alphamap_fragment: Cc,
        alphamap_pars_fragment: Bc,
        alphatest_fragment: Qc,
        alphatest_pars_fragment: Ec,
        aomap_fragment: ic,
        aomap_pars_fragment: oc,
        batching_pars_vertex: tc,
        batching_vertex: ec,
        begin_vertex: sc,
        beginnormal_vertex: ac,
        bsdfs: Dc,
        iridescence_fragment: nc,
        bumpmap_pars_fragment: rc,
        clipping_planes_fragment: hc,
        clipping_planes_pars_fragment: wc,
        clipping_planes_pars_vertex: cc,
        clipping_planes_vertex: Sc,
        color_fragment: lc,
        color_pars_fragment: Gc,
        color_pars_vertex: kc,
        color_vertex: yc,
        common: Mc,
        cube_uv_reflection_fragment: Kc,
        defaultnormal_vertex: Uc,
        displacementmap_pars_vertex: Nc,
        displacementmap_vertex: Fc,
        emissivemap_fragment: Jc,
        emissivemap_pars_fragment: Rc,
        colorspace_fragment: pc,
        colorspace_pars_fragment: dc,
        envmap_fragment: Yc,
        envmap_common_pars_fragment: qc,
        envmap_pars_fragment: Lc,
        envmap_pars_vertex: fc,
        envmap_physical_pars_fragment: Pc,
        envmap_vertex: uc,
        fog_vertex: Hc,
        fog_pars_vertex: mc,
        fog_fragment: Tc,
        fog_pars_fragment: bc,
        gradientmap_pars_fragment: xc,
        lightmap_pars_fragment: Oc,
        lights_lambert_fragment: _c,
        lights_lambert_pars_fragment: Zc,
        lights_pars_begin: vc,
        lights_toon_fragment: Wc,
        lights_toon_pars_fragment: jc,
        lights_phong_fragment: Vc,
        lights_phong_pars_fragment: Xc,
        lights_physical_fragment: zc,
        lights_physical_pars_fragment: $c,
        lights_fragment_begin: AS,
        lights_fragment_maps: IS,
        lights_fragment_end: gS,
        logdepthbuf_fragment: CS,
        logdepthbuf_pars_fragment: BS,
        logdepthbuf_pars_vertex: QS,
        logdepthbuf_vertex: ES,
        map_fragment: iS,
        map_pars_fragment: oS,
        map_particle_fragment: tS,
        map_particle_pars_fragment: eS,
        metalnessmap_fragment: sS,
        metalnessmap_pars_fragment: aS,
        morphinstance_vertex: DS,
        morphcolor_vertex: nS,
        morphnormal_vertex: rS,
        morphtarget_pars_vertex: hS,
        morphtarget_vertex: wS,
        normal_fragment_begin: cS,
        normal_fragment_maps: SS,
        normal_pars_fragment: lS,
        normal_pars_vertex: GS,
        normal_vertex: kS,
        normalmap_pars_fragment: yS,
        clearcoat_normal_fragment_begin: MS,
        clearcoat_normal_fragment_maps: KS,
        clearcoat_pars_fragment: US,
        iridescence_pars_fragment: NS,
        opaque_fragment: FS,
        packing: JS,
        premultiplied_alpha_fragment: RS,
        project_vertex: pS,
        dithering_fragment: dS,
        dithering_pars_fragment: YS,
        roughnessmap_fragment: qS,
        roughnessmap_pars_fragment: LS,
        shadowmap_pars_fragment: fS,
        shadowmap_pars_vertex: uS,
        shadowmap_vertex: HS,
        shadowmask_pars_fragment: mS,
        skinbase_vertex: TS,
        skinning_pars_vertex: bS,
        skinning_vertex: xS,
        skinnormal_vertex: OS,
        specularmap_fragment: _S,
        specularmap_pars_fragment: ZS,
        tonemapping_fragment: vS,
        tonemapping_pars_fragment: PS,
        transmission_fragment: WS,
        transmission_pars_fragment: jS,
        uv_pars_fragment: VS,
        uv_pars_vertex: XS,
        uv_vertex: zS,
        worldpos_vertex: $S,
        background_vert: Al,
        background_frag: Il,
        backgroundCube_vert: gl,
        backgroundCube_frag: Cl,
        cube_vert: Bl,
        cube_frag: Ql,
        depth_vert: El,
        depth_frag: il,
        distanceRGBA_vert: ol,
        distanceRGBA_frag: tl,
        equirect_vert: el,
        equirect_frag: sl,
        linedashed_vert: al,
        linedashed_frag: Dl,
        meshbasic_vert: nl,
        meshbasic_frag: rl,
        meshlambert_vert: hl,
        meshlambert_frag: wl,
        meshmatcap_vert: cl,
        meshmatcap_frag: Sl,
        meshnormal_vert: ll,
        meshnormal_frag: Gl,
        meshphong_vert: kl,
        meshphong_frag: yl,
        meshphysical_vert: Ml,
        meshphysical_frag: Kl,
        meshtoon_vert: Ul,
        meshtoon_frag: Nl,
        points_vert: Fl,
        points_frag: Jl,
        shadow_vert: Rl,
        shadow_frag: pl,
        sprite_vert: dl,
        sprite_frag: Yl
      }, eA = {
        common: {
          diffuse: {
            value: new mA(16777215)
          },
          opacity: {
            value: 1
          },
          map: {
            value: null
          },
          mapTransform: {
            value: new ZA()
          },
          alphaMap: {
            value: null
          },
          alphaMapTransform: {
            value: new ZA()
          },
          alphaTest: {
            value: 0
          }
        },
        specularmap: {
          specularMap: {
            value: null
          },
          specularMapTransform: {
            value: new ZA()
          }
        },
        envmap: {
          envMap: {
            value: null
          },
          envMapRotation: {
            value: new ZA()
          },
          flipEnvMap: {
            value: -1
          },
          reflectivity: {
            value: 1
          },
          ior: {
            value: 1.5
          },
          refractionRatio: {
            value: 0.98
          }
        },
        aomap: {
          aoMap: {
            value: null
          },
          aoMapIntensity: {
            value: 1
          },
          aoMapTransform: {
            value: new ZA()
          }
        },
        lightmap: {
          lightMap: {
            value: null
          },
          lightMapIntensity: {
            value: 1
          },
          lightMapTransform: {
            value: new ZA()
          }
        },
        bumpmap: {
          bumpMap: {
            value: null
          },
          bumpMapTransform: {
            value: new ZA()
          },
          bumpScale: {
            value: 1
          }
        },
        normalmap: {
          normalMap: {
            value: null
          },
          normalMapTransform: {
            value: new ZA()
          },
          normalScale: {
            value: new XA(1, 1)
          }
        },
        displacementmap: {
          displacementMap: {
            value: null
          },
          displacementMapTransform: {
            value: new ZA()
          },
          displacementScale: {
            value: 1
          },
          displacementBias: {
            value: 0
          }
        },
        emissivemap: {
          emissiveMap: {
            value: null
          },
          emissiveMapTransform: {
            value: new ZA()
          }
        },
        metalnessmap: {
          metalnessMap: {
            value: null
          },
          metalnessMapTransform: {
            value: new ZA()
          }
        },
        roughnessmap: {
          roughnessMap: {
            value: null
          },
          roughnessMapTransform: {
            value: new ZA()
          }
        },
        gradientmap: {
          gradientMap: {
            value: null
          }
        },
        fog: {
          fogDensity: {
            value: 25e-5
          },
          fogNear: {
            value: 1
          },
          fogFar: {
            value: 2e3
          },
          fogColor: {
            value: new mA(16777215)
          }
        },
        lights: {
          ambientLightColor: {
            value: []
          },
          lightProbe: {
            value: []
          },
          directionalLights: {
            value: [],
            properties: {
              direction: {},
              color: {}
            }
          },
          directionalLightShadows: {
            value: [],
            properties: {
              shadowIntensity: 1,
              shadowBias: {},
              shadowNormalBias: {},
              shadowRadius: {},
              shadowMapSize: {}
            }
          },
          directionalShadowMap: {
            value: []
          },
          directionalShadowMatrix: {
            value: []
          },
          spotLights: {
            value: [],
            properties: {
              color: {},
              position: {},
              direction: {},
              distance: {},
              coneCos: {},
              penumbraCos: {},
              decay: {}
            }
          },
          spotLightShadows: {
            value: [],
            properties: {
              shadowIntensity: 1,
              shadowBias: {},
              shadowNormalBias: {},
              shadowRadius: {},
              shadowMapSize: {}
            }
          },
          spotLightMap: {
            value: []
          },
          spotShadowMap: {
            value: []
          },
          spotLightMatrix: {
            value: []
          },
          pointLights: {
            value: [],
            properties: {
              color: {},
              position: {},
              decay: {},
              distance: {}
            }
          },
          pointLightShadows: {
            value: [],
            properties: {
              shadowIntensity: 1,
              shadowBias: {},
              shadowNormalBias: {},
              shadowRadius: {},
              shadowMapSize: {},
              shadowCameraNear: {},
              shadowCameraFar: {}
            }
          },
          pointShadowMap: {
            value: []
          },
          pointShadowMatrix: {
            value: []
          },
          hemisphereLights: {
            value: [],
            properties: {
              direction: {},
              skyColor: {},
              groundColor: {}
            }
          },
          rectAreaLights: {
            value: [],
            properties: {
              color: {},
              position: {},
              width: {},
              height: {}
            }
          },
          ltc_1: {
            value: null
          },
          ltc_2: {
            value: null
          }
        },
        points: {
          diffuse: {
            value: new mA(16777215)
          },
          opacity: {
            value: 1
          },
          size: {
            value: 1
          },
          scale: {
            value: 1
          },
          map: {
            value: null
          },
          alphaMap: {
            value: null
          },
          alphaMapTransform: {
            value: new ZA()
          },
          alphaTest: {
            value: 0
          },
          uvTransform: {
            value: new ZA()
          }
        },
        sprite: {
          diffuse: {
            value: new mA(16777215)
          },
          opacity: {
            value: 1
          },
          center: {
            value: new XA(0.5, 0.5)
          },
          rotation: {
            value: 0
          },
          map: {
            value: null
          },
          mapTransform: {
            value: new ZA()
          },
          alphaMap: {
            value: null
          },
          alphaMapTransform: {
            value: new ZA()
          },
          alphaTest: {
            value: 0
          }
        }
      }, Og = {
        basic: {
          uniforms: Cg([
            eA.common,
            eA.specularmap,
            eA.envmap,
            eA.aomap,
            eA.lightmap,
            eA.fog
          ]),
          vertexShader: bA.meshbasic_vert,
          fragmentShader: bA.meshbasic_frag
        },
        lambert: {
          uniforms: Cg([
            eA.common,
            eA.specularmap,
            eA.envmap,
            eA.aomap,
            eA.lightmap,
            eA.emissivemap,
            eA.bumpmap,
            eA.normalmap,
            eA.displacementmap,
            eA.fog,
            eA.lights,
            {
              emissive: {
                value: new mA(0)
              }
            }
          ]),
          vertexShader: bA.meshlambert_vert,
          fragmentShader: bA.meshlambert_frag
        },
        phong: {
          uniforms: Cg([
            eA.common,
            eA.specularmap,
            eA.envmap,
            eA.aomap,
            eA.lightmap,
            eA.emissivemap,
            eA.bumpmap,
            eA.normalmap,
            eA.displacementmap,
            eA.fog,
            eA.lights,
            {
              emissive: {
                value: new mA(0)
              },
              specular: {
                value: new mA(1118481)
              },
              shininess: {
                value: 30
              }
            }
          ]),
          vertexShader: bA.meshphong_vert,
          fragmentShader: bA.meshphong_frag
        },
        standard: {
          uniforms: Cg([
            eA.common,
            eA.envmap,
            eA.aomap,
            eA.lightmap,
            eA.emissivemap,
            eA.bumpmap,
            eA.normalmap,
            eA.displacementmap,
            eA.roughnessmap,
            eA.metalnessmap,
            eA.fog,
            eA.lights,
            {
              emissive: {
                value: new mA(0)
              },
              roughness: {
                value: 1
              },
              metalness: {
                value: 0
              },
              envMapIntensity: {
                value: 1
              }
            }
          ]),
          vertexShader: bA.meshphysical_vert,
          fragmentShader: bA.meshphysical_frag
        },
        toon: {
          uniforms: Cg([
            eA.common,
            eA.aomap,
            eA.lightmap,
            eA.emissivemap,
            eA.bumpmap,
            eA.normalmap,
            eA.displacementmap,
            eA.gradientmap,
            eA.fog,
            eA.lights,
            {
              emissive: {
                value: new mA(0)
              }
            }
          ]),
          vertexShader: bA.meshtoon_vert,
          fragmentShader: bA.meshtoon_frag
        },
        matcap: {
          uniforms: Cg([
            eA.common,
            eA.bumpmap,
            eA.normalmap,
            eA.displacementmap,
            eA.fog,
            {
              matcap: {
                value: null
              }
            }
          ]),
          vertexShader: bA.meshmatcap_vert,
          fragmentShader: bA.meshmatcap_frag
        },
        points: {
          uniforms: Cg([
            eA.points,
            eA.fog
          ]),
          vertexShader: bA.points_vert,
          fragmentShader: bA.points_frag
        },
        dashed: {
          uniforms: Cg([
            eA.common,
            eA.fog,
            {
              scale: {
                value: 1
              },
              dashSize: {
                value: 1
              },
              totalSize: {
                value: 2
              }
            }
          ]),
          vertexShader: bA.linedashed_vert,
          fragmentShader: bA.linedashed_frag
        },
        depth: {
          uniforms: Cg([
            eA.common,
            eA.displacementmap
          ]),
          vertexShader: bA.depth_vert,
          fragmentShader: bA.depth_frag
        },
        normal: {
          uniforms: Cg([
            eA.common,
            eA.bumpmap,
            eA.normalmap,
            eA.displacementmap,
            {
              opacity: {
                value: 1
              }
            }
          ]),
          vertexShader: bA.meshnormal_vert,
          fragmentShader: bA.meshnormal_frag
        },
        sprite: {
          uniforms: Cg([
            eA.sprite,
            eA.fog
          ]),
          vertexShader: bA.sprite_vert,
          fragmentShader: bA.sprite_frag
        },
        background: {
          uniforms: {
            uvTransform: {
              value: new ZA()
            },
            t2D: {
              value: null
            },
            backgroundIntensity: {
              value: 1
            }
          },
          vertexShader: bA.background_vert,
          fragmentShader: bA.background_frag
        },
        backgroundCube: {
          uniforms: {
            envMap: {
              value: null
            },
            flipEnvMap: {
              value: -1
            },
            backgroundBlurriness: {
              value: 0
            },
            backgroundIntensity: {
              value: 1
            },
            backgroundRotation: {
              value: new ZA()
            }
          },
          vertexShader: bA.backgroundCube_vert,
          fragmentShader: bA.backgroundCube_frag
        },
        cube: {
          uniforms: {
            tCube: {
              value: null
            },
            tFlip: {
              value: -1
            },
            opacity: {
              value: 1
            }
          },
          vertexShader: bA.cube_vert,
          fragmentShader: bA.cube_frag
        },
        equirect: {
          uniforms: {
            tEquirect: {
              value: null
            }
          },
          vertexShader: bA.equirect_vert,
          fragmentShader: bA.equirect_frag
        },
        distanceRGBA: {
          uniforms: Cg([
            eA.common,
            eA.displacementmap,
            {
              referencePosition: {
                value: new J()
              },
              nearDistance: {
                value: 1
              },
              farDistance: {
                value: 1e3
              }
            }
          ]),
          vertexShader: bA.distanceRGBA_vert,
          fragmentShader: bA.distanceRGBA_frag
        },
        shadow: {
          uniforms: Cg([
            eA.lights,
            eA.fog,
            {
              color: {
                value: new mA(0)
              },
              opacity: {
                value: 1
              }
            }
          ]),
          vertexShader: bA.shadow_vert,
          fragmentShader: bA.shadow_frag
        }
      };
      Og.physical = {
        uniforms: Cg([
          Og.standard.uniforms,
          {
            clearcoat: {
              value: 0
            },
            clearcoatMap: {
              value: null
            },
            clearcoatMapTransform: {
              value: new ZA()
            },
            clearcoatNormalMap: {
              value: null
            },
            clearcoatNormalMapTransform: {
              value: new ZA()
            },
            clearcoatNormalScale: {
              value: new XA(1, 1)
            },
            clearcoatRoughness: {
              value: 0
            },
            clearcoatRoughnessMap: {
              value: null
            },
            clearcoatRoughnessMapTransform: {
              value: new ZA()
            },
            dispersion: {
              value: 0
            },
            iridescence: {
              value: 0
            },
            iridescenceMap: {
              value: null
            },
            iridescenceMapTransform: {
              value: new ZA()
            },
            iridescenceIOR: {
              value: 1.3
            },
            iridescenceThicknessMinimum: {
              value: 100
            },
            iridescenceThicknessMaximum: {
              value: 400
            },
            iridescenceThicknessMap: {
              value: null
            },
            iridescenceThicknessMapTransform: {
              value: new ZA()
            },
            sheen: {
              value: 0
            },
            sheenColor: {
              value: new mA(0)
            },
            sheenColorMap: {
              value: null
            },
            sheenColorMapTransform: {
              value: new ZA()
            },
            sheenRoughness: {
              value: 1
            },
            sheenRoughnessMap: {
              value: null
            },
            sheenRoughnessMapTransform: {
              value: new ZA()
            },
            transmission: {
              value: 0
            },
            transmissionMap: {
              value: null
            },
            transmissionMapTransform: {
              value: new ZA()
            },
            transmissionSamplerSize: {
              value: new XA()
            },
            transmissionSamplerMap: {
              value: null
            },
            thickness: {
              value: 0
            },
            thicknessMap: {
              value: null
            },
            thicknessMapTransform: {
              value: new ZA()
            },
            attenuationDistance: {
              value: 0
            },
            attenuationColor: {
              value: new mA(0)
            },
            specularColor: {
              value: new mA(1, 1, 1)
            },
            specularColorMap: {
              value: null
            },
            specularColorMapTransform: {
              value: new ZA()
            },
            specularIntensity: {
              value: 1
            },
            specularIntensityMap: {
              value: null
            },
            specularIntensityMapTransform: {
              value: new ZA()
            },
            anisotropyVector: {
              value: new XA()
            },
            anisotropyMap: {
              value: null
            },
            anisotropyMapTransform: {
              value: new ZA()
            }
          }
        ]),
        vertexShader: bA.meshphysical_vert,
        fragmentShader: bA.meshphysical_frag
      };
      const SE = {
        r: 0,
        b: 0,
        g: 0
      }, xC = new pI(), ql = new uA();
      function Ll(C, A, I, g, B, Q, E) {
        const i = new mA(0);
        let o = Q === true ? 0 : 1, t, e, s = null, a = 0, r = null;
        function c(M) {
          let k = M.isScene === true ? M.background : null;
          return k && k.isTexture && (k = (M.backgroundBlurriness > 0 ? I : A).get(k)), k;
        }
        function S(M) {
          let k = false;
          const p = c(M);
          p === null ? D(i, o) : p && p.isColor && (D(p, 1), k = true);
          const R = C.xr.getEnvironmentBlendMode();
          R === "additive" ? g.buffers.color.setClear(0, 0, 0, 1, E) : R === "alpha-blend" && g.buffers.color.setClear(0, 0, 0, 0, E), (C.autoClear || k) && (g.buffers.depth.setTest(true), g.buffers.depth.setMask(true), g.buffers.color.setMask(true), C.clear(C.autoClearColor, C.autoClearDepth, C.autoClearStencil));
        }
        function h(M, k) {
          const p = c(k);
          p && (p.isCubeTexture || p.mapping === XE) ? (e === void 0 && (e = new ig(new xQ(1, 1, 1), new YC({
            name: "BackgroundCubeMaterial",
            uniforms: mB(Og.backgroundCube.uniforms),
            vertexShader: Og.backgroundCube.vertexShader,
            fragmentShader: Og.backgroundCube.fragmentShader,
            side: Dg,
            depthTest: false,
            depthWrite: false,
            fog: false,
            allowOverride: false
          })), e.geometry.deleteAttribute("normal"), e.geometry.deleteAttribute("uv"), e.onBeforeRender = function(R, Y, m) {
            this.matrixWorld.copyPosition(m.matrixWorld);
          }, Object.defineProperty(e.material, "envMap", {
            get: function() {
              return this.uniforms.envMap.value;
            }
          }), B.update(e)), xC.copy(k.backgroundRotation), xC.x *= -1, xC.y *= -1, xC.z *= -1, p.isCubeTexture && p.isRenderTargetTexture === false && (xC.y *= -1, xC.z *= -1), e.material.uniforms.envMap.value = p, e.material.uniforms.flipEnvMap.value = p.isCubeTexture && p.isRenderTargetTexture === false ? -1 : 1, e.material.uniforms.backgroundBlurriness.value = k.backgroundBlurriness, e.material.uniforms.backgroundIntensity.value = k.backgroundIntensity, e.material.uniforms.backgroundRotation.value.setFromMatrix4(ql.makeRotationFromEuler(xC)), e.material.toneMapped = gI.getTransfer(p.colorSpace) !== eI, (s !== p || a !== p.version || r !== C.toneMapping) && (e.material.needsUpdate = true, s = p, a = p.version, r = C.toneMapping), e.layers.enableAll(), M.unshift(e, e.geometry, e.material, 0, 0, null)) : p && p.isTexture && (t === void 0 && (t = new ig(new zE(2, 2), new YC({
            name: "BackgroundMaterial",
            uniforms: mB(Og.background.uniforms),
            vertexShader: Og.background.vertexShader,
            fragmentShader: Og.background.fragmentShader,
            side: Wg,
            depthTest: false,
            depthWrite: false,
            fog: false,
            allowOverride: false
          })), t.geometry.deleteAttribute("normal"), Object.defineProperty(t.material, "map", {
            get: function() {
              return this.uniforms.t2D.value;
            }
          }), B.update(t)), t.material.uniforms.t2D.value = p, t.material.uniforms.backgroundIntensity.value = k.backgroundIntensity, t.material.toneMapped = gI.getTransfer(p.colorSpace) !== eI, p.matrixAutoUpdate === true && p.updateMatrix(), t.material.uniforms.uvTransform.value.copy(p.matrix), (s !== p || a !== p.version || r !== C.toneMapping) && (t.material.needsUpdate = true, s = p, a = p.version, r = C.toneMapping), t.layers.enableAll(), M.unshift(t, t.geometry, t.material, 0, 0, null));
        }
        function D(M, k) {
          M.getRGB(SE, uD(C)), g.buffers.color.setClear(SE.r, SE.g, SE.b, k, E);
        }
        function U() {
          e !== void 0 && (e.geometry.dispose(), e.material.dispose(), e = void 0), t !== void 0 && (t.geometry.dispose(), t.material.dispose(), t = void 0);
        }
        return {
          getClearColor: function() {
            return i;
          },
          setClearColor: function(M, k = 1) {
            i.set(M), o = k, D(i, o);
          },
          getClearAlpha: function() {
            return o;
          },
          setClearAlpha: function(M) {
            o = M, D(i, o);
          },
          render: S,
          addToRenderList: h,
          dispose: U
        };
      }
      function fl(C, A) {
        const I = C.getParameter(C.MAX_VERTEX_ATTRIBS), g = {}, B = a(null);
        let Q = B, E = false;
        function i(y, q, x, Z, j) {
          let z = false;
          const V = s(Z, x, q);
          Q !== V && (Q = V, t(Q.object)), z = r(y, Z, x, j), z && c(y, Z, x, j), j !== null && A.update(j, C.ELEMENT_ARRAY_BUFFER), (z || E) && (E = false, k(y, q, x, Z), j !== null && C.bindBuffer(C.ELEMENT_ARRAY_BUFFER, A.get(j).buffer));
        }
        function o() {
          return C.createVertexArray();
        }
        function t(y) {
          return C.bindVertexArray(y);
        }
        function e(y) {
          return C.deleteVertexArray(y);
        }
        function s(y, q, x) {
          const Z = x.wireframe === true;
          let j = g[y.id];
          j === void 0 && (j = {}, g[y.id] = j);
          let z = j[q.id];
          z === void 0 && (z = {}, j[q.id] = z);
          let V = z[Z];
          return V === void 0 && (V = a(o()), z[Z] = V), V;
        }
        function a(y) {
          const q = [], x = [], Z = [];
          for (let j = 0; j < I; j++) q[j] = 0, x[j] = 0, Z[j] = 0;
          return {
            geometry: null,
            program: null,
            wireframe: false,
            newAttributes: q,
            enabledAttributes: x,
            attributeDivisors: Z,
            object: y,
            attributes: {},
            index: null
          };
        }
        function r(y, q, x, Z) {
          const j = Q.attributes, z = q.attributes;
          let V = 0;
          const iA = x.getAttributes();
          for (const v in iA) if (iA[v].location >= 0) {
            const rA = j[v];
            let JA = z[v];
            if (JA === void 0 && (v === "instanceMatrix" && y.instanceMatrix && (JA = y.instanceMatrix), v === "instanceColor" && y.instanceColor && (JA = y.instanceColor)), rA === void 0 || rA.attribute !== JA || JA && rA.data !== JA.data) return true;
            V++;
          }
          return Q.attributesNum !== V || Q.index !== Z;
        }
        function c(y, q, x, Z) {
          const j = {}, z = q.attributes;
          let V = 0;
          const iA = x.getAttributes();
          for (const v in iA) if (iA[v].location >= 0) {
            let rA = z[v];
            rA === void 0 && (v === "instanceMatrix" && y.instanceMatrix && (rA = y.instanceMatrix), v === "instanceColor" && y.instanceColor && (rA = y.instanceColor));
            const JA = {};
            JA.attribute = rA, rA && rA.data && (JA.data = rA.data), j[v] = JA, V++;
          }
          Q.attributes = j, Q.attributesNum = V, Q.index = Z;
        }
        function S() {
          const y = Q.newAttributes;
          for (let q = 0, x = y.length; q < x; q++) y[q] = 0;
        }
        function h(y) {
          D(y, 0);
        }
        function D(y, q) {
          const x = Q.newAttributes, Z = Q.enabledAttributes, j = Q.attributeDivisors;
          x[y] = 1, Z[y] === 0 && (C.enableVertexAttribArray(y), Z[y] = 1), j[y] !== q && (C.vertexAttribDivisor(y, q), j[y] = q);
        }
        function U() {
          const y = Q.newAttributes, q = Q.enabledAttributes;
          for (let x = 0, Z = q.length; x < Z; x++) q[x] !== y[x] && (C.disableVertexAttribArray(x), q[x] = 0);
        }
        function M(y, q, x, Z, j, z, V) {
          V === true ? C.vertexAttribIPointer(y, q, x, j, z) : C.vertexAttribPointer(y, q, x, Z, j, z);
        }
        function k(y, q, x, Z) {
          S();
          const j = Z.attributes, z = x.getAttributes(), V = q.defaultAttributeValues;
          for (const iA in z) {
            const v = z[iA];
            if (v.location >= 0) {
              let sA = j[iA];
              if (sA === void 0 && (iA === "instanceMatrix" && y.instanceMatrix && (sA = y.instanceMatrix), iA === "instanceColor" && y.instanceColor && (sA = y.instanceColor)), sA !== void 0) {
                const rA = sA.normalized, JA = sA.itemSize, jA = A.get(sA);
                if (jA === void 0) continue;
                const nI = jA.buffer, lI = jA.type, QI = jA.bytesPerElement, X = lI === C.INT || lI === C.UNSIGNED_INT || sA.gpuType === vt;
                if (sA.isInterleavedBufferAttribute) {
                  const IA = sA.data, cA = IA.stride, HA = sA.offset;
                  if (IA.isInstancedInterleavedBuffer) {
                    for (let NA = 0; NA < v.locationSize; NA++) D(v.location + NA, IA.meshPerAttribute);
                    y.isInstancedMesh !== true && Z._maxInstanceCount === void 0 && (Z._maxInstanceCount = IA.meshPerAttribute * IA.count);
                  } else for (let NA = 0; NA < v.locationSize; NA++) h(v.location + NA);
                  C.bindBuffer(C.ARRAY_BUFFER, nI);
                  for (let NA = 0; NA < v.locationSize; NA++) M(v.location + NA, JA / v.locationSize, lI, rA, cA * QI, (HA + JA / v.locationSize * NA) * QI, X);
                } else {
                  if (sA.isInstancedBufferAttribute) {
                    for (let IA = 0; IA < v.locationSize; IA++) D(v.location + IA, sA.meshPerAttribute);
                    y.isInstancedMesh !== true && Z._maxInstanceCount === void 0 && (Z._maxInstanceCount = sA.meshPerAttribute * sA.count);
                  } else for (let IA = 0; IA < v.locationSize; IA++) h(v.location + IA);
                  C.bindBuffer(C.ARRAY_BUFFER, nI);
                  for (let IA = 0; IA < v.locationSize; IA++) M(v.location + IA, JA / v.locationSize, lI, rA, JA * QI, JA / v.locationSize * IA * QI, X);
                }
              } else if (V !== void 0) {
                const rA = V[iA];
                if (rA !== void 0) switch (rA.length) {
                  case 2:
                    C.vertexAttrib2fv(v.location, rA);
                    break;
                  case 3:
                    C.vertexAttrib3fv(v.location, rA);
                    break;
                  case 4:
                    C.vertexAttrib4fv(v.location, rA);
                    break;
                  default:
                    C.vertexAttrib1fv(v.location, rA);
                }
              }
            }
          }
          U();
        }
        function p() {
          m();
          for (const y in g) {
            const q = g[y];
            for (const x in q) {
              const Z = q[x];
              for (const j in Z) e(Z[j].object), delete Z[j];
              delete q[x];
            }
            delete g[y];
          }
        }
        function R(y) {
          if (g[y.id] === void 0) return;
          const q = g[y.id];
          for (const x in q) {
            const Z = q[x];
            for (const j in Z) e(Z[j].object), delete Z[j];
            delete q[x];
          }
          delete g[y.id];
        }
        function Y(y) {
          for (const q in g) {
            const x = g[q];
            if (x[y.id] === void 0) continue;
            const Z = x[y.id];
            for (const j in Z) e(Z[j].object), delete Z[j];
            delete x[y.id];
          }
        }
        function m() {
          K(), E = true, Q !== B && (Q = B, t(Q.object));
        }
        function K() {
          B.geometry = null, B.program = null, B.wireframe = false;
        }
        return {
          setup: i,
          reset: m,
          resetDefaultState: K,
          dispose: p,
          releaseStatesOfGeometry: R,
          releaseStatesOfProgram: Y,
          initAttributes: S,
          enableAttribute: h,
          disableUnusedAttributes: U
        };
      }
      function ul(C, A, I) {
        let g;
        function B(t) {
          g = t;
        }
        function Q(t, e) {
          C.drawArrays(g, t, e), I.update(e, g, 1);
        }
        function E(t, e, s) {
          s !== 0 && (C.drawArraysInstanced(g, t, e, s), I.update(e, g, s));
        }
        function i(t, e, s) {
          if (s === 0) return;
          A.get("WEBGL_multi_draw").multiDrawArraysWEBGL(g, t, 0, e, 0, s);
          let r = 0;
          for (let c = 0; c < s; c++) r += e[c];
          I.update(r, g, 1);
        }
        function o(t, e, s, a) {
          if (s === 0) return;
          const r = A.get("WEBGL_multi_draw");
          if (r === null) for (let c = 0; c < t.length; c++) E(t[c], e[c], a[c]);
          else {
            r.multiDrawArraysInstancedWEBGL(g, t, 0, e, 0, a, 0, s);
            let c = 0;
            for (let S = 0; S < s; S++) c += e[S] * a[S];
            I.update(c, g, 1);
          }
        }
        this.setMode = B, this.render = Q, this.renderInstances = E, this.renderMultiDraw = i, this.renderMultiDrawInstances = o;
      }
      function Hl(C, A, I, g) {
        let B;
        function Q() {
          if (B !== void 0) return B;
          if (A.has("EXT_texture_filter_anisotropic") === true) {
            const Y = A.get("EXT_texture_filter_anisotropic");
            B = C.getParameter(Y.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
          } else B = 0;
          return B;
        }
        function E(Y) {
          return !(Y !== ag && g.convert(Y) !== C.getParameter(C.IMPLEMENTATION_COLOR_READ_FORMAT));
        }
        function i(Y) {
          const m = Y === DC && (A.has("EXT_color_buffer_half_float") || A.has("EXT_color_buffer_float"));
          return !(Y !== jg && g.convert(Y) !== C.getParameter(C.IMPLEMENTATION_COLOR_READ_TYPE) && Y !== dg && !m);
        }
        function o(Y) {
          if (Y === "highp") {
            if (C.getShaderPrecisionFormat(C.VERTEX_SHADER, C.HIGH_FLOAT).precision > 0 && C.getShaderPrecisionFormat(C.FRAGMENT_SHADER, C.HIGH_FLOAT).precision > 0) return "highp";
            Y = "mediump";
          }
          return Y === "mediump" && C.getShaderPrecisionFormat(C.VERTEX_SHADER, C.MEDIUM_FLOAT).precision > 0 && C.getShaderPrecisionFormat(C.FRAGMENT_SHADER, C.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
        }
        let t = I.precision !== void 0 ? I.precision : "highp";
        const e = o(t);
        e !== t && (console.warn("THREE.WebGLRenderer:", t, "not supported, using", e, "instead."), t = e);
        const s = I.logarithmicDepthBuffer === true, a = I.reversedDepthBuffer === true && A.has("EXT_clip_control"), r = C.getParameter(C.MAX_TEXTURE_IMAGE_UNITS), c = C.getParameter(C.MAX_VERTEX_TEXTURE_IMAGE_UNITS), S = C.getParameter(C.MAX_TEXTURE_SIZE), h = C.getParameter(C.MAX_CUBE_MAP_TEXTURE_SIZE), D = C.getParameter(C.MAX_VERTEX_ATTRIBS), U = C.getParameter(C.MAX_VERTEX_UNIFORM_VECTORS), M = C.getParameter(C.MAX_VARYING_VECTORS), k = C.getParameter(C.MAX_FRAGMENT_UNIFORM_VECTORS), p = c > 0, R = C.getParameter(C.MAX_SAMPLES);
        return {
          isWebGL2: true,
          getMaxAnisotropy: Q,
          getMaxPrecision: o,
          textureFormatReadable: E,
          textureTypeReadable: i,
          precision: t,
          logarithmicDepthBuffer: s,
          reversedDepthBuffer: a,
          maxTextures: r,
          maxVertexTextures: c,
          maxTextureSize: S,
          maxCubemapSize: h,
          maxAttributes: D,
          maxVertexUniforms: U,
          maxVaryings: M,
          maxFragmentUniforms: k,
          vertexTextures: p,
          maxSamples: R
        };
      }
      function ml(C) {
        const A = this;
        let I = null, g = 0, B = false, Q = false;
        const E = new ZC(), i = new ZA(), o = {
          value: null,
          needsUpdate: false
        };
        this.uniform = o, this.numPlanes = 0, this.numIntersection = 0, this.init = function(s, a) {
          const r = s.length !== 0 || a || g !== 0 || B;
          return B = a, g = s.length, r;
        }, this.beginShadows = function() {
          Q = true, e(null);
        }, this.endShadows = function() {
          Q = false;
        }, this.setGlobalState = function(s, a) {
          I = e(s, a, 0);
        }, this.setState = function(s, a, r) {
          const c = s.clippingPlanes, S = s.clipIntersection, h = s.clipShadows, D = C.get(s);
          if (!B || c === null || c.length === 0 || Q && !h) Q ? e(null) : t();
          else {
            const U = Q ? 0 : g, M = U * 4;
            let k = D.clippingState || null;
            o.value = k, k = e(c, a, M, r);
            for (let p = 0; p !== M; ++p) k[p] = I[p];
            D.clippingState = k, this.numIntersection = S ? this.numPlanes : 0, this.numPlanes += U;
          }
        };
        function t() {
          o.value !== I && (o.value = I, o.needsUpdate = g > 0), A.numPlanes = g, A.numIntersection = 0;
        }
        function e(s, a, r, c) {
          const S = s !== null ? s.length : 0;
          let h = null;
          if (S !== 0) {
            if (h = o.value, c !== true || h === null) {
              const D = r + S * 4, U = a.matrixWorldInverse;
              i.getNormalMatrix(U), (h === null || h.length < D) && (h = new Float32Array(D));
              for (let M = 0, k = r; M !== S; ++M, k += 4) E.copy(s[M]).applyMatrix4(U, i), E.normal.toArray(h, k), h[k + 3] = E.constant;
            }
            o.value = h, o.needsUpdate = true;
          }
          return A.numPlanes = S, A.numIntersection = 0, h;
        }
      }
      function Tl(C) {
        let A = /* @__PURE__ */ new WeakMap();
        function I(E, i) {
          return i === LE ? E.mapping = LB : i === Lo && (E.mapping = fB), E;
        }
        function g(E) {
          if (E && E.isTexture) {
            const i = E.mapping;
            if (i === LE || i === Lo) if (A.has(E)) {
              const o = A.get(E).texture;
              return I(o, E.mapping);
            } else {
              const o = E.image;
              if (o && o.height > 0) {
                const t = new Qw(o.height);
                return t.fromEquirectangularTexture(C, E), A.set(E, t), E.addEventListener("dispose", B), I(t.texture, E.mapping);
              } else return null;
            }
          }
          return E;
        }
        function B(E) {
          const i = E.target;
          i.removeEventListener("dispose", B);
          const o = A.get(i);
          o !== void 0 && (A.delete(i), o.dispose());
        }
        function Q() {
          A = /* @__PURE__ */ new WeakMap();
        }
        return {
          get: g,
          dispose: Q
        };
      }
      const JB = 4, Ws = [
        0.125,
        0.215,
        0.35,
        0.446,
        0.526,
        0.582
      ], WC = 20, vi = new se(), js = new mA();
      let Pi = null, Wi = 0, ji = 0, Vi = false;
      const vC = (1 + Math.sqrt(5)) / 2, yB = 1 / vC, Vs = [
        new J(-vC, yB, 0),
        new J(vC, yB, 0),
        new J(-yB, 0, vC),
        new J(yB, 0, vC),
        new J(0, vC, -yB),
        new J(0, vC, yB),
        new J(-1, 1, -1),
        new J(1, 1, -1),
        new J(-1, 1, 1),
        new J(1, 1, 1)
      ], bl = new J();
      class Xs {
        constructor(A) {
          this._renderer = A, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
        }
        fromScene(A, I = 0, g = 0.1, B = 100, Q = {}) {
          const { size: E = 256, position: i = bl } = Q;
          Pi = this._renderer.getRenderTarget(), Wi = this._renderer.getActiveCubeFace(), ji = this._renderer.getActiveMipmapLevel(), Vi = this._renderer.xr.enabled, this._renderer.xr.enabled = false, this._setSize(E);
          const o = this._allocateTargets();
          return o.depthBuffer = true, this._sceneToCubeUV(A, g, B, o, i), I > 0 && this._blur(o, 0, 0, I), this._applyPMREM(o), this._cleanup(o), o;
        }
        fromEquirectangular(A, I = null) {
          return this._fromTexture(A, I);
        }
        fromCubemap(A, I = null) {
          return this._fromTexture(A, I);
        }
        compileCubemapShader() {
          this._cubemapMaterial === null && (this._cubemapMaterial = Aa(), this._compileMaterial(this._cubemapMaterial));
        }
        compileEquirectangularShader() {
          this._equirectMaterial === null && (this._equirectMaterial = $s(), this._compileMaterial(this._equirectMaterial));
        }
        dispose() {
          this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
        }
        _setSize(A) {
          this._lodMax = Math.floor(Math.log2(A)), this._cubeSize = Math.pow(2, this._lodMax);
        }
        _dispose() {
          this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
          for (let A = 0; A < this._lodPlanes.length; A++) this._lodPlanes[A].dispose();
        }
        _cleanup(A) {
          this._renderer.setRenderTarget(Pi, Wi, ji), this._renderer.xr.enabled = Vi, A.scissorTest = false, lE(A, 0, 0, A.width, A.height);
        }
        _fromTexture(A, I) {
          A.mapping === LB || A.mapping === fB ? this._setSize(A.image.length === 0 ? 16 : A.image[0].width || A.image[0].image.width) : this._setSize(A.image.width / 4), Pi = this._renderer.getRenderTarget(), Wi = this._renderer.getActiveCubeFace(), ji = this._renderer.getActiveMipmapLevel(), Vi = this._renderer.xr.enabled, this._renderer.xr.enabled = false;
          const g = I || this._allocateTargets();
          return this._textureToCubeUV(A, g), this._applyPMREM(g), this._cleanup(g), g;
        }
        _allocateTargets() {
          const A = 3 * Math.max(this._cubeSize, 112), I = 4 * this._cubeSize, g = {
            magFilter: sg,
            minFilter: sg,
            generateMipmaps: false,
            type: DC,
            format: ag,
            colorSpace: Ag,
            depthBuffer: false
          }, B = zs(A, I, g);
          if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== A || this._pingPongRenderTarget.height !== I) {
            this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = zs(A, I, g);
            const { _lodMax: Q } = this;
            ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = xl(Q)), this._blurMaterial = Ol(Q, A, I);
          }
          return B;
        }
        _compileMaterial(A) {
          const I = new ig(this._lodPlanes[0], A);
          this._renderer.compile(I, vi);
        }
        _sceneToCubeUV(A, I, g, B, Q) {
          const o = new Qg(90, 1, I, g), t = [
            1,
            -1,
            1,
            1,
            1,
            1
          ], e = [
            1,
            1,
            1,
            -1,
            -1,
            -1
          ], s = this._renderer, a = s.autoClear, r = s.toneMapping;
          s.getClearColor(js), s.toneMapping = dC, s.autoClear = false, s.state.buffers.depth.getReversed() && (s.setRenderTarget(B), s.clearDepth(), s.setRenderTarget(null));
          const S = new VC({
            name: "PMREM.Background",
            side: Dg,
            depthWrite: false,
            depthTest: false
          }), h = new ig(new xQ(), S);
          let D = false;
          const U = A.background;
          U ? U.isColor && (S.color.copy(U), A.background = null, D = true) : (S.color.copy(js), D = true);
          for (let M = 0; M < 6; M++) {
            const k = M % 3;
            k === 0 ? (o.up.set(0, t[M], 0), o.position.set(Q.x, Q.y, Q.z), o.lookAt(Q.x + e[M], Q.y, Q.z)) : k === 1 ? (o.up.set(0, 0, t[M]), o.position.set(Q.x, Q.y, Q.z), o.lookAt(Q.x, Q.y + e[M], Q.z)) : (o.up.set(0, t[M], 0), o.position.set(Q.x, Q.y, Q.z), o.lookAt(Q.x, Q.y, Q.z + e[M]));
            const p = this._cubeSize;
            lE(B, k * p, M > 2 ? p : 0, p, p), s.setRenderTarget(B), D && s.render(h, o), s.render(A, o);
          }
          h.geometry.dispose(), h.material.dispose(), s.toneMapping = r, s.autoClear = a, A.background = U;
        }
        _textureToCubeUV(A, I) {
          const g = this._renderer, B = A.mapping === LB || A.mapping === fB;
          B ? (this._cubemapMaterial === null && (this._cubemapMaterial = Aa()), this._cubemapMaterial.uniforms.flipEnvMap.value = A.isRenderTargetTexture === false ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = $s());
          const Q = B ? this._cubemapMaterial : this._equirectMaterial, E = new ig(this._lodPlanes[0], Q), i = Q.uniforms;
          i.envMap.value = A;
          const o = this._cubeSize;
          lE(I, 0, 0, 3 * o, 2 * o), g.setRenderTarget(I), g.render(E, vi);
        }
        _applyPMREM(A) {
          const I = this._renderer, g = I.autoClear;
          I.autoClear = false;
          const B = this._lodPlanes.length;
          for (let Q = 1; Q < B; Q++) {
            const E = Math.sqrt(this._sigmas[Q] * this._sigmas[Q] - this._sigmas[Q - 1] * this._sigmas[Q - 1]), i = Vs[(B - Q - 1) % Vs.length];
            this._blur(A, Q - 1, Q, E, i);
          }
          I.autoClear = g;
        }
        _blur(A, I, g, B, Q) {
          const E = this._pingPongRenderTarget;
          this._halfBlur(A, E, I, g, B, "latitudinal", Q), this._halfBlur(E, A, g, g, B, "longitudinal", Q);
        }
        _halfBlur(A, I, g, B, Q, E, i) {
          const o = this._renderer, t = this._blurMaterial;
          E !== "latitudinal" && E !== "longitudinal" && console.error("blur direction must be either latitudinal or longitudinal!");
          const e = 3, s = new ig(this._lodPlanes[B], t), a = t.uniforms, r = this._sizeLods[g] - 1, c = isFinite(Q) ? Math.PI / (2 * r) : 2 * Math.PI / (2 * WC - 1), S = Q / c, h = isFinite(Q) ? 1 + Math.floor(e * S) : WC;
          h > WC && console.warn(`sigmaRadians, ${Q}, is too large and will clip, as it requested ${h} samples when the maximum is set to ${WC}`);
          const D = [];
          let U = 0;
          for (let Y = 0; Y < WC; ++Y) {
            const m = Y / S, K = Math.exp(-m * m / 2);
            D.push(K), Y === 0 ? U += K : Y < h && (U += 2 * K);
          }
          for (let Y = 0; Y < D.length; Y++) D[Y] = D[Y] / U;
          a.envMap.value = A.texture, a.samples.value = h, a.weights.value = D, a.latitudinal.value = E === "latitudinal", i && (a.poleAxis.value = i);
          const { _lodMax: M } = this;
          a.dTheta.value = c, a.mipInt.value = M - g;
          const k = this._sizeLods[B], p = 3 * k * (B > M - JB ? B - M + JB : 0), R = 4 * (this._cubeSize - k);
          lE(I, p, R, 3 * k, 2 * k), o.setRenderTarget(I), o.render(s, vi);
        }
      }
      function xl(C) {
        const A = [], I = [], g = [];
        let B = C;
        const Q = C - JB + 1 + Ws.length;
        for (let E = 0; E < Q; E++) {
          const i = Math.pow(2, B);
          I.push(i);
          let o = 1 / i;
          E > C - JB ? o = Ws[E - C + JB - 1] : E === 0 && (o = 0), g.push(o);
          const t = 1 / (i - 2), e = -t, s = 1 + t, a = [
            e,
            e,
            s,
            e,
            s,
            s,
            e,
            e,
            s,
            s,
            e,
            s
          ], r = 6, c = 6, S = 3, h = 2, D = 1, U = new Float32Array(S * c * r), M = new Float32Array(h * c * r), k = new Float32Array(D * c * r);
          for (let R = 0; R < r; R++) {
            const Y = R % 3 * 2 / 3 - 1, m = R > 2 ? 0 : -1, K = [
              Y,
              m,
              0,
              Y + 2 / 3,
              m,
              0,
              Y + 2 / 3,
              m + 1,
              0,
              Y,
              m,
              0,
              Y + 2 / 3,
              m + 1,
              0,
              Y,
              m + 1,
              0
            ];
            U.set(K, S * c * R), M.set(a, h * c * R);
            const y = [
              R,
              R,
              R,
              R,
              R,
              R
            ];
            k.set(y, D * c * R);
          }
          const p = new fg();
          p.setAttribute("position", new tg(U, S)), p.setAttribute("uv", new tg(M, h)), p.setAttribute("faceIndex", new tg(k, D)), A.push(p), B > JB && B--;
        }
        return {
          lodPlanes: A,
          sizeLods: I,
          sigmas: g
        };
      }
      function zs(C, A, I) {
        const g = new gB(C, A, I);
        return g.texture.mapping = XE, g.texture.name = "PMREM.cubeUv", g.scissorTest = true, g;
      }
      function lE(C, A, I, g, B) {
        C.viewport.set(A, I, g, B), C.scissor.set(A, I, g, B);
      }
      function Ol(C, A, I) {
        const g = new Float32Array(WC), B = new J(0, 1, 0);
        return new YC({
          name: "SphericalGaussianBlur",
          defines: {
            n: WC,
            CUBEUV_TEXEL_WIDTH: 1 / A,
            CUBEUV_TEXEL_HEIGHT: 1 / I,
            CUBEUV_MAX_MIP: `${C}.0`
          },
          uniforms: {
            envMap: {
              value: null
            },
            samples: {
              value: 1
            },
            weights: {
              value: g
            },
            latitudinal: {
              value: false
            },
            dTheta: {
              value: 0
            },
            mipInt: {
              value: 0
            },
            poleAxis: {
              value: B
            }
          },
          vertexShader: ne(),
          fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
          blending: pC,
          depthTest: false,
          depthWrite: false
        });
      }
      function $s() {
        return new YC({
          name: "EquirectangularToCubeUV",
          uniforms: {
            envMap: {
              value: null
            }
          },
          vertexShader: ne(),
          fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,
          blending: pC,
          depthTest: false,
          depthWrite: false
        });
      }
      function Aa() {
        return new YC({
          name: "CubemapToCubeUV",
          uniforms: {
            envMap: {
              value: null
            },
            flipEnvMap: {
              value: -1
            }
          },
          vertexShader: ne(),
          fragmentShader: `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,
          blending: pC,
          depthTest: false,
          depthWrite: false
        });
      }
      function ne() {
        return `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
      }
      function _l(C) {
        let A = /* @__PURE__ */ new WeakMap(), I = null;
        function g(i) {
          if (i && i.isTexture) {
            const o = i.mapping, t = o === LE || o === Lo, e = o === LB || o === fB;
            if (t || e) {
              let s = A.get(i);
              const a = s !== void 0 ? s.texture.pmremVersion : 0;
              if (i.isRenderTargetTexture && i.pmremVersion !== a) return I === null && (I = new Xs(C)), s = t ? I.fromEquirectangular(i, s) : I.fromCubemap(i, s), s.texture.pmremVersion = i.pmremVersion, A.set(i, s), s.texture;
              if (s !== void 0) return s.texture;
              {
                const r = i.image;
                return t && r && r.height > 0 || e && r && B(r) ? (I === null && (I = new Xs(C)), s = t ? I.fromEquirectangular(i) : I.fromCubemap(i), s.texture.pmremVersion = i.pmremVersion, A.set(i, s), i.addEventListener("dispose", Q), s.texture) : null;
              }
            }
          }
          return i;
        }
        function B(i) {
          let o = 0;
          const t = 6;
          for (let e = 0; e < t; e++) i[e] !== void 0 && o++;
          return o === t;
        }
        function Q(i) {
          const o = i.target;
          o.removeEventListener("dispose", Q);
          const t = A.get(o);
          t !== void 0 && (A.delete(o), t.dispose());
        }
        function E() {
          A = /* @__PURE__ */ new WeakMap(), I !== null && (I.dispose(), I = null);
        }
        return {
          get: g,
          dispose: E
        };
      }
      function Zl(C) {
        const A = {};
        function I(g) {
          if (A[g] !== void 0) return A[g];
          let B;
          switch (g) {
            case "WEBGL_depth_texture":
              B = C.getExtension("WEBGL_depth_texture") || C.getExtension("MOZ_WEBGL_depth_texture") || C.getExtension("WEBKIT_WEBGL_depth_texture");
              break;
            case "EXT_texture_filter_anisotropic":
              B = C.getExtension("EXT_texture_filter_anisotropic") || C.getExtension("MOZ_EXT_texture_filter_anisotropic") || C.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
              break;
            case "WEBGL_compressed_texture_s3tc":
              B = C.getExtension("WEBGL_compressed_texture_s3tc") || C.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || C.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
              break;
            case "WEBGL_compressed_texture_pvrtc":
              B = C.getExtension("WEBGL_compressed_texture_pvrtc") || C.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
              break;
            default:
              B = C.getExtension(g);
          }
          return A[g] = B, B;
        }
        return {
          has: function(g) {
            return I(g) !== null;
          },
          init: function() {
            I("EXT_color_buffer_float"), I("WEBGL_clip_cull_distance"), I("OES_texture_float_linear"), I("EXT_color_buffer_half_float"), I("WEBGL_multisampled_render_to_texture"), I("WEBGL_render_shared_exponent");
          },
          get: function(g) {
            const B = I(g);
            return B === null && JQ("THREE.WebGLRenderer: " + g + " extension not supported."), B;
          }
        };
      }
      function vl(C, A, I, g) {
        const B = {}, Q = /* @__PURE__ */ new WeakMap();
        function E(s) {
          const a = s.target;
          a.index !== null && A.remove(a.index);
          for (const c in a.attributes) A.remove(a.attributes[c]);
          a.removeEventListener("dispose", E), delete B[a.id];
          const r = Q.get(a);
          r && (A.remove(r), Q.delete(a)), g.releaseStatesOfGeometry(a), a.isInstancedBufferGeometry === true && delete a._maxInstanceCount, I.memory.geometries--;
        }
        function i(s, a) {
          return B[a.id] === true || (a.addEventListener("dispose", E), B[a.id] = true, I.memory.geometries++), a;
        }
        function o(s) {
          const a = s.attributes;
          for (const r in a) A.update(a[r], C.ARRAY_BUFFER);
        }
        function t(s) {
          const a = [], r = s.index, c = s.attributes.position;
          let S = 0;
          if (r !== null) {
            const U = r.array;
            S = r.version;
            for (let M = 0, k = U.length; M < k; M += 3) {
              const p = U[M + 0], R = U[M + 1], Y = U[M + 2];
              a.push(p, R, R, Y, Y, p);
            }
          } else if (c !== void 0) {
            const U = c.array;
            S = c.version;
            for (let M = 0, k = U.length / 3 - 1; M < k; M += 3) {
              const p = M + 0, R = M + 1, Y = M + 2;
              a.push(p, R, R, Y, Y, p);
            }
          } else return;
          const h = new (dD(a) ? fD : LD)(a, 1);
          h.version = S;
          const D = Q.get(s);
          D && A.remove(D), Q.set(s, h);
        }
        function e(s) {
          const a = Q.get(s);
          if (a) {
            const r = s.index;
            r !== null && a.version < r.version && t(s);
          } else t(s);
          return Q.get(s);
        }
        return {
          get: i,
          update: o,
          getWireframeAttribute: e
        };
      }
      function Pl(C, A, I) {
        let g;
        function B(a) {
          g = a;
        }
        let Q, E;
        function i(a) {
          Q = a.type, E = a.bytesPerElement;
        }
        function o(a, r) {
          C.drawElements(g, r, Q, a * E), I.update(r, g, 1);
        }
        function t(a, r, c) {
          c !== 0 && (C.drawElementsInstanced(g, r, Q, a * E, c), I.update(r, g, c));
        }
        function e(a, r, c) {
          if (c === 0) return;
          A.get("WEBGL_multi_draw").multiDrawElementsWEBGL(g, r, 0, Q, a, 0, c);
          let h = 0;
          for (let D = 0; D < c; D++) h += r[D];
          I.update(h, g, 1);
        }
        function s(a, r, c, S) {
          if (c === 0) return;
          const h = A.get("WEBGL_multi_draw");
          if (h === null) for (let D = 0; D < a.length; D++) t(a[D] / E, r[D], S[D]);
          else {
            h.multiDrawElementsInstancedWEBGL(g, r, 0, Q, a, 0, S, 0, c);
            let D = 0;
            for (let U = 0; U < c; U++) D += r[U] * S[U];
            I.update(D, g, 1);
          }
        }
        this.setMode = B, this.setIndex = i, this.render = o, this.renderInstances = t, this.renderMultiDraw = e, this.renderMultiDrawInstances = s;
      }
      function Wl(C) {
        const A = {
          geometries: 0,
          textures: 0
        }, I = {
          frame: 0,
          calls: 0,
          triangles: 0,
          points: 0,
          lines: 0
        };
        function g(Q, E, i) {
          switch (I.calls++, E) {
            case C.TRIANGLES:
              I.triangles += i * (Q / 3);
              break;
            case C.LINES:
              I.lines += i * (Q / 2);
              break;
            case C.LINE_STRIP:
              I.lines += i * (Q - 1);
              break;
            case C.LINE_LOOP:
              I.lines += i * Q;
              break;
            case C.POINTS:
              I.points += i * Q;
              break;
            default:
              console.error("THREE.WebGLInfo: Unknown draw mode:", E);
              break;
          }
        }
        function B() {
          I.calls = 0, I.triangles = 0, I.points = 0, I.lines = 0;
        }
        return {
          memory: A,
          render: I,
          programs: null,
          autoReset: true,
          reset: B,
          update: g
        };
      }
      function jl(C, A, I) {
        const g = /* @__PURE__ */ new WeakMap(), B = new BI();
        function Q(E, i, o) {
          const t = E.morphTargetInfluences, e = i.morphAttributes.position || i.morphAttributes.normal || i.morphAttributes.color, s = e !== void 0 ? e.length : 0;
          let a = g.get(i);
          if (a === void 0 || a.count !== s) {
            let K = function() {
              Y.dispose(), g.delete(i), i.removeEventListener("dispose", K);
            };
            a !== void 0 && a.texture.dispose();
            const r = i.morphAttributes.position !== void 0, c = i.morphAttributes.normal !== void 0, S = i.morphAttributes.color !== void 0, h = i.morphAttributes.position || [], D = i.morphAttributes.normal || [], U = i.morphAttributes.color || [];
            let M = 0;
            r === true && (M = 1), c === true && (M = 2), S === true && (M = 3);
            let k = i.attributes.position.count * M, p = 1;
            k > A.maxTextureSize && (p = Math.ceil(k / A.maxTextureSize), k = A.maxTextureSize);
            const R = new Float32Array(k * p * 4 * s), Y = new YD(R, k, p, s);
            Y.type = dg, Y.needsUpdate = true;
            const m = M * 4;
            for (let y = 0; y < s; y++) {
              const q = h[y], x = D[y], Z = U[y], j = k * p * 4 * y;
              for (let z = 0; z < q.count; z++) {
                const V = z * m;
                r === true && (B.fromBufferAttribute(q, z), R[j + V + 0] = B.x, R[j + V + 1] = B.y, R[j + V + 2] = B.z, R[j + V + 3] = 0), c === true && (B.fromBufferAttribute(x, z), R[j + V + 4] = B.x, R[j + V + 5] = B.y, R[j + V + 6] = B.z, R[j + V + 7] = 0), S === true && (B.fromBufferAttribute(Z, z), R[j + V + 8] = B.x, R[j + V + 9] = B.y, R[j + V + 10] = B.z, R[j + V + 11] = Z.itemSize === 4 ? B.w : 1);
              }
            }
            a = {
              count: s,
              texture: Y,
              size: new XA(k, p)
            }, g.set(i, a), i.addEventListener("dispose", K);
          }
          if (E.isInstancedMesh === true && E.morphTexture !== null) o.getUniforms().setValue(C, "morphTexture", E.morphTexture, I);
          else {
            let r = 0;
            for (let S = 0; S < t.length; S++) r += t[S];
            const c = i.morphTargetsRelative ? 1 : 1 - r;
            o.getUniforms().setValue(C, "morphTargetBaseInfluence", c), o.getUniforms().setValue(C, "morphTargetInfluences", t);
          }
          o.getUniforms().setValue(C, "morphTargetsTexture", a.texture, I), o.getUniforms().setValue(C, "morphTargetsTextureSize", a.size);
        }
        return {
          update: Q
        };
      }
      function Vl(C, A, I, g) {
        let B = /* @__PURE__ */ new WeakMap();
        function Q(o) {
          const t = g.render.frame, e = o.geometry, s = A.get(o, e);
          if (B.get(s) !== t && (A.update(s), B.set(s, t)), o.isInstancedMesh && (o.hasEventListener("dispose", i) === false && o.addEventListener("dispose", i), B.get(o) !== t && (I.update(o.instanceMatrix, C.ARRAY_BUFFER), o.instanceColor !== null && I.update(o.instanceColor, C.ARRAY_BUFFER), B.set(o, t))), o.isSkinnedMesh) {
            const a = o.skeleton;
            B.get(a) !== t && (a.update(), B.set(a, t));
          }
          return s;
        }
        function E() {
          B = /* @__PURE__ */ new WeakMap();
        }
        function i(o) {
          const t = o.target;
          t.removeEventListener("dispose", i), I.remove(t.instanceMatrix), t.instanceColor !== null && I.remove(t.instanceColor);
        }
        return {
          update: Q,
          dispose: E
        };
      }
      const VD = new uI(), Ia = new OD(1, 1), XD = new YD(), zD = new Hh(), $D = new mD(), ga = [], Ca = [], Ba = new Float32Array(16), Qa = new Float32Array(9), Ea = new Float32Array(4);
      function VB(C, A, I) {
        const g = C[0];
        if (g <= 0 || g > 0) return C;
        const B = A * I;
        let Q = ga[B];
        if (Q === void 0 && (Q = new Float32Array(B), ga[B] = Q), A !== 0) {
          g.toArray(Q, 0);
          for (let E = 1, i = 0; E !== A; ++E) i += I, C[E].toArray(Q, i);
        }
        return Q;
      }
      function HI(C, A) {
        if (C.length !== A.length) return false;
        for (let I = 0, g = C.length; I < g; I++) if (C[I] !== A[I]) return false;
        return true;
      }
      function mI(C, A) {
        for (let I = 0, g = A.length; I < g; I++) C[I] = A[I];
      }
      function Ai(C, A) {
        let I = Ca[A];
        I === void 0 && (I = new Int32Array(A), Ca[A] = I);
        for (let g = 0; g !== A; ++g) I[g] = C.allocateTextureUnit();
        return I;
      }
      function Xl(C, A) {
        const I = this.cache;
        I[0] !== A && (C.uniform1f(this.addr, A), I[0] = A);
      }
      function zl(C, A) {
        const I = this.cache;
        if (A.x !== void 0) (I[0] !== A.x || I[1] !== A.y) && (C.uniform2f(this.addr, A.x, A.y), I[0] = A.x, I[1] = A.y);
        else {
          if (HI(I, A)) return;
          C.uniform2fv(this.addr, A), mI(I, A);
        }
      }
      function $l(C, A) {
        const I = this.cache;
        if (A.x !== void 0) (I[0] !== A.x || I[1] !== A.y || I[2] !== A.z) && (C.uniform3f(this.addr, A.x, A.y, A.z), I[0] = A.x, I[1] = A.y, I[2] = A.z);
        else if (A.r !== void 0) (I[0] !== A.r || I[1] !== A.g || I[2] !== A.b) && (C.uniform3f(this.addr, A.r, A.g, A.b), I[0] = A.r, I[1] = A.g, I[2] = A.b);
        else {
          if (HI(I, A)) return;
          C.uniform3fv(this.addr, A), mI(I, A);
        }
      }
      function AG(C, A) {
        const I = this.cache;
        if (A.x !== void 0) (I[0] !== A.x || I[1] !== A.y || I[2] !== A.z || I[3] !== A.w) && (C.uniform4f(this.addr, A.x, A.y, A.z, A.w), I[0] = A.x, I[1] = A.y, I[2] = A.z, I[3] = A.w);
        else {
          if (HI(I, A)) return;
          C.uniform4fv(this.addr, A), mI(I, A);
        }
      }
      function IG(C, A) {
        const I = this.cache, g = A.elements;
        if (g === void 0) {
          if (HI(I, A)) return;
          C.uniformMatrix2fv(this.addr, false, A), mI(I, A);
        } else {
          if (HI(I, g)) return;
          Ea.set(g), C.uniformMatrix2fv(this.addr, false, Ea), mI(I, g);
        }
      }
      function gG(C, A) {
        const I = this.cache, g = A.elements;
        if (g === void 0) {
          if (HI(I, A)) return;
          C.uniformMatrix3fv(this.addr, false, A), mI(I, A);
        } else {
          if (HI(I, g)) return;
          Qa.set(g), C.uniformMatrix3fv(this.addr, false, Qa), mI(I, g);
        }
      }
      function CG(C, A) {
        const I = this.cache, g = A.elements;
        if (g === void 0) {
          if (HI(I, A)) return;
          C.uniformMatrix4fv(this.addr, false, A), mI(I, A);
        } else {
          if (HI(I, g)) return;
          Ba.set(g), C.uniformMatrix4fv(this.addr, false, Ba), mI(I, g);
        }
      }
      function BG(C, A) {
        const I = this.cache;
        I[0] !== A && (C.uniform1i(this.addr, A), I[0] = A);
      }
      function QG(C, A) {
        const I = this.cache;
        if (A.x !== void 0) (I[0] !== A.x || I[1] !== A.y) && (C.uniform2i(this.addr, A.x, A.y), I[0] = A.x, I[1] = A.y);
        else {
          if (HI(I, A)) return;
          C.uniform2iv(this.addr, A), mI(I, A);
        }
      }
      function EG(C, A) {
        const I = this.cache;
        if (A.x !== void 0) (I[0] !== A.x || I[1] !== A.y || I[2] !== A.z) && (C.uniform3i(this.addr, A.x, A.y, A.z), I[0] = A.x, I[1] = A.y, I[2] = A.z);
        else {
          if (HI(I, A)) return;
          C.uniform3iv(this.addr, A), mI(I, A);
        }
      }
      function iG(C, A) {
        const I = this.cache;
        if (A.x !== void 0) (I[0] !== A.x || I[1] !== A.y || I[2] !== A.z || I[3] !== A.w) && (C.uniform4i(this.addr, A.x, A.y, A.z, A.w), I[0] = A.x, I[1] = A.y, I[2] = A.z, I[3] = A.w);
        else {
          if (HI(I, A)) return;
          C.uniform4iv(this.addr, A), mI(I, A);
        }
      }
      function oG(C, A) {
        const I = this.cache;
        I[0] !== A && (C.uniform1ui(this.addr, A), I[0] = A);
      }
      function tG(C, A) {
        const I = this.cache;
        if (A.x !== void 0) (I[0] !== A.x || I[1] !== A.y) && (C.uniform2ui(this.addr, A.x, A.y), I[0] = A.x, I[1] = A.y);
        else {
          if (HI(I, A)) return;
          C.uniform2uiv(this.addr, A), mI(I, A);
        }
      }
      function eG(C, A) {
        const I = this.cache;
        if (A.x !== void 0) (I[0] !== A.x || I[1] !== A.y || I[2] !== A.z) && (C.uniform3ui(this.addr, A.x, A.y, A.z), I[0] = A.x, I[1] = A.y, I[2] = A.z);
        else {
          if (HI(I, A)) return;
          C.uniform3uiv(this.addr, A), mI(I, A);
        }
      }
      function sG(C, A) {
        const I = this.cache;
        if (A.x !== void 0) (I[0] !== A.x || I[1] !== A.y || I[2] !== A.z || I[3] !== A.w) && (C.uniform4ui(this.addr, A.x, A.y, A.z, A.w), I[0] = A.x, I[1] = A.y, I[2] = A.z, I[3] = A.w);
        else {
          if (HI(I, A)) return;
          C.uniform4uiv(this.addr, A), mI(I, A);
        }
      }
      function aG(C, A, I) {
        const g = this.cache, B = I.allocateTextureUnit();
        g[0] !== B && (C.uniform1i(this.addr, B), g[0] = B);
        let Q;
        this.type === C.SAMPLER_2D_SHADOW ? (Ia.compareFunction = RD, Q = Ia) : Q = VD, I.setTexture2D(A || Q, B);
      }
      function DG(C, A, I) {
        const g = this.cache, B = I.allocateTextureUnit();
        g[0] !== B && (C.uniform1i(this.addr, B), g[0] = B), I.setTexture3D(A || zD, B);
      }
      function nG(C, A, I) {
        const g = this.cache, B = I.allocateTextureUnit();
        g[0] !== B && (C.uniform1i(this.addr, B), g[0] = B), I.setTextureCube(A || $D, B);
      }
      function rG(C, A, I) {
        const g = this.cache, B = I.allocateTextureUnit();
        g[0] !== B && (C.uniform1i(this.addr, B), g[0] = B), I.setTexture2DArray(A || XD, B);
      }
      function hG(C) {
        switch (C) {
          case 5126:
            return Xl;
          case 35664:
            return zl;
          case 35665:
            return $l;
          case 35666:
            return AG;
          case 35674:
            return IG;
          case 35675:
            return gG;
          case 35676:
            return CG;
          case 5124:
          case 35670:
            return BG;
          case 35667:
          case 35671:
            return QG;
          case 35668:
          case 35672:
            return EG;
          case 35669:
          case 35673:
            return iG;
          case 5125:
            return oG;
          case 36294:
            return tG;
          case 36295:
            return eG;
          case 36296:
            return sG;
          case 35678:
          case 36198:
          case 36298:
          case 36306:
          case 35682:
            return aG;
          case 35679:
          case 36299:
          case 36307:
            return DG;
          case 35680:
          case 36300:
          case 36308:
          case 36293:
            return nG;
          case 36289:
          case 36303:
          case 36311:
          case 36292:
            return rG;
        }
      }
      function wG(C, A) {
        C.uniform1fv(this.addr, A);
      }
      function cG(C, A) {
        const I = VB(A, this.size, 2);
        C.uniform2fv(this.addr, I);
      }
      function SG(C, A) {
        const I = VB(A, this.size, 3);
        C.uniform3fv(this.addr, I);
      }
      function lG(C, A) {
        const I = VB(A, this.size, 4);
        C.uniform4fv(this.addr, I);
      }
      function GG(C, A) {
        const I = VB(A, this.size, 4);
        C.uniformMatrix2fv(this.addr, false, I);
      }
      function kG(C, A) {
        const I = VB(A, this.size, 9);
        C.uniformMatrix3fv(this.addr, false, I);
      }
      function yG(C, A) {
        const I = VB(A, this.size, 16);
        C.uniformMatrix4fv(this.addr, false, I);
      }
      function MG(C, A) {
        C.uniform1iv(this.addr, A);
      }
      function KG(C, A) {
        C.uniform2iv(this.addr, A);
      }
      function UG(C, A) {
        C.uniform3iv(this.addr, A);
      }
      function NG(C, A) {
        C.uniform4iv(this.addr, A);
      }
      function FG(C, A) {
        C.uniform1uiv(this.addr, A);
      }
      function JG(C, A) {
        C.uniform2uiv(this.addr, A);
      }
      function RG(C, A) {
        C.uniform3uiv(this.addr, A);
      }
      function pG(C, A) {
        C.uniform4uiv(this.addr, A);
      }
      function dG(C, A, I) {
        const g = this.cache, B = A.length, Q = Ai(I, B);
        HI(g, Q) || (C.uniform1iv(this.addr, Q), mI(g, Q));
        for (let E = 0; E !== B; ++E) I.setTexture2D(A[E] || VD, Q[E]);
      }
      function YG(C, A, I) {
        const g = this.cache, B = A.length, Q = Ai(I, B);
        HI(g, Q) || (C.uniform1iv(this.addr, Q), mI(g, Q));
        for (let E = 0; E !== B; ++E) I.setTexture3D(A[E] || zD, Q[E]);
      }
      function qG(C, A, I) {
        const g = this.cache, B = A.length, Q = Ai(I, B);
        HI(g, Q) || (C.uniform1iv(this.addr, Q), mI(g, Q));
        for (let E = 0; E !== B; ++E) I.setTextureCube(A[E] || $D, Q[E]);
      }
      function LG(C, A, I) {
        const g = this.cache, B = A.length, Q = Ai(I, B);
        HI(g, Q) || (C.uniform1iv(this.addr, Q), mI(g, Q));
        for (let E = 0; E !== B; ++E) I.setTexture2DArray(A[E] || XD, Q[E]);
      }
      function fG(C) {
        switch (C) {
          case 5126:
            return wG;
          case 35664:
            return cG;
          case 35665:
            return SG;
          case 35666:
            return lG;
          case 35674:
            return GG;
          case 35675:
            return kG;
          case 35676:
            return yG;
          case 5124:
          case 35670:
            return MG;
          case 35667:
          case 35671:
            return KG;
          case 35668:
          case 35672:
            return UG;
          case 35669:
          case 35673:
            return NG;
          case 5125:
            return FG;
          case 36294:
            return JG;
          case 36295:
            return RG;
          case 36296:
            return pG;
          case 35678:
          case 36198:
          case 36298:
          case 36306:
          case 35682:
            return dG;
          case 35679:
          case 36299:
          case 36307:
            return YG;
          case 35680:
          case 36300:
          case 36308:
          case 36293:
            return qG;
          case 36289:
          case 36303:
          case 36311:
          case 36292:
            return LG;
        }
      }
      class uG {
        constructor(A, I, g) {
          this.id = A, this.addr = g, this.cache = [], this.type = I.type, this.setValue = hG(I.type);
        }
      }
      class HG {
        constructor(A, I, g) {
          this.id = A, this.addr = g, this.cache = [], this.type = I.type, this.size = I.size, this.setValue = fG(I.type);
        }
      }
      class mG {
        constructor(A) {
          this.id = A, this.seq = [], this.map = {};
        }
        setValue(A, I, g) {
          const B = this.seq;
          for (let Q = 0, E = B.length; Q !== E; ++Q) {
            const i = B[Q];
            i.setValue(A, I[i.id], g);
          }
        }
      }
      const Xi = /(\w+)(\])?(\[|\.)?/g;
      function ia(C, A) {
        C.seq.push(A), C.map[A.id] = A;
      }
      function TG(C, A, I) {
        const g = C.name, B = g.length;
        for (Xi.lastIndex = 0; ; ) {
          const Q = Xi.exec(g), E = Xi.lastIndex;
          let i = Q[1];
          const o = Q[2] === "]", t = Q[3];
          if (o && (i = i | 0), t === void 0 || t === "[" && E + 2 === B) {
            ia(I, t === void 0 ? new uG(i, C, A) : new HG(i, C, A));
            break;
          } else {
            let s = I.map[i];
            s === void 0 && (s = new mG(i), ia(I, s)), I = s;
          }
        }
      }
      class dE {
        constructor(A, I) {
          this.seq = [], this.map = {};
          const g = A.getProgramParameter(I, A.ACTIVE_UNIFORMS);
          for (let B = 0; B < g; ++B) {
            const Q = A.getActiveUniform(I, B), E = A.getUniformLocation(I, Q.name);
            TG(Q, E, this);
          }
        }
        setValue(A, I, g, B) {
          const Q = this.map[I];
          Q !== void 0 && Q.setValue(A, g, B);
        }
        setOptional(A, I, g) {
          const B = I[g];
          B !== void 0 && this.setValue(A, g, B);
        }
        static upload(A, I, g, B) {
          for (let Q = 0, E = I.length; Q !== E; ++Q) {
            const i = I[Q], o = g[i.id];
            o.needsUpdate !== false && i.setValue(A, o.value, B);
          }
        }
        static seqWithValue(A, I) {
          const g = [];
          for (let B = 0, Q = A.length; B !== Q; ++B) {
            const E = A[B];
            E.id in I && g.push(E);
          }
          return g;
        }
      }
      function oa(C, A, I) {
        const g = C.createShader(A);
        return C.shaderSource(g, I), C.compileShader(g), g;
      }
      const bG = 37297;
      let xG = 0;
      function OG(C, A) {
        const I = C.split(`
`), g = [], B = Math.max(A - 6, 0), Q = Math.min(A + 6, I.length);
        for (let E = B; E < Q; E++) {
          const i = E + 1;
          g.push(`${i === A ? ">" : " "} ${i}: ${I[E]}`);
        }
        return g.join(`
`);
      }
      const ta = new ZA();
      function _G(C) {
        gI._getMatrix(ta, gI.workingColorSpace, C);
        const A = `mat3( ${ta.elements.map((I) => I.toFixed(4))} )`;
        switch (gI.getTransfer(C)) {
          case uE:
            return [
              A,
              "LinearTransferOETF"
            ];
          case eI:
            return [
              A,
              "sRGBTransferOETF"
            ];
          default:
            return console.warn("THREE.WebGLProgram: Unsupported color space: ", C), [
              A,
              "LinearTransferOETF"
            ];
        }
      }
      function ea(C, A, I) {
        const g = C.getShaderParameter(A, C.COMPILE_STATUS), Q = (C.getShaderInfoLog(A) || "").trim();
        if (g && Q === "") return "";
        const E = /ERROR: 0:(\d+)/.exec(Q);
        if (E) {
          const i = parseInt(E[1]);
          return I.toUpperCase() + `

` + Q + `

` + OG(C.getShaderSource(A), i);
        } else return Q;
      }
      function ZG(C, A) {
        const I = _G(A);
        return [
          `vec4 ${C}( vec4 value ) {`,
          `	return ${I[1]}( vec4( value.rgb * ${I[0]}, value.a ) );`,
          "}"
        ].join(`
`);
      }
      function vG(C, A) {
        let I;
        switch (A) {
          case Wr:
            I = "Linear";
            break;
          case jr:
            I = "Reinhard";
            break;
          case Vr:
            I = "Cineon";
            break;
          case Xr:
            I = "ACESFilmic";
            break;
          case $r:
            I = "AgX";
            break;
          case Ah:
            I = "Neutral";
            break;
          case zr:
            I = "Custom";
            break;
          default:
            console.warn("THREE.WebGLProgram: Unsupported toneMapping:", A), I = "Linear";
        }
        return "vec3 " + C + "( vec3 color ) { return " + I + "ToneMapping( color ); }";
      }
      const GE = new J();
      function PG() {
        gI.getLuminanceCoefficients(GE);
        const C = GE.x.toFixed(4), A = GE.y.toFixed(4), I = GE.z.toFixed(4);
        return [
          "float luminance( const in vec3 rgb ) {",
          `	const vec3 weights = vec3( ${C}, ${A}, ${I} );`,
          "	return dot( weights, rgb );",
          "}"
        ].join(`
`);
      }
      function WG(C) {
        return [
          C.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
          C.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
        ].filter(DQ).join(`
`);
      }
      function jG(C) {
        const A = [];
        for (const I in C) {
          const g = C[I];
          g !== false && A.push("#define " + I + " " + g);
        }
        return A.join(`
`);
      }
      function VG(C, A) {
        const I = {}, g = C.getProgramParameter(A, C.ACTIVE_ATTRIBUTES);
        for (let B = 0; B < g; B++) {
          const Q = C.getActiveAttrib(A, B), E = Q.name;
          let i = 1;
          Q.type === C.FLOAT_MAT2 && (i = 2), Q.type === C.FLOAT_MAT3 && (i = 3), Q.type === C.FLOAT_MAT4 && (i = 4), I[E] = {
            type: Q.type,
            location: C.getAttribLocation(A, E),
            locationSize: i
          };
        }
        return I;
      }
      function DQ(C) {
        return C !== "";
      }
      function sa(C, A) {
        const I = A.numSpotLightShadows + A.numSpotLightMaps - A.numSpotLightShadowsWithMaps;
        return C.replace(/NUM_DIR_LIGHTS/g, A.numDirLights).replace(/NUM_SPOT_LIGHTS/g, A.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, A.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, I).replace(/NUM_RECT_AREA_LIGHTS/g, A.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, A.numPointLights).replace(/NUM_HEMI_LIGHTS/g, A.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, A.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, A.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, A.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, A.numPointLightShadows);
      }
      function aa(C, A) {
        return C.replace(/NUM_CLIPPING_PLANES/g, A.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, A.numClippingPlanes - A.numClipIntersection);
      }
      const XG = /^[ \t]*#include +<([\w\d./]+)>/gm;
      function rt(C) {
        return C.replace(XG, $G);
      }
      const zG = /* @__PURE__ */ new Map();
      function $G(C, A) {
        let I = bA[A];
        if (I === void 0) {
          const g = zG.get(A);
          if (g !== void 0) I = bA[g], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', A, g);
          else throw new Error("Can not resolve #include <" + A + ">");
        }
        return rt(I);
      }
      const Ak = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
      function Da(C) {
        return C.replace(Ak, Ik);
      }
      function Ik(C, A, I, g) {
        let B = "";
        for (let Q = parseInt(A); Q < parseInt(I); Q++) B += g.replace(/\[\s*i\s*\]/g, "[ " + Q + " ]").replace(/UNROLLED_LOOP_INDEX/g, Q);
        return B;
      }
      function na(C) {
        let A = `precision ${C.precision} float;
	precision ${C.precision} int;
	precision ${C.precision} sampler2D;
	precision ${C.precision} samplerCube;
	precision ${C.precision} sampler3D;
	precision ${C.precision} sampler2DArray;
	precision ${C.precision} sampler2DShadow;
	precision ${C.precision} samplerCubeShadow;
	precision ${C.precision} sampler2DArrayShadow;
	precision ${C.precision} isampler2D;
	precision ${C.precision} isampler3D;
	precision ${C.precision} isamplerCube;
	precision ${C.precision} isampler2DArray;
	precision ${C.precision} usampler2D;
	precision ${C.precision} usampler3D;
	precision ${C.precision} usamplerCube;
	precision ${C.precision} usampler2DArray;
	`;
        return C.precision === "highp" ? A += `
#define HIGH_PRECISION` : C.precision === "mediump" ? A += `
#define MEDIUM_PRECISION` : C.precision === "lowp" && (A += `
#define LOW_PRECISION`), A;
      }
      function gk(C) {
        let A = "SHADOWMAP_TYPE_BASIC";
        return C.shadowMapType === cD ? A = "SHADOWMAP_TYPE_PCF" : C.shadowMapType === Nr ? A = "SHADOWMAP_TYPE_PCF_SOFT" : C.shadowMapType === tC && (A = "SHADOWMAP_TYPE_VSM"), A;
      }
      function Ck(C) {
        let A = "ENVMAP_TYPE_CUBE";
        if (C.envMap) switch (C.envMapMode) {
          case LB:
          case fB:
            A = "ENVMAP_TYPE_CUBE";
            break;
          case XE:
            A = "ENVMAP_TYPE_CUBE_UV";
            break;
        }
        return A;
      }
      function Bk(C) {
        let A = "ENVMAP_MODE_REFLECTION";
        if (C.envMap) switch (C.envMapMode) {
          case fB:
            A = "ENVMAP_MODE_REFRACTION";
            break;
        }
        return A;
      }
      function Qk(C) {
        let A = "ENVMAP_BLENDING_NONE";
        if (C.envMap) switch (C.combine) {
          case SD:
            A = "ENVMAP_BLENDING_MULTIPLY";
            break;
          case vr:
            A = "ENVMAP_BLENDING_MIX";
            break;
          case Pr:
            A = "ENVMAP_BLENDING_ADD";
            break;
        }
        return A;
      }
      function Ek(C) {
        const A = C.envMapCubeUVHeight;
        if (A === null) return null;
        const I = Math.log2(A) - 2, g = 1 / A;
        return {
          texelWidth: 1 / (3 * Math.max(Math.pow(2, I), 112)),
          texelHeight: g,
          maxMip: I
        };
      }
      function ik(C, A, I, g) {
        const B = C.getContext(), Q = I.defines;
        let E = I.vertexShader, i = I.fragmentShader;
        const o = gk(I), t = Ck(I), e = Bk(I), s = Qk(I), a = Ek(I), r = WG(I), c = jG(Q), S = B.createProgram();
        let h, D, U = I.glslVersion ? "#version " + I.glslVersion + `
` : "";
        I.isRawShaderMaterial ? (h = [
          "#define SHADER_TYPE " + I.shaderType,
          "#define SHADER_NAME " + I.shaderName,
          c
        ].filter(DQ).join(`
`), h.length > 0 && (h += `
`), D = [
          "#define SHADER_TYPE " + I.shaderType,
          "#define SHADER_NAME " + I.shaderName,
          c
        ].filter(DQ).join(`
`), D.length > 0 && (D += `
`)) : (h = [
          na(I),
          "#define SHADER_TYPE " + I.shaderType,
          "#define SHADER_NAME " + I.shaderName,
          c,
          I.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
          I.batching ? "#define USE_BATCHING" : "",
          I.batchingColor ? "#define USE_BATCHING_COLOR" : "",
          I.instancing ? "#define USE_INSTANCING" : "",
          I.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
          I.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
          I.useFog && I.fog ? "#define USE_FOG" : "",
          I.useFog && I.fogExp2 ? "#define FOG_EXP2" : "",
          I.map ? "#define USE_MAP" : "",
          I.envMap ? "#define USE_ENVMAP" : "",
          I.envMap ? "#define " + e : "",
          I.lightMap ? "#define USE_LIGHTMAP" : "",
          I.aoMap ? "#define USE_AOMAP" : "",
          I.bumpMap ? "#define USE_BUMPMAP" : "",
          I.normalMap ? "#define USE_NORMALMAP" : "",
          I.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
          I.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
          I.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
          I.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
          I.anisotropy ? "#define USE_ANISOTROPY" : "",
          I.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
          I.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
          I.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
          I.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
          I.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
          I.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
          I.specularMap ? "#define USE_SPECULARMAP" : "",
          I.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
          I.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
          I.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
          I.metalnessMap ? "#define USE_METALNESSMAP" : "",
          I.alphaMap ? "#define USE_ALPHAMAP" : "",
          I.alphaHash ? "#define USE_ALPHAHASH" : "",
          I.transmission ? "#define USE_TRANSMISSION" : "",
          I.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
          I.thicknessMap ? "#define USE_THICKNESSMAP" : "",
          I.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
          I.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
          I.mapUv ? "#define MAP_UV " + I.mapUv : "",
          I.alphaMapUv ? "#define ALPHAMAP_UV " + I.alphaMapUv : "",
          I.lightMapUv ? "#define LIGHTMAP_UV " + I.lightMapUv : "",
          I.aoMapUv ? "#define AOMAP_UV " + I.aoMapUv : "",
          I.emissiveMapUv ? "#define EMISSIVEMAP_UV " + I.emissiveMapUv : "",
          I.bumpMapUv ? "#define BUMPMAP_UV " + I.bumpMapUv : "",
          I.normalMapUv ? "#define NORMALMAP_UV " + I.normalMapUv : "",
          I.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + I.displacementMapUv : "",
          I.metalnessMapUv ? "#define METALNESSMAP_UV " + I.metalnessMapUv : "",
          I.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + I.roughnessMapUv : "",
          I.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + I.anisotropyMapUv : "",
          I.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + I.clearcoatMapUv : "",
          I.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + I.clearcoatNormalMapUv : "",
          I.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + I.clearcoatRoughnessMapUv : "",
          I.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + I.iridescenceMapUv : "",
          I.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + I.iridescenceThicknessMapUv : "",
          I.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + I.sheenColorMapUv : "",
          I.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + I.sheenRoughnessMapUv : "",
          I.specularMapUv ? "#define SPECULARMAP_UV " + I.specularMapUv : "",
          I.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + I.specularColorMapUv : "",
          I.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + I.specularIntensityMapUv : "",
          I.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + I.transmissionMapUv : "",
          I.thicknessMapUv ? "#define THICKNESSMAP_UV " + I.thicknessMapUv : "",
          I.vertexTangents && I.flatShading === false ? "#define USE_TANGENT" : "",
          I.vertexColors ? "#define USE_COLOR" : "",
          I.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
          I.vertexUv1s ? "#define USE_UV1" : "",
          I.vertexUv2s ? "#define USE_UV2" : "",
          I.vertexUv3s ? "#define USE_UV3" : "",
          I.pointsUvs ? "#define USE_POINTS_UV" : "",
          I.flatShading ? "#define FLAT_SHADED" : "",
          I.skinning ? "#define USE_SKINNING" : "",
          I.morphTargets ? "#define USE_MORPHTARGETS" : "",
          I.morphNormals && I.flatShading === false ? "#define USE_MORPHNORMALS" : "",
          I.morphColors ? "#define USE_MORPHCOLORS" : "",
          I.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + I.morphTextureStride : "",
          I.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + I.morphTargetsCount : "",
          I.doubleSided ? "#define DOUBLE_SIDED" : "",
          I.flipSided ? "#define FLIP_SIDED" : "",
          I.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
          I.shadowMapEnabled ? "#define " + o : "",
          I.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
          I.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
          I.logarithmicDepthBuffer ? "#define USE_LOGARITHMIC_DEPTH_BUFFER" : "",
          I.reversedDepthBuffer ? "#define USE_REVERSED_DEPTH_BUFFER" : "",
          "uniform mat4 modelMatrix;",
          "uniform mat4 modelViewMatrix;",
          "uniform mat4 projectionMatrix;",
          "uniform mat4 viewMatrix;",
          "uniform mat3 normalMatrix;",
          "uniform vec3 cameraPosition;",
          "uniform bool isOrthographic;",
          "#ifdef USE_INSTANCING",
          "	attribute mat4 instanceMatrix;",
          "#endif",
          "#ifdef USE_INSTANCING_COLOR",
          "	attribute vec3 instanceColor;",
          "#endif",
          "#ifdef USE_INSTANCING_MORPH",
          "	uniform sampler2D morphTexture;",
          "#endif",
          "attribute vec3 position;",
          "attribute vec3 normal;",
          "attribute vec2 uv;",
          "#ifdef USE_UV1",
          "	attribute vec2 uv1;",
          "#endif",
          "#ifdef USE_UV2",
          "	attribute vec2 uv2;",
          "#endif",
          "#ifdef USE_UV3",
          "	attribute vec2 uv3;",
          "#endif",
          "#ifdef USE_TANGENT",
          "	attribute vec4 tangent;",
          "#endif",
          "#if defined( USE_COLOR_ALPHA )",
          "	attribute vec4 color;",
          "#elif defined( USE_COLOR )",
          "	attribute vec3 color;",
          "#endif",
          "#ifdef USE_SKINNING",
          "	attribute vec4 skinIndex;",
          "	attribute vec4 skinWeight;",
          "#endif",
          `
`
        ].filter(DQ).join(`
`), D = [
          na(I),
          "#define SHADER_TYPE " + I.shaderType,
          "#define SHADER_NAME " + I.shaderName,
          c,
          I.useFog && I.fog ? "#define USE_FOG" : "",
          I.useFog && I.fogExp2 ? "#define FOG_EXP2" : "",
          I.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
          I.map ? "#define USE_MAP" : "",
          I.matcap ? "#define USE_MATCAP" : "",
          I.envMap ? "#define USE_ENVMAP" : "",
          I.envMap ? "#define " + t : "",
          I.envMap ? "#define " + e : "",
          I.envMap ? "#define " + s : "",
          a ? "#define CUBEUV_TEXEL_WIDTH " + a.texelWidth : "",
          a ? "#define CUBEUV_TEXEL_HEIGHT " + a.texelHeight : "",
          a ? "#define CUBEUV_MAX_MIP " + a.maxMip + ".0" : "",
          I.lightMap ? "#define USE_LIGHTMAP" : "",
          I.aoMap ? "#define USE_AOMAP" : "",
          I.bumpMap ? "#define USE_BUMPMAP" : "",
          I.normalMap ? "#define USE_NORMALMAP" : "",
          I.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
          I.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
          I.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
          I.anisotropy ? "#define USE_ANISOTROPY" : "",
          I.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
          I.clearcoat ? "#define USE_CLEARCOAT" : "",
          I.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
          I.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
          I.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
          I.dispersion ? "#define USE_DISPERSION" : "",
          I.iridescence ? "#define USE_IRIDESCENCE" : "",
          I.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
          I.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
          I.specularMap ? "#define USE_SPECULARMAP" : "",
          I.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
          I.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
          I.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
          I.metalnessMap ? "#define USE_METALNESSMAP" : "",
          I.alphaMap ? "#define USE_ALPHAMAP" : "",
          I.alphaTest ? "#define USE_ALPHATEST" : "",
          I.alphaHash ? "#define USE_ALPHAHASH" : "",
          I.sheen ? "#define USE_SHEEN" : "",
          I.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
          I.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
          I.transmission ? "#define USE_TRANSMISSION" : "",
          I.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
          I.thicknessMap ? "#define USE_THICKNESSMAP" : "",
          I.vertexTangents && I.flatShading === false ? "#define USE_TANGENT" : "",
          I.vertexColors || I.instancingColor || I.batchingColor ? "#define USE_COLOR" : "",
          I.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
          I.vertexUv1s ? "#define USE_UV1" : "",
          I.vertexUv2s ? "#define USE_UV2" : "",
          I.vertexUv3s ? "#define USE_UV3" : "",
          I.pointsUvs ? "#define USE_POINTS_UV" : "",
          I.gradientMap ? "#define USE_GRADIENTMAP" : "",
          I.flatShading ? "#define FLAT_SHADED" : "",
          I.doubleSided ? "#define DOUBLE_SIDED" : "",
          I.flipSided ? "#define FLIP_SIDED" : "",
          I.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
          I.shadowMapEnabled ? "#define " + o : "",
          I.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
          I.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
          I.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
          I.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "",
          I.logarithmicDepthBuffer ? "#define USE_LOGARITHMIC_DEPTH_BUFFER" : "",
          I.reversedDepthBuffer ? "#define USE_REVERSED_DEPTH_BUFFER" : "",
          "uniform mat4 viewMatrix;",
          "uniform vec3 cameraPosition;",
          "uniform bool isOrthographic;",
          I.toneMapping !== dC ? "#define TONE_MAPPING" : "",
          I.toneMapping !== dC ? bA.tonemapping_pars_fragment : "",
          I.toneMapping !== dC ? vG("toneMapping", I.toneMapping) : "",
          I.dithering ? "#define DITHERING" : "",
          I.opaque ? "#define OPAQUE" : "",
          bA.colorspace_pars_fragment,
          ZG("linearToOutputTexel", I.outputColorSpace),
          PG(),
          I.useDepthPacking ? "#define DEPTH_PACKING " + I.depthPacking : "",
          `
`
        ].filter(DQ).join(`
`)), E = rt(E), E = sa(E, I), E = aa(E, I), i = rt(i), i = sa(i, I), i = aa(i, I), E = Da(E), i = Da(i), I.isRawShaderMaterial !== true && (U = `#version 300 es
`, h = [
          r,
          "#define attribute in",
          "#define varying out",
          "#define texture2D texture"
        ].join(`
`) + `
` + h, D = [
          "#define varying in",
          I.glslVersion === os ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
          I.glslVersion === os ? "" : "#define gl_FragColor pc_fragColor",
          "#define gl_FragDepthEXT gl_FragDepth",
          "#define texture2D texture",
          "#define textureCube texture",
          "#define texture2DProj textureProj",
          "#define texture2DLodEXT textureLod",
          "#define texture2DProjLodEXT textureProjLod",
          "#define textureCubeLodEXT textureLod",
          "#define texture2DGradEXT textureGrad",
          "#define texture2DProjGradEXT textureProjGrad",
          "#define textureCubeGradEXT textureGrad"
        ].join(`
`) + `
` + D);
        const M = U + h + E, k = U + D + i, p = oa(B, B.VERTEX_SHADER, M), R = oa(B, B.FRAGMENT_SHADER, k);
        B.attachShader(S, p), B.attachShader(S, R), I.index0AttributeName !== void 0 ? B.bindAttribLocation(S, 0, I.index0AttributeName) : I.morphTargets === true && B.bindAttribLocation(S, 0, "position"), B.linkProgram(S);
        function Y(q) {
          if (C.debug.checkShaderErrors) {
            const x = B.getProgramInfoLog(S) || "", Z = B.getShaderInfoLog(p) || "", j = B.getShaderInfoLog(R) || "", z = x.trim(), V = Z.trim(), iA = j.trim();
            let v = true, sA = true;
            if (B.getProgramParameter(S, B.LINK_STATUS) === false) if (v = false, typeof C.debug.onShaderError == "function") C.debug.onShaderError(B, S, p, R);
            else {
              const rA = ea(B, p, "vertex"), JA = ea(B, R, "fragment");
              console.error("THREE.WebGLProgram: Shader Error " + B.getError() + " - VALIDATE_STATUS " + B.getProgramParameter(S, B.VALIDATE_STATUS) + `

Material Name: ` + q.name + `
Material Type: ` + q.type + `

Program Info Log: ` + z + `
` + rA + `
` + JA);
            }
            else z !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", z) : (V === "" || iA === "") && (sA = false);
            sA && (q.diagnostics = {
              runnable: v,
              programLog: z,
              vertexShader: {
                log: V,
                prefix: h
              },
              fragmentShader: {
                log: iA,
                prefix: D
              }
            });
          }
          B.deleteShader(p), B.deleteShader(R), m = new dE(B, S), K = VG(B, S);
        }
        let m;
        this.getUniforms = function() {
          return m === void 0 && Y(this), m;
        };
        let K;
        this.getAttributes = function() {
          return K === void 0 && Y(this), K;
        };
        let y = I.rendererExtensionParallelShaderCompile === false;
        return this.isReady = function() {
          return y === false && (y = B.getProgramParameter(S, bG)), y;
        }, this.destroy = function() {
          g.releaseStatesOfProgram(this), B.deleteProgram(S), this.program = void 0;
        }, this.type = I.shaderType, this.name = I.shaderName, this.id = xG++, this.cacheKey = A, this.usedTimes = 1, this.program = S, this.vertexShader = p, this.fragmentShader = R, this;
      }
      let ok = 0;
      class tk {
        constructor() {
          this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
        }
        update(A) {
          const I = A.vertexShader, g = A.fragmentShader, B = this._getShaderStage(I), Q = this._getShaderStage(g), E = this._getShaderCacheForMaterial(A);
          return E.has(B) === false && (E.add(B), B.usedTimes++), E.has(Q) === false && (E.add(Q), Q.usedTimes++), this;
        }
        remove(A) {
          const I = this.materialCache.get(A);
          for (const g of I) g.usedTimes--, g.usedTimes === 0 && this.shaderCache.delete(g.code);
          return this.materialCache.delete(A), this;
        }
        getVertexShaderID(A) {
          return this._getShaderStage(A.vertexShader).id;
        }
        getFragmentShaderID(A) {
          return this._getShaderStage(A.fragmentShader).id;
        }
        dispose() {
          this.shaderCache.clear(), this.materialCache.clear();
        }
        _getShaderCacheForMaterial(A) {
          const I = this.materialCache;
          let g = I.get(A);
          return g === void 0 && (g = /* @__PURE__ */ new Set(), I.set(A, g)), g;
        }
        _getShaderStage(A) {
          const I = this.shaderCache;
          let g = I.get(A);
          return g === void 0 && (g = new ek(A), I.set(A, g)), g;
        }
      }
      class ek {
        constructor(A) {
          this.id = ok++, this.code = A, this.usedTimes = 0;
        }
      }
      function sk(C, A, I, g, B, Q, E) {
        const i = new Ie(), o = new tk(), t = /* @__PURE__ */ new Set(), e = [], s = B.logarithmicDepthBuffer, a = B.vertexTextures;
        let r = B.precision;
        const c = {
          MeshDepthMaterial: "depth",
          MeshDistanceMaterial: "distanceRGBA",
          MeshNormalMaterial: "normal",
          MeshBasicMaterial: "basic",
          MeshLambertMaterial: "lambert",
          MeshPhongMaterial: "phong",
          MeshToonMaterial: "toon",
          MeshStandardMaterial: "physical",
          MeshPhysicalMaterial: "physical",
          MeshMatcapMaterial: "matcap",
          LineBasicMaterial: "basic",
          LineDashedMaterial: "dashed",
          PointsMaterial: "points",
          ShadowMaterial: "shadow",
          SpriteMaterial: "sprite"
        };
        function S(K) {
          return t.add(K), K === 0 ? "uv" : `uv${K}`;
        }
        function h(K, y, q, x, Z) {
          const j = x.fog, z = Z.geometry, V = K.isMeshStandardMaterial ? x.environment : null, iA = (K.isMeshStandardMaterial ? I : A).get(K.envMap || V), v = iA && iA.mapping === XE ? iA.image.height : null, sA = c[K.type];
          K.precision !== null && (r = B.getMaxPrecision(K.precision), r !== K.precision && console.warn("THREE.WebGLProgram.getParameters:", K.precision, "not supported, using", r, "instead."));
          const rA = z.morphAttributes.position || z.morphAttributes.normal || z.morphAttributes.color, JA = rA !== void 0 ? rA.length : 0;
          let jA = 0;
          z.morphAttributes.position !== void 0 && (jA = 1), z.morphAttributes.normal !== void 0 && (jA = 2), z.morphAttributes.color !== void 0 && (jA = 3);
          let nI, lI, QI, X;
          if (sA) {
            const EI = Og[sA];
            nI = EI.vertexShader, lI = EI.fragmentShader;
          } else nI = K.vertexShader, lI = K.fragmentShader, o.update(K), QI = o.getVertexShaderID(K), X = o.getFragmentShaderID(K);
          const IA = C.getRenderTarget(), cA = C.state.buffers.depth.getReversed(), HA = Z.isInstancedMesh === true, NA = Z.isBatchedMesh === true, II = !!K.map, VI = !!K.matcap, d = !!iA, GI = !!K.aoMap, OA = !!K.lightMap, LA = !!K.bumpMap, GA = !!K.normalMap, kI = !!K.displacementMap, kA = !!K.emissiveMap, vA = !!K.metalnessMap, TI = !!K.roughnessMap, JI = K.anisotropy > 0, N = K.clearcoat > 0, l = K.dispersion > 0, b = K.iridescence > 0, W = K.sheen > 0, AA = K.transmission > 0, P = JI && !!K.anisotropyMap, UA = N && !!K.clearcoatMap, oA = N && !!K.clearcoatNormalMap, yA = N && !!K.clearcoatRoughnessMap, MA = b && !!K.iridescenceMap, QA = b && !!K.iridescenceThicknessMap, nA = W && !!K.sheenColorMap, qA = W && !!K.sheenRoughnessMap, KA = !!K.specularMap, aA = !!K.specularColorMap, _A = !!K.specularIntensityMap, u = AA && !!K.transmissionMap, EA = AA && !!K.thicknessMap, tA = !!K.gradientMap, wA = !!K.alphaMap, CA = K.alphaTest > 0, $ = !!K.alphaHash, lA = !!K.extensions;
          let TA = dC;
          K.toneMapped && (IA === null || IA.isXRRenderTarget === true) && (TA = C.toneMapping);
          const rI = {
            shaderID: sA,
            shaderType: K.type,
            shaderName: K.name,
            vertexShader: nI,
            fragmentShader: lI,
            defines: K.defines,
            customVertexShaderID: QI,
            customFragmentShaderID: X,
            isRawShaderMaterial: K.isRawShaderMaterial === true,
            glslVersion: K.glslVersion,
            precision: r,
            batching: NA,
            batchingColor: NA && Z._colorsTexture !== null,
            instancing: HA,
            instancingColor: HA && Z.instanceColor !== null,
            instancingMorph: HA && Z.morphTexture !== null,
            supportsVertexTextures: a,
            outputColorSpace: IA === null ? C.outputColorSpace : IA.isXRRenderTarget === true ? IA.texture.colorSpace : Ag,
            alphaToCoverage: !!K.alphaToCoverage,
            map: II,
            matcap: VI,
            envMap: d,
            envMapMode: d && iA.mapping,
            envMapCubeUVHeight: v,
            aoMap: GI,
            lightMap: OA,
            bumpMap: LA,
            normalMap: GA,
            displacementMap: a && kI,
            emissiveMap: kA,
            normalMapObjectSpace: GA && K.normalMapType === ih,
            normalMapTangentSpace: GA && K.normalMapType === JD,
            metalnessMap: vA,
            roughnessMap: TI,
            anisotropy: JI,
            anisotropyMap: P,
            clearcoat: N,
            clearcoatMap: UA,
            clearcoatNormalMap: oA,
            clearcoatRoughnessMap: yA,
            dispersion: l,
            iridescence: b,
            iridescenceMap: MA,
            iridescenceThicknessMap: QA,
            sheen: W,
            sheenColorMap: nA,
            sheenRoughnessMap: qA,
            specularMap: KA,
            specularColorMap: aA,
            specularIntensityMap: _A,
            transmission: AA,
            transmissionMap: u,
            thicknessMap: EA,
            gradientMap: tA,
            opaque: K.transparent === false && K.blending === pB && K.alphaToCoverage === false,
            alphaMap: wA,
            alphaTest: CA,
            alphaHash: $,
            combine: K.combine,
            mapUv: II && S(K.map.channel),
            aoMapUv: GI && S(K.aoMap.channel),
            lightMapUv: OA && S(K.lightMap.channel),
            bumpMapUv: LA && S(K.bumpMap.channel),
            normalMapUv: GA && S(K.normalMap.channel),
            displacementMapUv: kI && S(K.displacementMap.channel),
            emissiveMapUv: kA && S(K.emissiveMap.channel),
            metalnessMapUv: vA && S(K.metalnessMap.channel),
            roughnessMapUv: TI && S(K.roughnessMap.channel),
            anisotropyMapUv: P && S(K.anisotropyMap.channel),
            clearcoatMapUv: UA && S(K.clearcoatMap.channel),
            clearcoatNormalMapUv: oA && S(K.clearcoatNormalMap.channel),
            clearcoatRoughnessMapUv: yA && S(K.clearcoatRoughnessMap.channel),
            iridescenceMapUv: MA && S(K.iridescenceMap.channel),
            iridescenceThicknessMapUv: QA && S(K.iridescenceThicknessMap.channel),
            sheenColorMapUv: nA && S(K.sheenColorMap.channel),
            sheenRoughnessMapUv: qA && S(K.sheenRoughnessMap.channel),
            specularMapUv: KA && S(K.specularMap.channel),
            specularColorMapUv: aA && S(K.specularColorMap.channel),
            specularIntensityMapUv: _A && S(K.specularIntensityMap.channel),
            transmissionMapUv: u && S(K.transmissionMap.channel),
            thicknessMapUv: EA && S(K.thicknessMap.channel),
            alphaMapUv: wA && S(K.alphaMap.channel),
            vertexTangents: !!z.attributes.tangent && (GA || JI),
            vertexColors: K.vertexColors,
            vertexAlphas: K.vertexColors === true && !!z.attributes.color && z.attributes.color.itemSize === 4,
            pointsUvs: Z.isPoints === true && !!z.attributes.uv && (II || wA),
            fog: !!j,
            useFog: K.fog === true,
            fogExp2: !!j && j.isFogExp2,
            flatShading: K.flatShading === true && K.wireframe === false,
            sizeAttenuation: K.sizeAttenuation === true,
            logarithmicDepthBuffer: s,
            reversedDepthBuffer: cA,
            skinning: Z.isSkinnedMesh === true,
            morphTargets: z.morphAttributes.position !== void 0,
            morphNormals: z.morphAttributes.normal !== void 0,
            morphColors: z.morphAttributes.color !== void 0,
            morphTargetsCount: JA,
            morphTextureStride: jA,
            numDirLights: y.directional.length,
            numPointLights: y.point.length,
            numSpotLights: y.spot.length,
            numSpotLightMaps: y.spotLightMap.length,
            numRectAreaLights: y.rectArea.length,
            numHemiLights: y.hemi.length,
            numDirLightShadows: y.directionalShadowMap.length,
            numPointLightShadows: y.pointShadowMap.length,
            numSpotLightShadows: y.spotShadowMap.length,
            numSpotLightShadowsWithMaps: y.numSpotLightShadowsWithMaps,
            numLightProbes: y.numLightProbes,
            numClippingPlanes: E.numPlanes,
            numClipIntersection: E.numIntersection,
            dithering: K.dithering,
            shadowMapEnabled: C.shadowMap.enabled && q.length > 0,
            shadowMapType: C.shadowMap.type,
            toneMapping: TA,
            decodeVideoTexture: II && K.map.isVideoTexture === true && gI.getTransfer(K.map.colorSpace) === eI,
            decodeVideoTextureEmissive: kA && K.emissiveMap.isVideoTexture === true && gI.getTransfer(K.emissiveMap.colorSpace) === eI,
            premultipliedAlpha: K.premultipliedAlpha,
            doubleSided: K.side === _g,
            flipSided: K.side === Dg,
            useDepthPacking: K.depthPacking >= 0,
            depthPacking: K.depthPacking || 0,
            index0AttributeName: K.index0AttributeName,
            extensionClipCullDistance: lA && K.extensions.clipCullDistance === true && g.has("WEBGL_clip_cull_distance"),
            extensionMultiDraw: (lA && K.extensions.multiDraw === true || NA) && g.has("WEBGL_multi_draw"),
            rendererExtensionParallelShaderCompile: g.has("KHR_parallel_shader_compile"),
            customProgramCacheKey: K.customProgramCacheKey()
          };
          return rI.vertexUv1s = t.has(1), rI.vertexUv2s = t.has(2), rI.vertexUv3s = t.has(3), t.clear(), rI;
        }
        function D(K) {
          const y = [];
          if (K.shaderID ? y.push(K.shaderID) : (y.push(K.customVertexShaderID), y.push(K.customFragmentShaderID)), K.defines !== void 0) for (const q in K.defines) y.push(q), y.push(K.defines[q]);
          return K.isRawShaderMaterial === false && (U(y, K), M(y, K), y.push(C.outputColorSpace)), y.push(K.customProgramCacheKey), y.join();
        }
        function U(K, y) {
          K.push(y.precision), K.push(y.outputColorSpace), K.push(y.envMapMode), K.push(y.envMapCubeUVHeight), K.push(y.mapUv), K.push(y.alphaMapUv), K.push(y.lightMapUv), K.push(y.aoMapUv), K.push(y.bumpMapUv), K.push(y.normalMapUv), K.push(y.displacementMapUv), K.push(y.emissiveMapUv), K.push(y.metalnessMapUv), K.push(y.roughnessMapUv), K.push(y.anisotropyMapUv), K.push(y.clearcoatMapUv), K.push(y.clearcoatNormalMapUv), K.push(y.clearcoatRoughnessMapUv), K.push(y.iridescenceMapUv), K.push(y.iridescenceThicknessMapUv), K.push(y.sheenColorMapUv), K.push(y.sheenRoughnessMapUv), K.push(y.specularMapUv), K.push(y.specularColorMapUv), K.push(y.specularIntensityMapUv), K.push(y.transmissionMapUv), K.push(y.thicknessMapUv), K.push(y.combine), K.push(y.fogExp2), K.push(y.sizeAttenuation), K.push(y.morphTargetsCount), K.push(y.morphAttributeCount), K.push(y.numDirLights), K.push(y.numPointLights), K.push(y.numSpotLights), K.push(y.numSpotLightMaps), K.push(y.numHemiLights), K.push(y.numRectAreaLights), K.push(y.numDirLightShadows), K.push(y.numPointLightShadows), K.push(y.numSpotLightShadows), K.push(y.numSpotLightShadowsWithMaps), K.push(y.numLightProbes), K.push(y.shadowMapType), K.push(y.toneMapping), K.push(y.numClippingPlanes), K.push(y.numClipIntersection), K.push(y.depthPacking);
        }
        function M(K, y) {
          i.disableAll(), y.supportsVertexTextures && i.enable(0), y.instancing && i.enable(1), y.instancingColor && i.enable(2), y.instancingMorph && i.enable(3), y.matcap && i.enable(4), y.envMap && i.enable(5), y.normalMapObjectSpace && i.enable(6), y.normalMapTangentSpace && i.enable(7), y.clearcoat && i.enable(8), y.iridescence && i.enable(9), y.alphaTest && i.enable(10), y.vertexColors && i.enable(11), y.vertexAlphas && i.enable(12), y.vertexUv1s && i.enable(13), y.vertexUv2s && i.enable(14), y.vertexUv3s && i.enable(15), y.vertexTangents && i.enable(16), y.anisotropy && i.enable(17), y.alphaHash && i.enable(18), y.batching && i.enable(19), y.dispersion && i.enable(20), y.batchingColor && i.enable(21), y.gradientMap && i.enable(22), K.push(i.mask), i.disableAll(), y.fog && i.enable(0), y.useFog && i.enable(1), y.flatShading && i.enable(2), y.logarithmicDepthBuffer && i.enable(3), y.reversedDepthBuffer && i.enable(4), y.skinning && i.enable(5), y.morphTargets && i.enable(6), y.morphNormals && i.enable(7), y.morphColors && i.enable(8), y.premultipliedAlpha && i.enable(9), y.shadowMapEnabled && i.enable(10), y.doubleSided && i.enable(11), y.flipSided && i.enable(12), y.useDepthPacking && i.enable(13), y.dithering && i.enable(14), y.transmission && i.enable(15), y.sheen && i.enable(16), y.opaque && i.enable(17), y.pointsUvs && i.enable(18), y.decodeVideoTexture && i.enable(19), y.decodeVideoTextureEmissive && i.enable(20), y.alphaToCoverage && i.enable(21), K.push(i.mask);
        }
        function k(K) {
          const y = c[K.type];
          let q;
          if (y) {
            const x = Og[y];
            q = Iw.clone(x.uniforms);
          } else q = K.uniforms;
          return q;
        }
        function p(K, y) {
          let q;
          for (let x = 0, Z = e.length; x < Z; x++) {
            const j = e[x];
            if (j.cacheKey === y) {
              q = j, ++q.usedTimes;
              break;
            }
          }
          return q === void 0 && (q = new ik(C, y, K, Q), e.push(q)), q;
        }
        function R(K) {
          if (--K.usedTimes === 0) {
            const y = e.indexOf(K);
            e[y] = e[e.length - 1], e.pop(), K.destroy();
          }
        }
        function Y(K) {
          o.remove(K);
        }
        function m() {
          o.dispose();
        }
        return {
          getParameters: h,
          getProgramCacheKey: D,
          getUniforms: k,
          acquireProgram: p,
          releaseProgram: R,
          releaseShaderCache: Y,
          programs: e,
          dispose: m
        };
      }
      function ak() {
        let C = /* @__PURE__ */ new WeakMap();
        function A(E) {
          return C.has(E);
        }
        function I(E) {
          let i = C.get(E);
          return i === void 0 && (i = {}, C.set(E, i)), i;
        }
        function g(E) {
          C.delete(E);
        }
        function B(E, i, o) {
          C.get(E)[i] = o;
        }
        function Q() {
          C = /* @__PURE__ */ new WeakMap();
        }
        return {
          has: A,
          get: I,
          remove: g,
          update: B,
          dispose: Q
        };
      }
      function Dk(C, A) {
        return C.groupOrder !== A.groupOrder ? C.groupOrder - A.groupOrder : C.renderOrder !== A.renderOrder ? C.renderOrder - A.renderOrder : C.material.id !== A.material.id ? C.material.id - A.material.id : C.z !== A.z ? C.z - A.z : C.id - A.id;
      }
      function ra(C, A) {
        return C.groupOrder !== A.groupOrder ? C.groupOrder - A.groupOrder : C.renderOrder !== A.renderOrder ? C.renderOrder - A.renderOrder : C.z !== A.z ? A.z - C.z : C.id - A.id;
      }
      function ha() {
        const C = [];
        let A = 0;
        const I = [], g = [], B = [];
        function Q() {
          A = 0, I.length = 0, g.length = 0, B.length = 0;
        }
        function E(s, a, r, c, S, h) {
          let D = C[A];
          return D === void 0 ? (D = {
            id: s.id,
            object: s,
            geometry: a,
            material: r,
            groupOrder: c,
            renderOrder: s.renderOrder,
            z: S,
            group: h
          }, C[A] = D) : (D.id = s.id, D.object = s, D.geometry = a, D.material = r, D.groupOrder = c, D.renderOrder = s.renderOrder, D.z = S, D.group = h), A++, D;
        }
        function i(s, a, r, c, S, h) {
          const D = E(s, a, r, c, S, h);
          r.transmission > 0 ? g.push(D) : r.transparent === true ? B.push(D) : I.push(D);
        }
        function o(s, a, r, c, S, h) {
          const D = E(s, a, r, c, S, h);
          r.transmission > 0 ? g.unshift(D) : r.transparent === true ? B.unshift(D) : I.unshift(D);
        }
        function t(s, a) {
          I.length > 1 && I.sort(s || Dk), g.length > 1 && g.sort(a || ra), B.length > 1 && B.sort(a || ra);
        }
        function e() {
          for (let s = A, a = C.length; s < a; s++) {
            const r = C[s];
            if (r.id === null) break;
            r.id = null, r.object = null, r.geometry = null, r.material = null, r.group = null;
          }
        }
        return {
          opaque: I,
          transmissive: g,
          transparent: B,
          init: Q,
          push: i,
          unshift: o,
          finish: e,
          sort: t
        };
      }
      function nk() {
        let C = /* @__PURE__ */ new WeakMap();
        function A(g, B) {
          const Q = C.get(g);
          let E;
          return Q === void 0 ? (E = new ha(), C.set(g, [
            E
          ])) : B >= Q.length ? (E = new ha(), Q.push(E)) : E = Q[B], E;
        }
        function I() {
          C = /* @__PURE__ */ new WeakMap();
        }
        return {
          get: A,
          dispose: I
        };
      }
      function rk() {
        const C = {};
        return {
          get: function(A) {
            if (C[A.id] !== void 0) return C[A.id];
            let I;
            switch (A.type) {
              case "DirectionalLight":
                I = {
                  direction: new J(),
                  color: new mA()
                };
                break;
              case "SpotLight":
                I = {
                  position: new J(),
                  direction: new J(),
                  color: new mA(),
                  distance: 0,
                  coneCos: 0,
                  penumbraCos: 0,
                  decay: 0
                };
                break;
              case "PointLight":
                I = {
                  position: new J(),
                  color: new mA(),
                  distance: 0,
                  decay: 0
                };
                break;
              case "HemisphereLight":
                I = {
                  direction: new J(),
                  skyColor: new mA(),
                  groundColor: new mA()
                };
                break;
              case "RectAreaLight":
                I = {
                  color: new mA(),
                  position: new J(),
                  halfWidth: new J(),
                  halfHeight: new J()
                };
                break;
            }
            return C[A.id] = I, I;
          }
        };
      }
      function hk() {
        const C = {};
        return {
          get: function(A) {
            if (C[A.id] !== void 0) return C[A.id];
            let I;
            switch (A.type) {
              case "DirectionalLight":
                I = {
                  shadowIntensity: 1,
                  shadowBias: 0,
                  shadowNormalBias: 0,
                  shadowRadius: 1,
                  shadowMapSize: new XA()
                };
                break;
              case "SpotLight":
                I = {
                  shadowIntensity: 1,
                  shadowBias: 0,
                  shadowNormalBias: 0,
                  shadowRadius: 1,
                  shadowMapSize: new XA()
                };
                break;
              case "PointLight":
                I = {
                  shadowIntensity: 1,
                  shadowBias: 0,
                  shadowNormalBias: 0,
                  shadowRadius: 1,
                  shadowMapSize: new XA(),
                  shadowCameraNear: 1,
                  shadowCameraFar: 1e3
                };
                break;
            }
            return C[A.id] = I, I;
          }
        };
      }
      let wk = 0;
      function ck(C, A) {
        return (A.castShadow ? 2 : 0) - (C.castShadow ? 2 : 0) + (A.map ? 1 : 0) - (C.map ? 1 : 0);
      }
      function Sk(C) {
        const A = new rk(), I = hk(), g = {
          version: 0,
          hash: {
            directionalLength: -1,
            pointLength: -1,
            spotLength: -1,
            rectAreaLength: -1,
            hemiLength: -1,
            numDirectionalShadows: -1,
            numPointShadows: -1,
            numSpotShadows: -1,
            numSpotMaps: -1,
            numLightProbes: -1
          },
          ambient: [
            0,
            0,
            0
          ],
          probe: [],
          directional: [],
          directionalShadow: [],
          directionalShadowMap: [],
          directionalShadowMatrix: [],
          spot: [],
          spotLightMap: [],
          spotShadow: [],
          spotShadowMap: [],
          spotLightMatrix: [],
          rectArea: [],
          rectAreaLTC1: null,
          rectAreaLTC2: null,
          point: [],
          pointShadow: [],
          pointShadowMap: [],
          pointShadowMatrix: [],
          hemi: [],
          numSpotLightShadowsWithMaps: 0,
          numLightProbes: 0
        };
        for (let t = 0; t < 9; t++) g.probe.push(new J());
        const B = new J(), Q = new uA(), E = new uA();
        function i(t) {
          let e = 0, s = 0, a = 0;
          for (let K = 0; K < 9; K++) g.probe[K].set(0, 0, 0);
          let r = 0, c = 0, S = 0, h = 0, D = 0, U = 0, M = 0, k = 0, p = 0, R = 0, Y = 0;
          t.sort(ck);
          for (let K = 0, y = t.length; K < y; K++) {
            const q = t[K], x = q.color, Z = q.intensity, j = q.distance, z = q.shadow && q.shadow.map ? q.shadow.map.texture : null;
            if (q.isAmbientLight) e += x.r * Z, s += x.g * Z, a += x.b * Z;
            else if (q.isLightProbe) {
              for (let V = 0; V < 9; V++) g.probe[V].addScaledVector(q.sh.coefficients[V], Z);
              Y++;
            } else if (q.isDirectionalLight) {
              const V = A.get(q);
              if (V.color.copy(q.color).multiplyScalar(q.intensity), q.castShadow) {
                const iA = q.shadow, v = I.get(q);
                v.shadowIntensity = iA.intensity, v.shadowBias = iA.bias, v.shadowNormalBias = iA.normalBias, v.shadowRadius = iA.radius, v.shadowMapSize = iA.mapSize, g.directionalShadow[r] = v, g.directionalShadowMap[r] = z, g.directionalShadowMatrix[r] = q.shadow.matrix, U++;
              }
              g.directional[r] = V, r++;
            } else if (q.isSpotLight) {
              const V = A.get(q);
              V.position.setFromMatrixPosition(q.matrixWorld), V.color.copy(x).multiplyScalar(Z), V.distance = j, V.coneCos = Math.cos(q.angle), V.penumbraCos = Math.cos(q.angle * (1 - q.penumbra)), V.decay = q.decay, g.spot[S] = V;
              const iA = q.shadow;
              if (q.map && (g.spotLightMap[p] = q.map, p++, iA.updateMatrices(q), q.castShadow && R++), g.spotLightMatrix[S] = iA.matrix, q.castShadow) {
                const v = I.get(q);
                v.shadowIntensity = iA.intensity, v.shadowBias = iA.bias, v.shadowNormalBias = iA.normalBias, v.shadowRadius = iA.radius, v.shadowMapSize = iA.mapSize, g.spotShadow[S] = v, g.spotShadowMap[S] = z, k++;
              }
              S++;
            } else if (q.isRectAreaLight) {
              const V = A.get(q);
              V.color.copy(x).multiplyScalar(Z), V.halfWidth.set(q.width * 0.5, 0, 0), V.halfHeight.set(0, q.height * 0.5, 0), g.rectArea[h] = V, h++;
            } else if (q.isPointLight) {
              const V = A.get(q);
              if (V.color.copy(q.color).multiplyScalar(q.intensity), V.distance = q.distance, V.decay = q.decay, q.castShadow) {
                const iA = q.shadow, v = I.get(q);
                v.shadowIntensity = iA.intensity, v.shadowBias = iA.bias, v.shadowNormalBias = iA.normalBias, v.shadowRadius = iA.radius, v.shadowMapSize = iA.mapSize, v.shadowCameraNear = iA.camera.near, v.shadowCameraFar = iA.camera.far, g.pointShadow[c] = v, g.pointShadowMap[c] = z, g.pointShadowMatrix[c] = q.shadow.matrix, M++;
              }
              g.point[c] = V, c++;
            } else if (q.isHemisphereLight) {
              const V = A.get(q);
              V.skyColor.copy(q.color).multiplyScalar(Z), V.groundColor.copy(q.groundColor).multiplyScalar(Z), g.hemi[D] = V, D++;
            }
          }
          h > 0 && (C.has("OES_texture_float_linear") === true ? (g.rectAreaLTC1 = eA.LTC_FLOAT_1, g.rectAreaLTC2 = eA.LTC_FLOAT_2) : (g.rectAreaLTC1 = eA.LTC_HALF_1, g.rectAreaLTC2 = eA.LTC_HALF_2)), g.ambient[0] = e, g.ambient[1] = s, g.ambient[2] = a;
          const m = g.hash;
          (m.directionalLength !== r || m.pointLength !== c || m.spotLength !== S || m.rectAreaLength !== h || m.hemiLength !== D || m.numDirectionalShadows !== U || m.numPointShadows !== M || m.numSpotShadows !== k || m.numSpotMaps !== p || m.numLightProbes !== Y) && (g.directional.length = r, g.spot.length = S, g.rectArea.length = h, g.point.length = c, g.hemi.length = D, g.directionalShadow.length = U, g.directionalShadowMap.length = U, g.pointShadow.length = M, g.pointShadowMap.length = M, g.spotShadow.length = k, g.spotShadowMap.length = k, g.directionalShadowMatrix.length = U, g.pointShadowMatrix.length = M, g.spotLightMatrix.length = k + p - R, g.spotLightMap.length = p, g.numSpotLightShadowsWithMaps = R, g.numLightProbes = Y, m.directionalLength = r, m.pointLength = c, m.spotLength = S, m.rectAreaLength = h, m.hemiLength = D, m.numDirectionalShadows = U, m.numPointShadows = M, m.numSpotShadows = k, m.numSpotMaps = p, m.numLightProbes = Y, g.version = wk++);
        }
        function o(t, e) {
          let s = 0, a = 0, r = 0, c = 0, S = 0;
          const h = e.matrixWorldInverse;
          for (let D = 0, U = t.length; D < U; D++) {
            const M = t[D];
            if (M.isDirectionalLight) {
              const k = g.directional[s];
              k.direction.setFromMatrixPosition(M.matrixWorld), B.setFromMatrixPosition(M.target.matrixWorld), k.direction.sub(B), k.direction.transformDirection(h), s++;
            } else if (M.isSpotLight) {
              const k = g.spot[r];
              k.position.setFromMatrixPosition(M.matrixWorld), k.position.applyMatrix4(h), k.direction.setFromMatrixPosition(M.matrixWorld), B.setFromMatrixPosition(M.target.matrixWorld), k.direction.sub(B), k.direction.transformDirection(h), r++;
            } else if (M.isRectAreaLight) {
              const k = g.rectArea[c];
              k.position.setFromMatrixPosition(M.matrixWorld), k.position.applyMatrix4(h), E.identity(), Q.copy(M.matrixWorld), Q.premultiply(h), E.extractRotation(Q), k.halfWidth.set(M.width * 0.5, 0, 0), k.halfHeight.set(0, M.height * 0.5, 0), k.halfWidth.applyMatrix4(E), k.halfHeight.applyMatrix4(E), c++;
            } else if (M.isPointLight) {
              const k = g.point[a];
              k.position.setFromMatrixPosition(M.matrixWorld), k.position.applyMatrix4(h), a++;
            } else if (M.isHemisphereLight) {
              const k = g.hemi[S];
              k.direction.setFromMatrixPosition(M.matrixWorld), k.direction.transformDirection(h), S++;
            }
          }
        }
        return {
          setup: i,
          setupView: o,
          state: g
        };
      }
      function wa(C) {
        const A = new Sk(C), I = [], g = [];
        function B(e) {
          t.camera = e, I.length = 0, g.length = 0;
        }
        function Q(e) {
          I.push(e);
        }
        function E(e) {
          g.push(e);
        }
        function i() {
          A.setup(I);
        }
        function o(e) {
          A.setupView(I, e);
        }
        const t = {
          lightsArray: I,
          shadowsArray: g,
          camera: null,
          lights: A,
          transmissionRenderTarget: {}
        };
        return {
          init: B,
          state: t,
          setupLights: i,
          setupLightsView: o,
          pushLight: Q,
          pushShadow: E
        };
      }
      function lk(C) {
        let A = /* @__PURE__ */ new WeakMap();
        function I(B, Q = 0) {
          const E = A.get(B);
          let i;
          return E === void 0 ? (i = new wa(C), A.set(B, [
            i
          ])) : Q >= E.length ? (i = new wa(C), E.push(i)) : i = E[Q], i;
        }
        function g() {
          A = /* @__PURE__ */ new WeakMap();
        }
        return {
          get: I,
          dispose: g
        };
      }
      const Gk = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, kk = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
      function yk(C, A, I) {
        let g = new Qe();
        const B = new XA(), Q = new XA(), E = new BI(), i = new Sw({
          depthPacking: Eh
        }), o = new lw(), t = {}, e = I.maxTextureSize, s = {
          [Wg]: Dg,
          [Dg]: Wg,
          [_g]: _g
        }, a = new YC({
          defines: {
            VSM_SAMPLES: 8
          },
          uniforms: {
            shadow_pass: {
              value: null
            },
            resolution: {
              value: new XA()
            },
            radius: {
              value: 4
            }
          },
          vertexShader: Gk,
          fragmentShader: kk
        }), r = a.clone();
        r.defines.HORIZONTAL_PASS = 1;
        const c = new fg();
        c.setAttribute("position", new tg(new Float32Array([
          -1,
          -1,
          0.5,
          3,
          -1,
          0.5,
          -1,
          3,
          0.5
        ]), 3));
        const S = new ig(c, a), h = this;
        this.enabled = false, this.autoUpdate = true, this.needsUpdate = false, this.type = cD;
        let D = this.type;
        this.render = function(R, Y, m) {
          if (h.enabled === false || h.autoUpdate === false && h.needsUpdate === false || R.length === 0) return;
          const K = C.getRenderTarget(), y = C.getActiveCubeFace(), q = C.getActiveMipmapLevel(), x = C.state;
          x.setBlending(pC), x.buffers.depth.getReversed() === true ? x.buffers.color.setClear(0, 0, 0, 0) : x.buffers.color.setClear(1, 1, 1, 1), x.buffers.depth.setTest(true), x.setScissorTest(false);
          const Z = D !== tC && this.type === tC, j = D === tC && this.type !== tC;
          for (let z = 0, V = R.length; z < V; z++) {
            const iA = R[z], v = iA.shadow;
            if (v === void 0) {
              console.warn("THREE.WebGLShadowMap:", iA, "has no shadow.");
              continue;
            }
            if (v.autoUpdate === false && v.needsUpdate === false) continue;
            B.copy(v.mapSize);
            const sA = v.getFrameExtents();
            if (B.multiply(sA), Q.copy(v.mapSize), (B.x > e || B.y > e) && (B.x > e && (Q.x = Math.floor(e / sA.x), B.x = Q.x * sA.x, v.mapSize.x = Q.x), B.y > e && (Q.y = Math.floor(e / sA.y), B.y = Q.y * sA.y, v.mapSize.y = Q.y)), v.map === null || Z === true || j === true) {
              const JA = this.type !== tC ? {
                minFilter: og,
                magFilter: og
              } : {};
              v.map !== null && v.map.dispose(), v.map = new gB(B.x, B.y, JA), v.map.texture.name = iA.name + ".shadowMap", v.camera.updateProjectionMatrix();
            }
            C.setRenderTarget(v.map), C.clear();
            const rA = v.getViewportCount();
            for (let JA = 0; JA < rA; JA++) {
              const jA = v.getViewport(JA);
              E.set(Q.x * jA.x, Q.y * jA.y, Q.x * jA.z, Q.y * jA.w), x.viewport(E), v.updateMatrices(iA, JA), g = v.getFrustum(), k(Y, m, v.camera, iA, this.type);
            }
            v.isPointLightShadow !== true && this.type === tC && U(v, m), v.needsUpdate = false;
          }
          D = this.type, h.needsUpdate = false, C.setRenderTarget(K, y, q);
        };
        function U(R, Y) {
          const m = A.update(S);
          a.defines.VSM_SAMPLES !== R.blurSamples && (a.defines.VSM_SAMPLES = R.blurSamples, r.defines.VSM_SAMPLES = R.blurSamples, a.needsUpdate = true, r.needsUpdate = true), R.mapPass === null && (R.mapPass = new gB(B.x, B.y)), a.uniforms.shadow_pass.value = R.map.texture, a.uniforms.resolution.value = R.mapSize, a.uniforms.radius.value = R.radius, C.setRenderTarget(R.mapPass), C.clear(), C.renderBufferDirect(Y, null, m, a, S, null), r.uniforms.shadow_pass.value = R.mapPass.texture, r.uniforms.resolution.value = R.mapSize, r.uniforms.radius.value = R.radius, C.setRenderTarget(R.map), C.clear(), C.renderBufferDirect(Y, null, m, r, S, null);
        }
        function M(R, Y, m, K) {
          let y = null;
          const q = m.isPointLight === true ? R.customDistanceMaterial : R.customDepthMaterial;
          if (q !== void 0) y = q;
          else if (y = m.isPointLight === true ? o : i, C.localClippingEnabled && Y.clipShadows === true && Array.isArray(Y.clippingPlanes) && Y.clippingPlanes.length !== 0 || Y.displacementMap && Y.displacementScale !== 0 || Y.alphaMap && Y.alphaTest > 0 || Y.map && Y.alphaTest > 0 || Y.alphaToCoverage === true) {
            const x = y.uuid, Z = Y.uuid;
            let j = t[x];
            j === void 0 && (j = {}, t[x] = j);
            let z = j[Z];
            z === void 0 && (z = y.clone(), j[Z] = z, Y.addEventListener("dispose", p)), y = z;
          }
          if (y.visible = Y.visible, y.wireframe = Y.wireframe, K === tC ? y.side = Y.shadowSide !== null ? Y.shadowSide : Y.side : y.side = Y.shadowSide !== null ? Y.shadowSide : s[Y.side], y.alphaMap = Y.alphaMap, y.alphaTest = Y.alphaToCoverage === true ? 0.5 : Y.alphaTest, y.map = Y.map, y.clipShadows = Y.clipShadows, y.clippingPlanes = Y.clippingPlanes, y.clipIntersection = Y.clipIntersection, y.displacementMap = Y.displacementMap, y.displacementScale = Y.displacementScale, y.displacementBias = Y.displacementBias, y.wireframeLinewidth = Y.wireframeLinewidth, y.linewidth = Y.linewidth, m.isPointLight === true && y.isMeshDistanceMaterial === true) {
            const x = C.properties.get(y);
            x.light = m;
          }
          return y;
        }
        function k(R, Y, m, K, y) {
          if (R.visible === false) return;
          if (R.layers.test(Y.layers) && (R.isMesh || R.isLine || R.isPoints) && (R.castShadow || R.receiveShadow && y === tC) && (!R.frustumCulled || g.intersectsObject(R))) {
            R.modelViewMatrix.multiplyMatrices(m.matrixWorldInverse, R.matrixWorld);
            const Z = A.update(R), j = R.material;
            if (Array.isArray(j)) {
              const z = Z.groups;
              for (let V = 0, iA = z.length; V < iA; V++) {
                const v = z[V], sA = j[v.materialIndex];
                if (sA && sA.visible) {
                  const rA = M(R, sA, K, y);
                  R.onBeforeShadow(C, R, Y, m, Z, rA, v), C.renderBufferDirect(m, null, Z, rA, R, v), R.onAfterShadow(C, R, Y, m, Z, rA, v);
                }
              }
            } else if (j.visible) {
              const z = M(R, j, K, y);
              R.onBeforeShadow(C, R, Y, m, Z, z, null), C.renderBufferDirect(m, null, Z, z, R, null), R.onAfterShadow(C, R, Y, m, Z, z, null);
            }
          }
          const x = R.children;
          for (let Z = 0, j = x.length; Z < j; Z++) k(x[Z], Y, m, K, y);
        }
        function p(R) {
          R.target.removeEventListener("dispose", p);
          for (const m in t) {
            const K = t[m], y = R.target.uuid;
            y in K && (K[y].dispose(), delete K[y]);
          }
        }
      }
      const Mk = {
        [No]: Fo,
        [Jo]: Yo,
        [Ro]: qo,
        [qB]: po,
        [Fo]: No,
        [Yo]: Jo,
        [qo]: Ro,
        [po]: qB
      };
      function Kk(C, A) {
        function I() {
          let u = false;
          const EA = new BI();
          let tA = null;
          const wA = new BI(0, 0, 0, 0);
          return {
            setMask: function(CA) {
              tA !== CA && !u && (C.colorMask(CA, CA, CA, CA), tA = CA);
            },
            setLocked: function(CA) {
              u = CA;
            },
            setClear: function(CA, $, lA, TA, rI) {
              rI === true && (CA *= TA, $ *= TA, lA *= TA), EA.set(CA, $, lA, TA), wA.equals(EA) === false && (C.clearColor(CA, $, lA, TA), wA.copy(EA));
            },
            reset: function() {
              u = false, tA = null, wA.set(-1, 0, 0, 0);
            }
          };
        }
        function g() {
          let u = false, EA = false, tA = null, wA = null, CA = null;
          return {
            setReversed: function($) {
              if (EA !== $) {
                const lA = A.get("EXT_clip_control");
                $ ? lA.clipControlEXT(lA.LOWER_LEFT_EXT, lA.ZERO_TO_ONE_EXT) : lA.clipControlEXT(lA.LOWER_LEFT_EXT, lA.NEGATIVE_ONE_TO_ONE_EXT), EA = $;
                const TA = CA;
                CA = null, this.setClear(TA);
              }
            },
            getReversed: function() {
              return EA;
            },
            setTest: function($) {
              $ ? IA(C.DEPTH_TEST) : cA(C.DEPTH_TEST);
            },
            setMask: function($) {
              tA !== $ && !u && (C.depthMask($), tA = $);
            },
            setFunc: function($) {
              if (EA && ($ = Mk[$]), wA !== $) {
                switch ($) {
                  case No:
                    C.depthFunc(C.NEVER);
                    break;
                  case Fo:
                    C.depthFunc(C.ALWAYS);
                    break;
                  case Jo:
                    C.depthFunc(C.LESS);
                    break;
                  case qB:
                    C.depthFunc(C.LEQUAL);
                    break;
                  case Ro:
                    C.depthFunc(C.EQUAL);
                    break;
                  case po:
                    C.depthFunc(C.GEQUAL);
                    break;
                  case Yo:
                    C.depthFunc(C.GREATER);
                    break;
                  case qo:
                    C.depthFunc(C.NOTEQUAL);
                    break;
                  default:
                    C.depthFunc(C.LEQUAL);
                }
                wA = $;
              }
            },
            setLocked: function($) {
              u = $;
            },
            setClear: function($) {
              CA !== $ && (EA && ($ = 1 - $), C.clearDepth($), CA = $);
            },
            reset: function() {
              u = false, tA = null, wA = null, CA = null, EA = false;
            }
          };
        }
        function B() {
          let u = false, EA = null, tA = null, wA = null, CA = null, $ = null, lA = null, TA = null, rI = null;
          return {
            setTest: function(EI) {
              u || (EI ? IA(C.STENCIL_TEST) : cA(C.STENCIL_TEST));
            },
            setMask: function(EI) {
              EA !== EI && !u && (C.stencilMask(EI), EA = EI);
            },
            setFunc: function(EI, IC, Hg) {
              (tA !== EI || wA !== IC || CA !== Hg) && (C.stencilFunc(EI, IC, Hg), tA = EI, wA = IC, CA = Hg);
            },
            setOp: function(EI, IC, Hg) {
              ($ !== EI || lA !== IC || TA !== Hg) && (C.stencilOp(EI, IC, Hg), $ = EI, lA = IC, TA = Hg);
            },
            setLocked: function(EI) {
              u = EI;
            },
            setClear: function(EI) {
              rI !== EI && (C.clearStencil(EI), rI = EI);
            },
            reset: function() {
              u = false, EA = null, tA = null, wA = null, CA = null, $ = null, lA = null, TA = null, rI = null;
            }
          };
        }
        const Q = new I(), E = new g(), i = new B(), o = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        let e = {}, s = {}, a = /* @__PURE__ */ new WeakMap(), r = [], c = null, S = false, h = null, D = null, U = null, M = null, k = null, p = null, R = null, Y = new mA(0, 0, 0), m = 0, K = false, y = null, q = null, x = null, Z = null, j = null;
        const z = C.getParameter(C.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
        let V = false, iA = 0;
        const v = C.getParameter(C.VERSION);
        v.indexOf("WebGL") !== -1 ? (iA = parseFloat(/^WebGL (\d)/.exec(v)[1]), V = iA >= 1) : v.indexOf("OpenGL ES") !== -1 && (iA = parseFloat(/^OpenGL ES (\d)/.exec(v)[1]), V = iA >= 2);
        let sA = null, rA = {};
        const JA = C.getParameter(C.SCISSOR_BOX), jA = C.getParameter(C.VIEWPORT), nI = new BI().fromArray(JA), lI = new BI().fromArray(jA);
        function QI(u, EA, tA, wA) {
          const CA = new Uint8Array(4), $ = C.createTexture();
          C.bindTexture(u, $), C.texParameteri(u, C.TEXTURE_MIN_FILTER, C.NEAREST), C.texParameteri(u, C.TEXTURE_MAG_FILTER, C.NEAREST);
          for (let lA = 0; lA < tA; lA++) u === C.TEXTURE_3D || u === C.TEXTURE_2D_ARRAY ? C.texImage3D(EA, 0, C.RGBA, 1, 1, wA, 0, C.RGBA, C.UNSIGNED_BYTE, CA) : C.texImage2D(EA + lA, 0, C.RGBA, 1, 1, 0, C.RGBA, C.UNSIGNED_BYTE, CA);
          return $;
        }
        const X = {};
        X[C.TEXTURE_2D] = QI(C.TEXTURE_2D, C.TEXTURE_2D, 1), X[C.TEXTURE_CUBE_MAP] = QI(C.TEXTURE_CUBE_MAP, C.TEXTURE_CUBE_MAP_POSITIVE_X, 6), X[C.TEXTURE_2D_ARRAY] = QI(C.TEXTURE_2D_ARRAY, C.TEXTURE_2D_ARRAY, 1, 1), X[C.TEXTURE_3D] = QI(C.TEXTURE_3D, C.TEXTURE_3D, 1, 1), Q.setClear(0, 0, 0, 1), E.setClear(1), i.setClear(0), IA(C.DEPTH_TEST), E.setFunc(qB), LA(false), GA($e), IA(C.CULL_FACE), GI(pC);
        function IA(u) {
          e[u] !== true && (C.enable(u), e[u] = true);
        }
        function cA(u) {
          e[u] !== false && (C.disable(u), e[u] = false);
        }
        function HA(u, EA) {
          return s[u] !== EA ? (C.bindFramebuffer(u, EA), s[u] = EA, u === C.DRAW_FRAMEBUFFER && (s[C.FRAMEBUFFER] = EA), u === C.FRAMEBUFFER && (s[C.DRAW_FRAMEBUFFER] = EA), true) : false;
        }
        function NA(u, EA) {
          let tA = r, wA = false;
          if (u) {
            tA = a.get(EA), tA === void 0 && (tA = [], a.set(EA, tA));
            const CA = u.textures;
            if (tA.length !== CA.length || tA[0] !== C.COLOR_ATTACHMENT0) {
              for (let $ = 0, lA = CA.length; $ < lA; $++) tA[$] = C.COLOR_ATTACHMENT0 + $;
              tA.length = CA.length, wA = true;
            }
          } else tA[0] !== C.BACK && (tA[0] = C.BACK, wA = true);
          wA && C.drawBuffers(tA);
        }
        function II(u) {
          return c !== u ? (C.useProgram(u), c = u, true) : false;
        }
        const VI = {
          [PC]: C.FUNC_ADD,
          [Jr]: C.FUNC_SUBTRACT,
          [Rr]: C.FUNC_REVERSE_SUBTRACT
        };
        VI[pr] = C.MIN, VI[dr] = C.MAX;
        const d = {
          [Yr]: C.ZERO,
          [qr]: C.ONE,
          [Lr]: C.SRC_COLOR,
          [Ko]: C.SRC_ALPHA,
          [br]: C.SRC_ALPHA_SATURATE,
          [mr]: C.DST_COLOR,
          [ur]: C.DST_ALPHA,
          [fr]: C.ONE_MINUS_SRC_COLOR,
          [Uo]: C.ONE_MINUS_SRC_ALPHA,
          [Tr]: C.ONE_MINUS_DST_COLOR,
          [Hr]: C.ONE_MINUS_DST_ALPHA,
          [xr]: C.CONSTANT_COLOR,
          [Or]: C.ONE_MINUS_CONSTANT_COLOR,
          [_r]: C.CONSTANT_ALPHA,
          [Zr]: C.ONE_MINUS_CONSTANT_ALPHA
        };
        function GI(u, EA, tA, wA, CA, $, lA, TA, rI, EI) {
          if (u === pC) {
            S === true && (cA(C.BLEND), S = false);
            return;
          }
          if (S === false && (IA(C.BLEND), S = true), u !== Fr) {
            if (u !== h || EI !== K) {
              if ((D !== PC || k !== PC) && (C.blendEquation(C.FUNC_ADD), D = PC, k = PC), EI) switch (u) {
                case pB:
                  C.blendFuncSeparate(C.ONE, C.ONE_MINUS_SRC_ALPHA, C.ONE, C.ONE_MINUS_SRC_ALPHA);
                  break;
                case As:
                  C.blendFunc(C.ONE, C.ONE);
                  break;
                case Is:
                  C.blendFuncSeparate(C.ZERO, C.ONE_MINUS_SRC_COLOR, C.ZERO, C.ONE);
                  break;
                case gs:
                  C.blendFuncSeparate(C.DST_COLOR, C.ONE_MINUS_SRC_ALPHA, C.ZERO, C.ONE);
                  break;
                default:
                  console.error("THREE.WebGLState: Invalid blending: ", u);
                  break;
              }
              else switch (u) {
                case pB:
                  C.blendFuncSeparate(C.SRC_ALPHA, C.ONE_MINUS_SRC_ALPHA, C.ONE, C.ONE_MINUS_SRC_ALPHA);
                  break;
                case As:
                  C.blendFuncSeparate(C.SRC_ALPHA, C.ONE, C.ONE, C.ONE);
                  break;
                case Is:
                  console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");
                  break;
                case gs:
                  console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");
                  break;
                default:
                  console.error("THREE.WebGLState: Invalid blending: ", u);
                  break;
              }
              U = null, M = null, p = null, R = null, Y.set(0, 0, 0), m = 0, h = u, K = EI;
            }
            return;
          }
          CA = CA || EA, $ = $ || tA, lA = lA || wA, (EA !== D || CA !== k) && (C.blendEquationSeparate(VI[EA], VI[CA]), D = EA, k = CA), (tA !== U || wA !== M || $ !== p || lA !== R) && (C.blendFuncSeparate(d[tA], d[wA], d[$], d[lA]), U = tA, M = wA, p = $, R = lA), (TA.equals(Y) === false || rI !== m) && (C.blendColor(TA.r, TA.g, TA.b, rI), Y.copy(TA), m = rI), h = u, K = false;
        }
        function OA(u, EA) {
          u.side === _g ? cA(C.CULL_FACE) : IA(C.CULL_FACE);
          let tA = u.side === Dg;
          EA && (tA = !tA), LA(tA), u.blending === pB && u.transparent === false ? GI(pC) : GI(u.blending, u.blendEquation, u.blendSrc, u.blendDst, u.blendEquationAlpha, u.blendSrcAlpha, u.blendDstAlpha, u.blendColor, u.blendAlpha, u.premultipliedAlpha), E.setFunc(u.depthFunc), E.setTest(u.depthTest), E.setMask(u.depthWrite), Q.setMask(u.colorWrite);
          const wA = u.stencilWrite;
          i.setTest(wA), wA && (i.setMask(u.stencilWriteMask), i.setFunc(u.stencilFunc, u.stencilRef, u.stencilFuncMask), i.setOp(u.stencilFail, u.stencilZFail, u.stencilZPass)), kA(u.polygonOffset, u.polygonOffsetFactor, u.polygonOffsetUnits), u.alphaToCoverage === true ? IA(C.SAMPLE_ALPHA_TO_COVERAGE) : cA(C.SAMPLE_ALPHA_TO_COVERAGE);
        }
        function LA(u) {
          y !== u && (u ? C.frontFace(C.CW) : C.frontFace(C.CCW), y = u);
        }
        function GA(u) {
          u !== Kr ? (IA(C.CULL_FACE), u !== q && (u === $e ? C.cullFace(C.BACK) : u === Ur ? C.cullFace(C.FRONT) : C.cullFace(C.FRONT_AND_BACK))) : cA(C.CULL_FACE), q = u;
        }
        function kI(u) {
          u !== x && (V && C.lineWidth(u), x = u);
        }
        function kA(u, EA, tA) {
          u ? (IA(C.POLYGON_OFFSET_FILL), (Z !== EA || j !== tA) && (C.polygonOffset(EA, tA), Z = EA, j = tA)) : cA(C.POLYGON_OFFSET_FILL);
        }
        function vA(u) {
          u ? IA(C.SCISSOR_TEST) : cA(C.SCISSOR_TEST);
        }
        function TI(u) {
          u === void 0 && (u = C.TEXTURE0 + z - 1), sA !== u && (C.activeTexture(u), sA = u);
        }
        function JI(u, EA, tA) {
          tA === void 0 && (sA === null ? tA = C.TEXTURE0 + z - 1 : tA = sA);
          let wA = rA[tA];
          wA === void 0 && (wA = {
            type: void 0,
            texture: void 0
          }, rA[tA] = wA), (wA.type !== u || wA.texture !== EA) && (sA !== tA && (C.activeTexture(tA), sA = tA), C.bindTexture(u, EA || X[u]), wA.type = u, wA.texture = EA);
        }
        function N() {
          const u = rA[sA];
          u !== void 0 && u.type !== void 0 && (C.bindTexture(u.type, null), u.type = void 0, u.texture = void 0);
        }
        function l() {
          try {
            C.compressedTexImage2D(...arguments);
          } catch (u) {
            console.error("THREE.WebGLState:", u);
          }
        }
        function b() {
          try {
            C.compressedTexImage3D(...arguments);
          } catch (u) {
            console.error("THREE.WebGLState:", u);
          }
        }
        function W() {
          try {
            C.texSubImage2D(...arguments);
          } catch (u) {
            console.error("THREE.WebGLState:", u);
          }
        }
        function AA() {
          try {
            C.texSubImage3D(...arguments);
          } catch (u) {
            console.error("THREE.WebGLState:", u);
          }
        }
        function P() {
          try {
            C.compressedTexSubImage2D(...arguments);
          } catch (u) {
            console.error("THREE.WebGLState:", u);
          }
        }
        function UA() {
          try {
            C.compressedTexSubImage3D(...arguments);
          } catch (u) {
            console.error("THREE.WebGLState:", u);
          }
        }
        function oA() {
          try {
            C.texStorage2D(...arguments);
          } catch (u) {
            console.error("THREE.WebGLState:", u);
          }
        }
        function yA() {
          try {
            C.texStorage3D(...arguments);
          } catch (u) {
            console.error("THREE.WebGLState:", u);
          }
        }
        function MA() {
          try {
            C.texImage2D(...arguments);
          } catch (u) {
            console.error("THREE.WebGLState:", u);
          }
        }
        function QA() {
          try {
            C.texImage3D(...arguments);
          } catch (u) {
            console.error("THREE.WebGLState:", u);
          }
        }
        function nA(u) {
          nI.equals(u) === false && (C.scissor(u.x, u.y, u.z, u.w), nI.copy(u));
        }
        function qA(u) {
          lI.equals(u) === false && (C.viewport(u.x, u.y, u.z, u.w), lI.copy(u));
        }
        function KA(u, EA) {
          let tA = t.get(EA);
          tA === void 0 && (tA = /* @__PURE__ */ new WeakMap(), t.set(EA, tA));
          let wA = tA.get(u);
          wA === void 0 && (wA = C.getUniformBlockIndex(EA, u.name), tA.set(u, wA));
        }
        function aA(u, EA) {
          const wA = t.get(EA).get(u);
          o.get(EA) !== wA && (C.uniformBlockBinding(EA, wA, u.__bindingPointIndex), o.set(EA, wA));
        }
        function _A() {
          C.disable(C.BLEND), C.disable(C.CULL_FACE), C.disable(C.DEPTH_TEST), C.disable(C.POLYGON_OFFSET_FILL), C.disable(C.SCISSOR_TEST), C.disable(C.STENCIL_TEST), C.disable(C.SAMPLE_ALPHA_TO_COVERAGE), C.blendEquation(C.FUNC_ADD), C.blendFunc(C.ONE, C.ZERO), C.blendFuncSeparate(C.ONE, C.ZERO, C.ONE, C.ZERO), C.blendColor(0, 0, 0, 0), C.colorMask(true, true, true, true), C.clearColor(0, 0, 0, 0), C.depthMask(true), C.depthFunc(C.LESS), E.setReversed(false), C.clearDepth(1), C.stencilMask(4294967295), C.stencilFunc(C.ALWAYS, 0, 4294967295), C.stencilOp(C.KEEP, C.KEEP, C.KEEP), C.clearStencil(0), C.cullFace(C.BACK), C.frontFace(C.CCW), C.polygonOffset(0, 0), C.activeTexture(C.TEXTURE0), C.bindFramebuffer(C.FRAMEBUFFER, null), C.bindFramebuffer(C.DRAW_FRAMEBUFFER, null), C.bindFramebuffer(C.READ_FRAMEBUFFER, null), C.useProgram(null), C.lineWidth(1), C.scissor(0, 0, C.canvas.width, C.canvas.height), C.viewport(0, 0, C.canvas.width, C.canvas.height), e = {}, sA = null, rA = {}, s = {}, a = /* @__PURE__ */ new WeakMap(), r = [], c = null, S = false, h = null, D = null, U = null, M = null, k = null, p = null, R = null, Y = new mA(0, 0, 0), m = 0, K = false, y = null, q = null, x = null, Z = null, j = null, nI.set(0, 0, C.canvas.width, C.canvas.height), lI.set(0, 0, C.canvas.width, C.canvas.height), Q.reset(), E.reset(), i.reset();
        }
        return {
          buffers: {
            color: Q,
            depth: E,
            stencil: i
          },
          enable: IA,
          disable: cA,
          bindFramebuffer: HA,
          drawBuffers: NA,
          useProgram: II,
          setBlending: GI,
          setMaterial: OA,
          setFlipSided: LA,
          setCullFace: GA,
          setLineWidth: kI,
          setPolygonOffset: kA,
          setScissorTest: vA,
          activeTexture: TI,
          bindTexture: JI,
          unbindTexture: N,
          compressedTexImage2D: l,
          compressedTexImage3D: b,
          texImage2D: MA,
          texImage3D: QA,
          updateUBOMapping: KA,
          uniformBlockBinding: aA,
          texStorage2D: oA,
          texStorage3D: yA,
          texSubImage2D: W,
          texSubImage3D: AA,
          compressedTexSubImage2D: P,
          compressedTexSubImage3D: UA,
          scissor: nA,
          viewport: qA,
          reset: _A
        };
      }
      function Uk(C, A, I, g, B, Q, E) {
        const i = A.has("WEBGL_multisampled_render_to_texture") ? A.get("WEBGL_multisampled_render_to_texture") : null, o = typeof navigator > "u" ? false : /OculusBrowser/g.test(navigator.userAgent), t = new XA(), e = /* @__PURE__ */ new WeakMap();
        let s;
        const a = /* @__PURE__ */ new WeakMap();
        let r = false;
        try {
          r = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
        } catch {
        }
        function c(N, l) {
          return r ? new OffscreenCanvas(N, l) : FQ("canvas");
        }
        function S(N, l, b) {
          let W = 1;
          const AA = JI(N);
          if ((AA.width > b || AA.height > b) && (W = b / Math.max(AA.width, AA.height)), W < 1) if (typeof HTMLImageElement < "u" && N instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && N instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && N instanceof ImageBitmap || typeof VideoFrame < "u" && N instanceof VideoFrame) {
            const P = Math.floor(W * AA.width), UA = Math.floor(W * AA.height);
            s === void 0 && (s = c(P, UA));
            const oA = l ? c(P, UA) : s;
            return oA.width = P, oA.height = UA, oA.getContext("2d").drawImage(N, 0, 0, P, UA), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + AA.width + "x" + AA.height + ") to (" + P + "x" + UA + ")."), oA;
          } else return "data" in N && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + AA.width + "x" + AA.height + ")."), N;
          return N;
        }
        function h(N) {
          return N.generateMipmaps;
        }
        function D(N) {
          C.generateMipmap(N);
        }
        function U(N) {
          return N.isWebGLCubeRenderTarget ? C.TEXTURE_CUBE_MAP : N.isWebGL3DRenderTarget ? C.TEXTURE_3D : N.isWebGLArrayRenderTarget || N.isCompressedArrayTexture ? C.TEXTURE_2D_ARRAY : C.TEXTURE_2D;
        }
        function M(N, l, b, W, AA = false) {
          if (N !== null) {
            if (C[N] !== void 0) return C[N];
            console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + N + "'");
          }
          let P = l;
          if (l === C.RED && (b === C.FLOAT && (P = C.R32F), b === C.HALF_FLOAT && (P = C.R16F), b === C.UNSIGNED_BYTE && (P = C.R8)), l === C.RED_INTEGER && (b === C.UNSIGNED_BYTE && (P = C.R8UI), b === C.UNSIGNED_SHORT && (P = C.R16UI), b === C.UNSIGNED_INT && (P = C.R32UI), b === C.BYTE && (P = C.R8I), b === C.SHORT && (P = C.R16I), b === C.INT && (P = C.R32I)), l === C.RG && (b === C.FLOAT && (P = C.RG32F), b === C.HALF_FLOAT && (P = C.RG16F), b === C.UNSIGNED_BYTE && (P = C.RG8)), l === C.RG_INTEGER && (b === C.UNSIGNED_BYTE && (P = C.RG8UI), b === C.UNSIGNED_SHORT && (P = C.RG16UI), b === C.UNSIGNED_INT && (P = C.RG32UI), b === C.BYTE && (P = C.RG8I), b === C.SHORT && (P = C.RG16I), b === C.INT && (P = C.RG32I)), l === C.RGB_INTEGER && (b === C.UNSIGNED_BYTE && (P = C.RGB8UI), b === C.UNSIGNED_SHORT && (P = C.RGB16UI), b === C.UNSIGNED_INT && (P = C.RGB32UI), b === C.BYTE && (P = C.RGB8I), b === C.SHORT && (P = C.RGB16I), b === C.INT && (P = C.RGB32I)), l === C.RGBA_INTEGER && (b === C.UNSIGNED_BYTE && (P = C.RGBA8UI), b === C.UNSIGNED_SHORT && (P = C.RGBA16UI), b === C.UNSIGNED_INT && (P = C.RGBA32UI), b === C.BYTE && (P = C.RGBA8I), b === C.SHORT && (P = C.RGBA16I), b === C.INT && (P = C.RGBA32I)), l === C.RGB && (b === C.UNSIGNED_INT_5_9_9_9_REV && (P = C.RGB9_E5), b === C.UNSIGNED_INT_10F_11F_11F_REV && (P = C.R11F_G11F_B10F)), l === C.RGBA) {
            const UA = AA ? uE : gI.getTransfer(W);
            b === C.FLOAT && (P = C.RGBA32F), b === C.HALF_FLOAT && (P = C.RGBA16F), b === C.UNSIGNED_BYTE && (P = UA === eI ? C.SRGB8_ALPHA8 : C.RGBA8), b === C.UNSIGNED_SHORT_4_4_4_4 && (P = C.RGBA4), b === C.UNSIGNED_SHORT_5_5_5_1 && (P = C.RGB5_A1);
          }
          return (P === C.R16F || P === C.R32F || P === C.RG16F || P === C.RG32F || P === C.RGBA16F || P === C.RGBA32F) && A.get("EXT_color_buffer_float"), P;
        }
        function k(N, l) {
          let b;
          return N ? l === null || l === IB || l === yQ ? b = C.DEPTH24_STENCIL8 : l === dg ? b = C.DEPTH32F_STENCIL8 : l === kQ && (b = C.DEPTH24_STENCIL8, console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")) : l === null || l === IB || l === yQ ? b = C.DEPTH_COMPONENT24 : l === dg ? b = C.DEPTH_COMPONENT32F : l === kQ && (b = C.DEPTH_COMPONENT16), b;
        }
        function p(N, l) {
          return h(N) === true || N.isFramebufferTexture && N.minFilter !== og && N.minFilter !== sg ? Math.log2(Math.max(l.width, l.height)) + 1 : N.mipmaps !== void 0 && N.mipmaps.length > 0 ? N.mipmaps.length : N.isCompressedTexture && Array.isArray(N.image) ? l.mipmaps.length : 1;
        }
        function R(N) {
          const l = N.target;
          l.removeEventListener("dispose", R), m(l), l.isVideoTexture && e.delete(l);
        }
        function Y(N) {
          const l = N.target;
          l.removeEventListener("dispose", Y), y(l);
        }
        function m(N) {
          const l = g.get(N);
          if (l.__webglInit === void 0) return;
          const b = N.source, W = a.get(b);
          if (W) {
            const AA = W[l.__cacheKey];
            AA.usedTimes--, AA.usedTimes === 0 && K(N), Object.keys(W).length === 0 && a.delete(b);
          }
          g.remove(N);
        }
        function K(N) {
          const l = g.get(N);
          C.deleteTexture(l.__webglTexture);
          const b = N.source, W = a.get(b);
          delete W[l.__cacheKey], E.memory.textures--;
        }
        function y(N) {
          const l = g.get(N);
          if (N.depthTexture && (N.depthTexture.dispose(), g.remove(N.depthTexture)), N.isWebGLCubeRenderTarget) for (let W = 0; W < 6; W++) {
            if (Array.isArray(l.__webglFramebuffer[W])) for (let AA = 0; AA < l.__webglFramebuffer[W].length; AA++) C.deleteFramebuffer(l.__webglFramebuffer[W][AA]);
            else C.deleteFramebuffer(l.__webglFramebuffer[W]);
            l.__webglDepthbuffer && C.deleteRenderbuffer(l.__webglDepthbuffer[W]);
          }
          else {
            if (Array.isArray(l.__webglFramebuffer)) for (let W = 0; W < l.__webglFramebuffer.length; W++) C.deleteFramebuffer(l.__webglFramebuffer[W]);
            else C.deleteFramebuffer(l.__webglFramebuffer);
            if (l.__webglDepthbuffer && C.deleteRenderbuffer(l.__webglDepthbuffer), l.__webglMultisampledFramebuffer && C.deleteFramebuffer(l.__webglMultisampledFramebuffer), l.__webglColorRenderbuffer) for (let W = 0; W < l.__webglColorRenderbuffer.length; W++) l.__webglColorRenderbuffer[W] && C.deleteRenderbuffer(l.__webglColorRenderbuffer[W]);
            l.__webglDepthRenderbuffer && C.deleteRenderbuffer(l.__webglDepthRenderbuffer);
          }
          const b = N.textures;
          for (let W = 0, AA = b.length; W < AA; W++) {
            const P = g.get(b[W]);
            P.__webglTexture && (C.deleteTexture(P.__webglTexture), E.memory.textures--), g.remove(b[W]);
          }
          g.remove(N);
        }
        let q = 0;
        function x() {
          q = 0;
        }
        function Z() {
          const N = q;
          return N >= B.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + N + " texture units while this GPU supports only " + B.maxTextures), q += 1, N;
        }
        function j(N) {
          const l = [];
          return l.push(N.wrapS), l.push(N.wrapT), l.push(N.wrapR || 0), l.push(N.magFilter), l.push(N.minFilter), l.push(N.anisotropy), l.push(N.internalFormat), l.push(N.format), l.push(N.type), l.push(N.generateMipmaps), l.push(N.premultiplyAlpha), l.push(N.flipY), l.push(N.unpackAlignment), l.push(N.colorSpace), l.join();
        }
        function z(N, l) {
          const b = g.get(N);
          if (N.isVideoTexture && vA(N), N.isRenderTargetTexture === false && N.isExternalTexture !== true && N.version > 0 && b.__version !== N.version) {
            const W = N.image;
            if (W === null) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
            else if (W.complete === false) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
            else {
              X(b, N, l);
              return;
            }
          } else N.isExternalTexture && (b.__webglTexture = N.sourceTexture ? N.sourceTexture : null);
          I.bindTexture(C.TEXTURE_2D, b.__webglTexture, C.TEXTURE0 + l);
        }
        function V(N, l) {
          const b = g.get(N);
          if (N.isRenderTargetTexture === false && N.version > 0 && b.__version !== N.version) {
            X(b, N, l);
            return;
          }
          I.bindTexture(C.TEXTURE_2D_ARRAY, b.__webglTexture, C.TEXTURE0 + l);
        }
        function iA(N, l) {
          const b = g.get(N);
          if (N.isRenderTargetTexture === false && N.version > 0 && b.__version !== N.version) {
            X(b, N, l);
            return;
          }
          I.bindTexture(C.TEXTURE_3D, b.__webglTexture, C.TEXTURE0 + l);
        }
        function v(N, l) {
          const b = g.get(N);
          if (N.version > 0 && b.__version !== N.version) {
            IA(b, N, l);
            return;
          }
          I.bindTexture(C.TEXTURE_CUBE_MAP, b.__webglTexture, C.TEXTURE0 + l);
        }
        const sA = {
          [uB]: C.REPEAT,
          [Zg]: C.CLAMP_TO_EDGE,
          [fE]: C.MIRRORED_REPEAT
        }, rA = {
          [og]: C.NEAREST,
          [lD]: C.NEAREST_MIPMAP_NEAREST,
          [aQ]: C.NEAREST_MIPMAP_LINEAR,
          [sg]: C.LINEAR,
          [NE]: C.LINEAR_MIPMAP_NEAREST,
          [aC]: C.LINEAR_MIPMAP_LINEAR
        }, JA = {
          [oh]: C.NEVER,
          [nh]: C.ALWAYS,
          [th]: C.LESS,
          [RD]: C.LEQUAL,
          [eh]: C.EQUAL,
          [Dh]: C.GEQUAL,
          [sh]: C.GREATER,
          [ah]: C.NOTEQUAL
        };
        function jA(N, l) {
          if (l.type === dg && A.has("OES_texture_float_linear") === false && (l.magFilter === sg || l.magFilter === NE || l.magFilter === aQ || l.magFilter === aC || l.minFilter === sg || l.minFilter === NE || l.minFilter === aQ || l.minFilter === aC) && console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."), C.texParameteri(N, C.TEXTURE_WRAP_S, sA[l.wrapS]), C.texParameteri(N, C.TEXTURE_WRAP_T, sA[l.wrapT]), (N === C.TEXTURE_3D || N === C.TEXTURE_2D_ARRAY) && C.texParameteri(N, C.TEXTURE_WRAP_R, sA[l.wrapR]), C.texParameteri(N, C.TEXTURE_MAG_FILTER, rA[l.magFilter]), C.texParameteri(N, C.TEXTURE_MIN_FILTER, rA[l.minFilter]), l.compareFunction && (C.texParameteri(N, C.TEXTURE_COMPARE_MODE, C.COMPARE_REF_TO_TEXTURE), C.texParameteri(N, C.TEXTURE_COMPARE_FUNC, JA[l.compareFunction])), A.has("EXT_texture_filter_anisotropic") === true) {
            if (l.magFilter === og || l.minFilter !== aQ && l.minFilter !== aC || l.type === dg && A.has("OES_texture_float_linear") === false) return;
            if (l.anisotropy > 1 || g.get(l).__currentAnisotropy) {
              const b = A.get("EXT_texture_filter_anisotropic");
              C.texParameterf(N, b.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(l.anisotropy, B.getMaxAnisotropy())), g.get(l).__currentAnisotropy = l.anisotropy;
            }
          }
        }
        function nI(N, l) {
          let b = false;
          N.__webglInit === void 0 && (N.__webglInit = true, l.addEventListener("dispose", R));
          const W = l.source;
          let AA = a.get(W);
          AA === void 0 && (AA = {}, a.set(W, AA));
          const P = j(l);
          if (P !== N.__cacheKey) {
            AA[P] === void 0 && (AA[P] = {
              texture: C.createTexture(),
              usedTimes: 0
            }, E.memory.textures++, b = true), AA[P].usedTimes++;
            const UA = AA[N.__cacheKey];
            UA !== void 0 && (AA[N.__cacheKey].usedTimes--, UA.usedTimes === 0 && K(l)), N.__cacheKey = P, N.__webglTexture = AA[P].texture;
          }
          return b;
        }
        function lI(N, l, b) {
          return Math.floor(Math.floor(N / b) / l);
        }
        function QI(N, l, b, W) {
          const P = N.updateRanges;
          if (P.length === 0) I.texSubImage2D(C.TEXTURE_2D, 0, 0, 0, l.width, l.height, b, W, l.data);
          else {
            P.sort((QA, nA) => QA.start - nA.start);
            let UA = 0;
            for (let QA = 1; QA < P.length; QA++) {
              const nA = P[UA], qA = P[QA], KA = nA.start + nA.count, aA = lI(qA.start, l.width, 4), _A = lI(nA.start, l.width, 4);
              qA.start <= KA + 1 && aA === _A && lI(qA.start + qA.count - 1, l.width, 4) === aA ? nA.count = Math.max(nA.count, qA.start + qA.count - nA.start) : (++UA, P[UA] = qA);
            }
            P.length = UA + 1;
            const oA = C.getParameter(C.UNPACK_ROW_LENGTH), yA = C.getParameter(C.UNPACK_SKIP_PIXELS), MA = C.getParameter(C.UNPACK_SKIP_ROWS);
            C.pixelStorei(C.UNPACK_ROW_LENGTH, l.width);
            for (let QA = 0, nA = P.length; QA < nA; QA++) {
              const qA = P[QA], KA = Math.floor(qA.start / 4), aA = Math.ceil(qA.count / 4), _A = KA % l.width, u = Math.floor(KA / l.width), EA = aA, tA = 1;
              C.pixelStorei(C.UNPACK_SKIP_PIXELS, _A), C.pixelStorei(C.UNPACK_SKIP_ROWS, u), I.texSubImage2D(C.TEXTURE_2D, 0, _A, u, EA, tA, b, W, l.data);
            }
            N.clearUpdateRanges(), C.pixelStorei(C.UNPACK_ROW_LENGTH, oA), C.pixelStorei(C.UNPACK_SKIP_PIXELS, yA), C.pixelStorei(C.UNPACK_SKIP_ROWS, MA);
          }
        }
        function X(N, l, b) {
          let W = C.TEXTURE_2D;
          (l.isDataArrayTexture || l.isCompressedArrayTexture) && (W = C.TEXTURE_2D_ARRAY), l.isData3DTexture && (W = C.TEXTURE_3D);
          const AA = nI(N, l), P = l.source;
          I.bindTexture(W, N.__webglTexture, C.TEXTURE0 + b);
          const UA = g.get(P);
          if (P.version !== UA.__version || AA === true) {
            I.activeTexture(C.TEXTURE0 + b);
            const oA = gI.getPrimaries(gI.workingColorSpace), yA = l.colorSpace === RC ? null : gI.getPrimaries(l.colorSpace), MA = l.colorSpace === RC || oA === yA ? C.NONE : C.BROWSER_DEFAULT_WEBGL;
            C.pixelStorei(C.UNPACK_FLIP_Y_WEBGL, l.flipY), C.pixelStorei(C.UNPACK_PREMULTIPLY_ALPHA_WEBGL, l.premultiplyAlpha), C.pixelStorei(C.UNPACK_ALIGNMENT, l.unpackAlignment), C.pixelStorei(C.UNPACK_COLORSPACE_CONVERSION_WEBGL, MA);
            let QA = S(l.image, false, B.maxTextureSize);
            QA = TI(l, QA);
            const nA = Q.convert(l.format, l.colorSpace), qA = Q.convert(l.type);
            let KA = M(l.internalFormat, nA, qA, l.colorSpace, l.isVideoTexture);
            jA(W, l);
            let aA;
            const _A = l.mipmaps, u = l.isVideoTexture !== true, EA = UA.__version === void 0 || AA === true, tA = P.dataReady, wA = p(l, QA);
            if (l.isDepthTexture) KA = k(l.format === KQ, l.type), EA && (u ? I.texStorage2D(C.TEXTURE_2D, 1, KA, QA.width, QA.height) : I.texImage2D(C.TEXTURE_2D, 0, KA, QA.width, QA.height, 0, nA, qA, null));
            else if (l.isDataTexture) if (_A.length > 0) {
              u && EA && I.texStorage2D(C.TEXTURE_2D, wA, KA, _A[0].width, _A[0].height);
              for (let CA = 0, $ = _A.length; CA < $; CA++) aA = _A[CA], u ? tA && I.texSubImage2D(C.TEXTURE_2D, CA, 0, 0, aA.width, aA.height, nA, qA, aA.data) : I.texImage2D(C.TEXTURE_2D, CA, KA, aA.width, aA.height, 0, nA, qA, aA.data);
              l.generateMipmaps = false;
            } else u ? (EA && I.texStorage2D(C.TEXTURE_2D, wA, KA, QA.width, QA.height), tA && QI(l, QA, nA, qA)) : I.texImage2D(C.TEXTURE_2D, 0, KA, QA.width, QA.height, 0, nA, qA, QA.data);
            else if (l.isCompressedTexture) if (l.isCompressedArrayTexture) {
              u && EA && I.texStorage3D(C.TEXTURE_2D_ARRAY, wA, KA, _A[0].width, _A[0].height, QA.depth);
              for (let CA = 0, $ = _A.length; CA < $; CA++) if (aA = _A[CA], l.format !== ag) if (nA !== null) if (u) {
                if (tA) if (l.layerUpdates.size > 0) {
                  const lA = Ps(aA.width, aA.height, l.format, l.type);
                  for (const TA of l.layerUpdates) {
                    const rI = aA.data.subarray(TA * lA / aA.data.BYTES_PER_ELEMENT, (TA + 1) * lA / aA.data.BYTES_PER_ELEMENT);
                    I.compressedTexSubImage3D(C.TEXTURE_2D_ARRAY, CA, 0, 0, TA, aA.width, aA.height, 1, nA, rI);
                  }
                  l.clearLayerUpdates();
                } else I.compressedTexSubImage3D(C.TEXTURE_2D_ARRAY, CA, 0, 0, 0, aA.width, aA.height, QA.depth, nA, aA.data);
              } else I.compressedTexImage3D(C.TEXTURE_2D_ARRAY, CA, KA, aA.width, aA.height, QA.depth, 0, aA.data, 0, 0);
              else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
              else u ? tA && I.texSubImage3D(C.TEXTURE_2D_ARRAY, CA, 0, 0, 0, aA.width, aA.height, QA.depth, nA, qA, aA.data) : I.texImage3D(C.TEXTURE_2D_ARRAY, CA, KA, aA.width, aA.height, QA.depth, 0, nA, qA, aA.data);
            } else {
              u && EA && I.texStorage2D(C.TEXTURE_2D, wA, KA, _A[0].width, _A[0].height);
              for (let CA = 0, $ = _A.length; CA < $; CA++) aA = _A[CA], l.format !== ag ? nA !== null ? u ? tA && I.compressedTexSubImage2D(C.TEXTURE_2D, CA, 0, 0, aA.width, aA.height, nA, aA.data) : I.compressedTexImage2D(C.TEXTURE_2D, CA, KA, aA.width, aA.height, 0, aA.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : u ? tA && I.texSubImage2D(C.TEXTURE_2D, CA, 0, 0, aA.width, aA.height, nA, qA, aA.data) : I.texImage2D(C.TEXTURE_2D, CA, KA, aA.width, aA.height, 0, nA, qA, aA.data);
            }
            else if (l.isDataArrayTexture) if (u) {
              if (EA && I.texStorage3D(C.TEXTURE_2D_ARRAY, wA, KA, QA.width, QA.height, QA.depth), tA) if (l.layerUpdates.size > 0) {
                const CA = Ps(QA.width, QA.height, l.format, l.type);
                for (const $ of l.layerUpdates) {
                  const lA = QA.data.subarray($ * CA / QA.data.BYTES_PER_ELEMENT, ($ + 1) * CA / QA.data.BYTES_PER_ELEMENT);
                  I.texSubImage3D(C.TEXTURE_2D_ARRAY, 0, 0, 0, $, QA.width, QA.height, 1, nA, qA, lA);
                }
                l.clearLayerUpdates();
              } else I.texSubImage3D(C.TEXTURE_2D_ARRAY, 0, 0, 0, 0, QA.width, QA.height, QA.depth, nA, qA, QA.data);
            } else I.texImage3D(C.TEXTURE_2D_ARRAY, 0, KA, QA.width, QA.height, QA.depth, 0, nA, qA, QA.data);
            else if (l.isData3DTexture) u ? (EA && I.texStorage3D(C.TEXTURE_3D, wA, KA, QA.width, QA.height, QA.depth), tA && I.texSubImage3D(C.TEXTURE_3D, 0, 0, 0, 0, QA.width, QA.height, QA.depth, nA, qA, QA.data)) : I.texImage3D(C.TEXTURE_3D, 0, KA, QA.width, QA.height, QA.depth, 0, nA, qA, QA.data);
            else if (l.isFramebufferTexture) {
              if (EA) if (u) I.texStorage2D(C.TEXTURE_2D, wA, KA, QA.width, QA.height);
              else {
                let CA = QA.width, $ = QA.height;
                for (let lA = 0; lA < wA; lA++) I.texImage2D(C.TEXTURE_2D, lA, KA, CA, $, 0, nA, qA, null), CA >>= 1, $ >>= 1;
              }
            } else if (_A.length > 0) {
              if (u && EA) {
                const CA = JI(_A[0]);
                I.texStorage2D(C.TEXTURE_2D, wA, KA, CA.width, CA.height);
              }
              for (let CA = 0, $ = _A.length; CA < $; CA++) aA = _A[CA], u ? tA && I.texSubImage2D(C.TEXTURE_2D, CA, 0, 0, nA, qA, aA) : I.texImage2D(C.TEXTURE_2D, CA, KA, nA, qA, aA);
              l.generateMipmaps = false;
            } else if (u) {
              if (EA) {
                const CA = JI(QA);
                I.texStorage2D(C.TEXTURE_2D, wA, KA, CA.width, CA.height);
              }
              tA && I.texSubImage2D(C.TEXTURE_2D, 0, 0, 0, nA, qA, QA);
            } else I.texImage2D(C.TEXTURE_2D, 0, KA, nA, qA, QA);
            h(l) && D(W), UA.__version = P.version, l.onUpdate && l.onUpdate(l);
          }
          N.__version = l.version;
        }
        function IA(N, l, b) {
          if (l.image.length !== 6) return;
          const W = nI(N, l), AA = l.source;
          I.bindTexture(C.TEXTURE_CUBE_MAP, N.__webglTexture, C.TEXTURE0 + b);
          const P = g.get(AA);
          if (AA.version !== P.__version || W === true) {
            I.activeTexture(C.TEXTURE0 + b);
            const UA = gI.getPrimaries(gI.workingColorSpace), oA = l.colorSpace === RC ? null : gI.getPrimaries(l.colorSpace), yA = l.colorSpace === RC || UA === oA ? C.NONE : C.BROWSER_DEFAULT_WEBGL;
            C.pixelStorei(C.UNPACK_FLIP_Y_WEBGL, l.flipY), C.pixelStorei(C.UNPACK_PREMULTIPLY_ALPHA_WEBGL, l.premultiplyAlpha), C.pixelStorei(C.UNPACK_ALIGNMENT, l.unpackAlignment), C.pixelStorei(C.UNPACK_COLORSPACE_CONVERSION_WEBGL, yA);
            const MA = l.isCompressedTexture || l.image[0].isCompressedTexture, QA = l.image[0] && l.image[0].isDataTexture, nA = [];
            for (let $ = 0; $ < 6; $++) !MA && !QA ? nA[$] = S(l.image[$], true, B.maxCubemapSize) : nA[$] = QA ? l.image[$].image : l.image[$], nA[$] = TI(l, nA[$]);
            const qA = nA[0], KA = Q.convert(l.format, l.colorSpace), aA = Q.convert(l.type), _A = M(l.internalFormat, KA, aA, l.colorSpace), u = l.isVideoTexture !== true, EA = P.__version === void 0 || W === true, tA = AA.dataReady;
            let wA = p(l, qA);
            jA(C.TEXTURE_CUBE_MAP, l);
            let CA;
            if (MA) {
              u && EA && I.texStorage2D(C.TEXTURE_CUBE_MAP, wA, _A, qA.width, qA.height);
              for (let $ = 0; $ < 6; $++) {
                CA = nA[$].mipmaps;
                for (let lA = 0; lA < CA.length; lA++) {
                  const TA = CA[lA];
                  l.format !== ag ? KA !== null ? u ? tA && I.compressedTexSubImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, lA, 0, 0, TA.width, TA.height, KA, TA.data) : I.compressedTexImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, lA, _A, TA.width, TA.height, 0, TA.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : u ? tA && I.texSubImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, lA, 0, 0, TA.width, TA.height, KA, aA, TA.data) : I.texImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, lA, _A, TA.width, TA.height, 0, KA, aA, TA.data);
                }
              }
            } else {
              if (CA = l.mipmaps, u && EA) {
                CA.length > 0 && wA++;
                const $ = JI(nA[0]);
                I.texStorage2D(C.TEXTURE_CUBE_MAP, wA, _A, $.width, $.height);
              }
              for (let $ = 0; $ < 6; $++) if (QA) {
                u ? tA && I.texSubImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, 0, 0, 0, nA[$].width, nA[$].height, KA, aA, nA[$].data) : I.texImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, 0, _A, nA[$].width, nA[$].height, 0, KA, aA, nA[$].data);
                for (let lA = 0; lA < CA.length; lA++) {
                  const rI = CA[lA].image[$].image;
                  u ? tA && I.texSubImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, lA + 1, 0, 0, rI.width, rI.height, KA, aA, rI.data) : I.texImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, lA + 1, _A, rI.width, rI.height, 0, KA, aA, rI.data);
                }
              } else {
                u ? tA && I.texSubImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, 0, 0, 0, KA, aA, nA[$]) : I.texImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, 0, _A, KA, aA, nA[$]);
                for (let lA = 0; lA < CA.length; lA++) {
                  const TA = CA[lA];
                  u ? tA && I.texSubImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, lA + 1, 0, 0, KA, aA, TA.image[$]) : I.texImage2D(C.TEXTURE_CUBE_MAP_POSITIVE_X + $, lA + 1, _A, KA, aA, TA.image[$]);
                }
              }
            }
            h(l) && D(C.TEXTURE_CUBE_MAP), P.__version = AA.version, l.onUpdate && l.onUpdate(l);
          }
          N.__version = l.version;
        }
        function cA(N, l, b, W, AA, P) {
          const UA = Q.convert(b.format, b.colorSpace), oA = Q.convert(b.type), yA = M(b.internalFormat, UA, oA, b.colorSpace), MA = g.get(l), QA = g.get(b);
          if (QA.__renderTarget = l, !MA.__hasExternalTextures) {
            const nA = Math.max(1, l.width >> P), qA = Math.max(1, l.height >> P);
            AA === C.TEXTURE_3D || AA === C.TEXTURE_2D_ARRAY ? I.texImage3D(AA, P, yA, nA, qA, l.depth, 0, UA, oA, null) : I.texImage2D(AA, P, yA, nA, qA, 0, UA, oA, null);
          }
          I.bindFramebuffer(C.FRAMEBUFFER, N), kA(l) ? i.framebufferTexture2DMultisampleEXT(C.FRAMEBUFFER, W, AA, QA.__webglTexture, 0, kI(l)) : (AA === C.TEXTURE_2D || AA >= C.TEXTURE_CUBE_MAP_POSITIVE_X && AA <= C.TEXTURE_CUBE_MAP_NEGATIVE_Z) && C.framebufferTexture2D(C.FRAMEBUFFER, W, AA, QA.__webglTexture, P), I.bindFramebuffer(C.FRAMEBUFFER, null);
        }
        function HA(N, l, b) {
          if (C.bindRenderbuffer(C.RENDERBUFFER, N), l.depthBuffer) {
            const W = l.depthTexture, AA = W && W.isDepthTexture ? W.type : null, P = k(l.stencilBuffer, AA), UA = l.stencilBuffer ? C.DEPTH_STENCIL_ATTACHMENT : C.DEPTH_ATTACHMENT, oA = kI(l);
            kA(l) ? i.renderbufferStorageMultisampleEXT(C.RENDERBUFFER, oA, P, l.width, l.height) : b ? C.renderbufferStorageMultisample(C.RENDERBUFFER, oA, P, l.width, l.height) : C.renderbufferStorage(C.RENDERBUFFER, P, l.width, l.height), C.framebufferRenderbuffer(C.FRAMEBUFFER, UA, C.RENDERBUFFER, N);
          } else {
            const W = l.textures;
            for (let AA = 0; AA < W.length; AA++) {
              const P = W[AA], UA = Q.convert(P.format, P.colorSpace), oA = Q.convert(P.type), yA = M(P.internalFormat, UA, oA, P.colorSpace), MA = kI(l);
              b && kA(l) === false ? C.renderbufferStorageMultisample(C.RENDERBUFFER, MA, yA, l.width, l.height) : kA(l) ? i.renderbufferStorageMultisampleEXT(C.RENDERBUFFER, MA, yA, l.width, l.height) : C.renderbufferStorage(C.RENDERBUFFER, yA, l.width, l.height);
            }
          }
          C.bindRenderbuffer(C.RENDERBUFFER, null);
        }
        function NA(N, l) {
          if (l && l.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
          if (I.bindFramebuffer(C.FRAMEBUFFER, N), !(l.depthTexture && l.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
          const W = g.get(l.depthTexture);
          W.__renderTarget = l, (!W.__webglTexture || l.depthTexture.image.width !== l.width || l.depthTexture.image.height !== l.height) && (l.depthTexture.image.width = l.width, l.depthTexture.image.height = l.height, l.depthTexture.needsUpdate = true), z(l.depthTexture, 0);
          const AA = W.__webglTexture, P = kI(l);
          if (l.depthTexture.format === MQ) kA(l) ? i.framebufferTexture2DMultisampleEXT(C.FRAMEBUFFER, C.DEPTH_ATTACHMENT, C.TEXTURE_2D, AA, 0, P) : C.framebufferTexture2D(C.FRAMEBUFFER, C.DEPTH_ATTACHMENT, C.TEXTURE_2D, AA, 0);
          else if (l.depthTexture.format === KQ) kA(l) ? i.framebufferTexture2DMultisampleEXT(C.FRAMEBUFFER, C.DEPTH_STENCIL_ATTACHMENT, C.TEXTURE_2D, AA, 0, P) : C.framebufferTexture2D(C.FRAMEBUFFER, C.DEPTH_STENCIL_ATTACHMENT, C.TEXTURE_2D, AA, 0);
          else throw new Error("Unknown depthTexture format");
        }
        function II(N) {
          const l = g.get(N), b = N.isWebGLCubeRenderTarget === true;
          if (l.__boundDepthTexture !== N.depthTexture) {
            const W = N.depthTexture;
            if (l.__depthDisposeCallback && l.__depthDisposeCallback(), W) {
              const AA = () => {
                delete l.__boundDepthTexture, delete l.__depthDisposeCallback, W.removeEventListener("dispose", AA);
              };
              W.addEventListener("dispose", AA), l.__depthDisposeCallback = AA;
            }
            l.__boundDepthTexture = W;
          }
          if (N.depthTexture && !l.__autoAllocateDepthBuffer) {
            if (b) throw new Error("target.depthTexture not supported in Cube render targets");
            const W = N.texture.mipmaps;
            W && W.length > 0 ? NA(l.__webglFramebuffer[0], N) : NA(l.__webglFramebuffer, N);
          } else if (b) {
            l.__webglDepthbuffer = [];
            for (let W = 0; W < 6; W++) if (I.bindFramebuffer(C.FRAMEBUFFER, l.__webglFramebuffer[W]), l.__webglDepthbuffer[W] === void 0) l.__webglDepthbuffer[W] = C.createRenderbuffer(), HA(l.__webglDepthbuffer[W], N, false);
            else {
              const AA = N.stencilBuffer ? C.DEPTH_STENCIL_ATTACHMENT : C.DEPTH_ATTACHMENT, P = l.__webglDepthbuffer[W];
              C.bindRenderbuffer(C.RENDERBUFFER, P), C.framebufferRenderbuffer(C.FRAMEBUFFER, AA, C.RENDERBUFFER, P);
            }
          } else {
            const W = N.texture.mipmaps;
            if (W && W.length > 0 ? I.bindFramebuffer(C.FRAMEBUFFER, l.__webglFramebuffer[0]) : I.bindFramebuffer(C.FRAMEBUFFER, l.__webglFramebuffer), l.__webglDepthbuffer === void 0) l.__webglDepthbuffer = C.createRenderbuffer(), HA(l.__webglDepthbuffer, N, false);
            else {
              const AA = N.stencilBuffer ? C.DEPTH_STENCIL_ATTACHMENT : C.DEPTH_ATTACHMENT, P = l.__webglDepthbuffer;
              C.bindRenderbuffer(C.RENDERBUFFER, P), C.framebufferRenderbuffer(C.FRAMEBUFFER, AA, C.RENDERBUFFER, P);
            }
          }
          I.bindFramebuffer(C.FRAMEBUFFER, null);
        }
        function VI(N, l, b) {
          const W = g.get(N);
          l !== void 0 && cA(W.__webglFramebuffer, N, N.texture, C.COLOR_ATTACHMENT0, C.TEXTURE_2D, 0), b !== void 0 && II(N);
        }
        function d(N) {
          const l = N.texture, b = g.get(N), W = g.get(l);
          N.addEventListener("dispose", Y);
          const AA = N.textures, P = N.isWebGLCubeRenderTarget === true, UA = AA.length > 1;
          if (UA || (W.__webglTexture === void 0 && (W.__webglTexture = C.createTexture()), W.__version = l.version, E.memory.textures++), P) {
            b.__webglFramebuffer = [];
            for (let oA = 0; oA < 6; oA++) if (l.mipmaps && l.mipmaps.length > 0) {
              b.__webglFramebuffer[oA] = [];
              for (let yA = 0; yA < l.mipmaps.length; yA++) b.__webglFramebuffer[oA][yA] = C.createFramebuffer();
            } else b.__webglFramebuffer[oA] = C.createFramebuffer();
          } else {
            if (l.mipmaps && l.mipmaps.length > 0) {
              b.__webglFramebuffer = [];
              for (let oA = 0; oA < l.mipmaps.length; oA++) b.__webglFramebuffer[oA] = C.createFramebuffer();
            } else b.__webglFramebuffer = C.createFramebuffer();
            if (UA) for (let oA = 0, yA = AA.length; oA < yA; oA++) {
              const MA = g.get(AA[oA]);
              MA.__webglTexture === void 0 && (MA.__webglTexture = C.createTexture(), E.memory.textures++);
            }
            if (N.samples > 0 && kA(N) === false) {
              b.__webglMultisampledFramebuffer = C.createFramebuffer(), b.__webglColorRenderbuffer = [], I.bindFramebuffer(C.FRAMEBUFFER, b.__webglMultisampledFramebuffer);
              for (let oA = 0; oA < AA.length; oA++) {
                const yA = AA[oA];
                b.__webglColorRenderbuffer[oA] = C.createRenderbuffer(), C.bindRenderbuffer(C.RENDERBUFFER, b.__webglColorRenderbuffer[oA]);
                const MA = Q.convert(yA.format, yA.colorSpace), QA = Q.convert(yA.type), nA = M(yA.internalFormat, MA, QA, yA.colorSpace, N.isXRRenderTarget === true), qA = kI(N);
                C.renderbufferStorageMultisample(C.RENDERBUFFER, qA, nA, N.width, N.height), C.framebufferRenderbuffer(C.FRAMEBUFFER, C.COLOR_ATTACHMENT0 + oA, C.RENDERBUFFER, b.__webglColorRenderbuffer[oA]);
              }
              C.bindRenderbuffer(C.RENDERBUFFER, null), N.depthBuffer && (b.__webglDepthRenderbuffer = C.createRenderbuffer(), HA(b.__webglDepthRenderbuffer, N, true)), I.bindFramebuffer(C.FRAMEBUFFER, null);
            }
          }
          if (P) {
            I.bindTexture(C.TEXTURE_CUBE_MAP, W.__webglTexture), jA(C.TEXTURE_CUBE_MAP, l);
            for (let oA = 0; oA < 6; oA++) if (l.mipmaps && l.mipmaps.length > 0) for (let yA = 0; yA < l.mipmaps.length; yA++) cA(b.__webglFramebuffer[oA][yA], N, l, C.COLOR_ATTACHMENT0, C.TEXTURE_CUBE_MAP_POSITIVE_X + oA, yA);
            else cA(b.__webglFramebuffer[oA], N, l, C.COLOR_ATTACHMENT0, C.TEXTURE_CUBE_MAP_POSITIVE_X + oA, 0);
            h(l) && D(C.TEXTURE_CUBE_MAP), I.unbindTexture();
          } else if (UA) {
            for (let oA = 0, yA = AA.length; oA < yA; oA++) {
              const MA = AA[oA], QA = g.get(MA);
              let nA = C.TEXTURE_2D;
              (N.isWebGL3DRenderTarget || N.isWebGLArrayRenderTarget) && (nA = N.isWebGL3DRenderTarget ? C.TEXTURE_3D : C.TEXTURE_2D_ARRAY), I.bindTexture(nA, QA.__webglTexture), jA(nA, MA), cA(b.__webglFramebuffer, N, MA, C.COLOR_ATTACHMENT0 + oA, nA, 0), h(MA) && D(nA);
            }
            I.unbindTexture();
          } else {
            let oA = C.TEXTURE_2D;
            if ((N.isWebGL3DRenderTarget || N.isWebGLArrayRenderTarget) && (oA = N.isWebGL3DRenderTarget ? C.TEXTURE_3D : C.TEXTURE_2D_ARRAY), I.bindTexture(oA, W.__webglTexture), jA(oA, l), l.mipmaps && l.mipmaps.length > 0) for (let yA = 0; yA < l.mipmaps.length; yA++) cA(b.__webglFramebuffer[yA], N, l, C.COLOR_ATTACHMENT0, oA, yA);
            else cA(b.__webglFramebuffer, N, l, C.COLOR_ATTACHMENT0, oA, 0);
            h(l) && D(oA), I.unbindTexture();
          }
          N.depthBuffer && II(N);
        }
        function GI(N) {
          const l = N.textures;
          for (let b = 0, W = l.length; b < W; b++) {
            const AA = l[b];
            if (h(AA)) {
              const P = U(N), UA = g.get(AA).__webglTexture;
              I.bindTexture(P, UA), D(P), I.unbindTexture();
            }
          }
        }
        const OA = [], LA = [];
        function GA(N) {
          if (N.samples > 0) {
            if (kA(N) === false) {
              const l = N.textures, b = N.width, W = N.height;
              let AA = C.COLOR_BUFFER_BIT;
              const P = N.stencilBuffer ? C.DEPTH_STENCIL_ATTACHMENT : C.DEPTH_ATTACHMENT, UA = g.get(N), oA = l.length > 1;
              if (oA) for (let MA = 0; MA < l.length; MA++) I.bindFramebuffer(C.FRAMEBUFFER, UA.__webglMultisampledFramebuffer), C.framebufferRenderbuffer(C.FRAMEBUFFER, C.COLOR_ATTACHMENT0 + MA, C.RENDERBUFFER, null), I.bindFramebuffer(C.FRAMEBUFFER, UA.__webglFramebuffer), C.framebufferTexture2D(C.DRAW_FRAMEBUFFER, C.COLOR_ATTACHMENT0 + MA, C.TEXTURE_2D, null, 0);
              I.bindFramebuffer(C.READ_FRAMEBUFFER, UA.__webglMultisampledFramebuffer);
              const yA = N.texture.mipmaps;
              yA && yA.length > 0 ? I.bindFramebuffer(C.DRAW_FRAMEBUFFER, UA.__webglFramebuffer[0]) : I.bindFramebuffer(C.DRAW_FRAMEBUFFER, UA.__webglFramebuffer);
              for (let MA = 0; MA < l.length; MA++) {
                if (N.resolveDepthBuffer && (N.depthBuffer && (AA |= C.DEPTH_BUFFER_BIT), N.stencilBuffer && N.resolveStencilBuffer && (AA |= C.STENCIL_BUFFER_BIT)), oA) {
                  C.framebufferRenderbuffer(C.READ_FRAMEBUFFER, C.COLOR_ATTACHMENT0, C.RENDERBUFFER, UA.__webglColorRenderbuffer[MA]);
                  const QA = g.get(l[MA]).__webglTexture;
                  C.framebufferTexture2D(C.DRAW_FRAMEBUFFER, C.COLOR_ATTACHMENT0, C.TEXTURE_2D, QA, 0);
                }
                C.blitFramebuffer(0, 0, b, W, 0, 0, b, W, AA, C.NEAREST), o === true && (OA.length = 0, LA.length = 0, OA.push(C.COLOR_ATTACHMENT0 + MA), N.depthBuffer && N.resolveDepthBuffer === false && (OA.push(P), LA.push(P), C.invalidateFramebuffer(C.DRAW_FRAMEBUFFER, LA)), C.invalidateFramebuffer(C.READ_FRAMEBUFFER, OA));
              }
              if (I.bindFramebuffer(C.READ_FRAMEBUFFER, null), I.bindFramebuffer(C.DRAW_FRAMEBUFFER, null), oA) for (let MA = 0; MA < l.length; MA++) {
                I.bindFramebuffer(C.FRAMEBUFFER, UA.__webglMultisampledFramebuffer), C.framebufferRenderbuffer(C.FRAMEBUFFER, C.COLOR_ATTACHMENT0 + MA, C.RENDERBUFFER, UA.__webglColorRenderbuffer[MA]);
                const QA = g.get(l[MA]).__webglTexture;
                I.bindFramebuffer(C.FRAMEBUFFER, UA.__webglFramebuffer), C.framebufferTexture2D(C.DRAW_FRAMEBUFFER, C.COLOR_ATTACHMENT0 + MA, C.TEXTURE_2D, QA, 0);
              }
              I.bindFramebuffer(C.DRAW_FRAMEBUFFER, UA.__webglMultisampledFramebuffer);
            } else if (N.depthBuffer && N.resolveDepthBuffer === false && o) {
              const l = N.stencilBuffer ? C.DEPTH_STENCIL_ATTACHMENT : C.DEPTH_ATTACHMENT;
              C.invalidateFramebuffer(C.DRAW_FRAMEBUFFER, [
                l
              ]);
            }
          }
        }
        function kI(N) {
          return Math.min(B.maxSamples, N.samples);
        }
        function kA(N) {
          const l = g.get(N);
          return N.samples > 0 && A.has("WEBGL_multisampled_render_to_texture") === true && l.__useRenderToTexture !== false;
        }
        function vA(N) {
          const l = E.render.frame;
          e.get(N) !== l && (e.set(N, l), N.update());
        }
        function TI(N, l) {
          const b = N.colorSpace, W = N.format, AA = N.type;
          return N.isCompressedTexture === true || N.isVideoTexture === true || b !== Ag && b !== RC && (gI.getTransfer(b) === eI ? (W !== ag || AA !== jg) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", b)), l;
        }
        function JI(N) {
          return typeof HTMLImageElement < "u" && N instanceof HTMLImageElement ? (t.width = N.naturalWidth || N.width, t.height = N.naturalHeight || N.height) : typeof VideoFrame < "u" && N instanceof VideoFrame ? (t.width = N.displayWidth, t.height = N.displayHeight) : (t.width = N.width, t.height = N.height), t;
        }
        this.allocateTextureUnit = Z, this.resetTextureUnits = x, this.setTexture2D = z, this.setTexture2DArray = V, this.setTexture3D = iA, this.setTextureCube = v, this.rebindTextures = VI, this.setupRenderTarget = d, this.updateRenderTargetMipmap = GI, this.updateMultisampleRenderTarget = GA, this.setupDepthRenderbuffer = II, this.setupFrameBufferTexture = cA, this.useMultisampledRTT = kA;
      }
      function Nk(C, A) {
        function I(g, B = RC) {
          let Q;
          const E = gI.getTransfer(B);
          if (g === jg) return C.UNSIGNED_BYTE;
          if (g === Pt) return C.UNSIGNED_SHORT_4_4_4_4;
          if (g === Wt) return C.UNSIGNED_SHORT_5_5_5_1;
          if (g === yD) return C.UNSIGNED_INT_5_9_9_9_REV;
          if (g === MD) return C.UNSIGNED_INT_10F_11F_11F_REV;
          if (g === GD) return C.BYTE;
          if (g === kD) return C.SHORT;
          if (g === kQ) return C.UNSIGNED_SHORT;
          if (g === vt) return C.INT;
          if (g === IB) return C.UNSIGNED_INT;
          if (g === dg) return C.FLOAT;
          if (g === DC) return C.HALF_FLOAT;
          if (g === KD) return C.ALPHA;
          if (g === UD) return C.RGB;
          if (g === ag) return C.RGBA;
          if (g === MQ) return C.DEPTH_COMPONENT;
          if (g === KQ) return C.DEPTH_STENCIL;
          if (g === jt) return C.RED;
          if (g === Vt) return C.RED_INTEGER;
          if (g === ND) return C.RG;
          if (g === Xt) return C.RG_INTEGER;
          if (g === zt) return C.RGBA_INTEGER;
          if (g === FE || g === JE || g === RE || g === pE) if (E === eI) if (Q = A.get("WEBGL_compressed_texture_s3tc_srgb"), Q !== null) {
            if (g === FE) return Q.COMPRESSED_SRGB_S3TC_DXT1_EXT;
            if (g === JE) return Q.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
            if (g === RE) return Q.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
            if (g === pE) return Q.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
          } else return null;
          else if (Q = A.get("WEBGL_compressed_texture_s3tc"), Q !== null) {
            if (g === FE) return Q.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (g === JE) return Q.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (g === RE) return Q.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (g === pE) return Q.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          } else return null;
          if (g === fo || g === uo || g === Ho || g === mo) if (Q = A.get("WEBGL_compressed_texture_pvrtc"), Q !== null) {
            if (g === fo) return Q.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
            if (g === uo) return Q.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
            if (g === Ho) return Q.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
            if (g === mo) return Q.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
          } else return null;
          if (g === To || g === bo || g === xo) if (Q = A.get("WEBGL_compressed_texture_etc"), Q !== null) {
            if (g === To || g === bo) return E === eI ? Q.COMPRESSED_SRGB8_ETC2 : Q.COMPRESSED_RGB8_ETC2;
            if (g === xo) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : Q.COMPRESSED_RGBA8_ETC2_EAC;
          } else return null;
          if (g === Oo || g === _o || g === Zo || g === vo || g === Po || g === Wo || g === jo || g === Vo || g === Xo || g === zo || g === $o || g === At || g === It || g === gt) if (Q = A.get("WEBGL_compressed_texture_astc"), Q !== null) {
            if (g === Oo) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : Q.COMPRESSED_RGBA_ASTC_4x4_KHR;
            if (g === _o) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : Q.COMPRESSED_RGBA_ASTC_5x4_KHR;
            if (g === Zo) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : Q.COMPRESSED_RGBA_ASTC_5x5_KHR;
            if (g === vo) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : Q.COMPRESSED_RGBA_ASTC_6x5_KHR;
            if (g === Po) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : Q.COMPRESSED_RGBA_ASTC_6x6_KHR;
            if (g === Wo) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : Q.COMPRESSED_RGBA_ASTC_8x5_KHR;
            if (g === jo) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : Q.COMPRESSED_RGBA_ASTC_8x6_KHR;
            if (g === Vo) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : Q.COMPRESSED_RGBA_ASTC_8x8_KHR;
            if (g === Xo) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : Q.COMPRESSED_RGBA_ASTC_10x5_KHR;
            if (g === zo) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : Q.COMPRESSED_RGBA_ASTC_10x6_KHR;
            if (g === $o) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : Q.COMPRESSED_RGBA_ASTC_10x8_KHR;
            if (g === At) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : Q.COMPRESSED_RGBA_ASTC_10x10_KHR;
            if (g === It) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : Q.COMPRESSED_RGBA_ASTC_12x10_KHR;
            if (g === gt) return E === eI ? Q.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : Q.COMPRESSED_RGBA_ASTC_12x12_KHR;
          } else return null;
          if (g === Ct || g === Bt || g === Qt) if (Q = A.get("EXT_texture_compression_bptc"), Q !== null) {
            if (g === Ct) return E === eI ? Q.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : Q.COMPRESSED_RGBA_BPTC_UNORM_EXT;
            if (g === Bt) return Q.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
            if (g === Qt) return Q.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
          } else return null;
          if (g === Et || g === it || g === ot || g === tt) if (Q = A.get("EXT_texture_compression_rgtc"), Q !== null) {
            if (g === Et) return Q.COMPRESSED_RED_RGTC1_EXT;
            if (g === it) return Q.COMPRESSED_SIGNED_RED_RGTC1_EXT;
            if (g === ot) return Q.COMPRESSED_RED_GREEN_RGTC2_EXT;
            if (g === tt) return Q.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
          } else return null;
          return g === yQ ? C.UNSIGNED_INT_24_8 : C[g] !== void 0 ? C[g] : null;
        }
        return {
          convert: I
        };
      }
      const Fk = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`, Jk = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
      class Rk {
        constructor() {
          this.texture = null, this.mesh = null, this.depthNear = 0, this.depthFar = 0;
        }
        init(A, I) {
          if (this.texture === null) {
            const g = new _D(A.texture);
            (A.depthNear !== I.depthNear || A.depthFar !== I.depthFar) && (this.depthNear = A.depthNear, this.depthFar = A.depthFar), this.texture = g;
          }
        }
        getMesh(A) {
          if (this.texture !== null && this.mesh === null) {
            const I = A.cameras[0].viewport, g = new YC({
              vertexShader: Fk,
              fragmentShader: Jk,
              uniforms: {
                depthColor: {
                  value: this.texture
                },
                depthWidth: {
                  value: I.z
                },
                depthHeight: {
                  value: I.w
                }
              }
            });
            this.mesh = new ig(new zE(20, 20), g);
          }
          return this.mesh;
        }
        reset() {
          this.texture = null, this.mesh = null;
        }
        getDepthTexture() {
          return this.texture;
        }
      }
      class pk extends PB {
        constructor(A, I) {
          super();
          const g = this;
          let B = null, Q = 1, E = null, i = "local-floor", o = 1, t = null, e = null, s = null, a = null, r = null, c = null;
          const S = typeof XRWebGLBinding < "u", h = new Rk(), D = {}, U = I.getContextAttributes();
          let M = null, k = null;
          const p = [], R = [], Y = new XA();
          let m = null;
          const K = new Qg();
          K.viewport = new BI();
          const y = new Qg();
          y.viewport = new BI();
          const q = [
            K,
            y
          ], x = new bw();
          let Z = null, j = null;
          this.cameraAutoUpdate = true, this.enabled = false, this.isPresenting = false, this.getController = function(X) {
            let IA = p[X];
            return IA === void 0 && (IA = new Hi(), p[X] = IA), IA.getTargetRaySpace();
          }, this.getControllerGrip = function(X) {
            let IA = p[X];
            return IA === void 0 && (IA = new Hi(), p[X] = IA), IA.getGripSpace();
          }, this.getHand = function(X) {
            let IA = p[X];
            return IA === void 0 && (IA = new Hi(), p[X] = IA), IA.getHandSpace();
          };
          function z(X) {
            const IA = R.indexOf(X.inputSource);
            if (IA === -1) return;
            const cA = p[IA];
            cA !== void 0 && (cA.update(X.inputSource, X.frame, t || E), cA.dispatchEvent({
              type: X.type,
              data: X.inputSource
            }));
          }
          function V() {
            B.removeEventListener("select", z), B.removeEventListener("selectstart", z), B.removeEventListener("selectend", z), B.removeEventListener("squeeze", z), B.removeEventListener("squeezestart", z), B.removeEventListener("squeezeend", z), B.removeEventListener("end", V), B.removeEventListener("inputsourceschange", iA);
            for (let X = 0; X < p.length; X++) {
              const IA = R[X];
              IA !== null && (R[X] = null, p[X].disconnect(IA));
            }
            Z = null, j = null, h.reset();
            for (const X in D) delete D[X];
            A.setRenderTarget(M), r = null, a = null, s = null, B = null, k = null, QI.stop(), g.isPresenting = false, A.setPixelRatio(m), A.setSize(Y.width, Y.height, false), g.dispatchEvent({
              type: "sessionend"
            });
          }
          this.setFramebufferScaleFactor = function(X) {
            Q = X, g.isPresenting === true && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
          }, this.setReferenceSpaceType = function(X) {
            i = X, g.isPresenting === true && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
          }, this.getReferenceSpace = function() {
            return t || E;
          }, this.setReferenceSpace = function(X) {
            t = X;
          }, this.getBaseLayer = function() {
            return a !== null ? a : r;
          }, this.getBinding = function() {
            return s === null && S && (s = new XRWebGLBinding(B, I)), s;
          }, this.getFrame = function() {
            return c;
          }, this.getSession = function() {
            return B;
          }, this.setSession = async function(X) {
            if (B = X, B !== null) {
              if (M = A.getRenderTarget(), B.addEventListener("select", z), B.addEventListener("selectstart", z), B.addEventListener("selectend", z), B.addEventListener("squeeze", z), B.addEventListener("squeezestart", z), B.addEventListener("squeezeend", z), B.addEventListener("end", V), B.addEventListener("inputsourceschange", iA), U.xrCompatible !== true && await I.makeXRCompatible(), m = A.getPixelRatio(), A.getSize(Y), S && "createProjectionLayer" in XRWebGLBinding.prototype) {
                let cA = null, HA = null, NA = null;
                U.depth && (NA = U.stencil ? I.DEPTH24_STENCIL8 : I.DEPTH_COMPONENT24, cA = U.stencil ? KQ : MQ, HA = U.stencil ? yQ : IB);
                const II = {
                  colorFormat: I.RGBA8,
                  depthFormat: NA,
                  scaleFactor: Q
                };
                s = this.getBinding(), a = s.createProjectionLayer(II), B.updateRenderState({
                  layers: [
                    a
                  ]
                }), A.setPixelRatio(1), A.setSize(a.textureWidth, a.textureHeight, false), k = new gB(a.textureWidth, a.textureHeight, {
                  format: ag,
                  type: jg,
                  depthTexture: new OD(a.textureWidth, a.textureHeight, HA, void 0, void 0, void 0, void 0, void 0, void 0, cA),
                  stencilBuffer: U.stencil,
                  colorSpace: A.outputColorSpace,
                  samples: U.antialias ? 4 : 0,
                  resolveDepthBuffer: a.ignoreDepthValues === false,
                  resolveStencilBuffer: a.ignoreDepthValues === false
                });
              } else {
                const cA = {
                  antialias: U.antialias,
                  alpha: true,
                  depth: U.depth,
                  stencil: U.stencil,
                  framebufferScaleFactor: Q
                };
                r = new XRWebGLLayer(B, I, cA), B.updateRenderState({
                  baseLayer: r
                }), A.setPixelRatio(1), A.setSize(r.framebufferWidth, r.framebufferHeight, false), k = new gB(r.framebufferWidth, r.framebufferHeight, {
                  format: ag,
                  type: jg,
                  colorSpace: A.outputColorSpace,
                  stencilBuffer: U.stencil,
                  resolveDepthBuffer: r.ignoreDepthValues === false,
                  resolveStencilBuffer: r.ignoreDepthValues === false
                });
              }
              k.isXRRenderTarget = true, this.setFoveation(o), t = null, E = await B.requestReferenceSpace(i), QI.setContext(B), QI.start(), g.isPresenting = true, g.dispatchEvent({
                type: "sessionstart"
              });
            }
          }, this.getEnvironmentBlendMode = function() {
            if (B !== null) return B.environmentBlendMode;
          }, this.getDepthTexture = function() {
            return h.getDepthTexture();
          };
          function iA(X) {
            for (let IA = 0; IA < X.removed.length; IA++) {
              const cA = X.removed[IA], HA = R.indexOf(cA);
              HA >= 0 && (R[HA] = null, p[HA].disconnect(cA));
            }
            for (let IA = 0; IA < X.added.length; IA++) {
              const cA = X.added[IA];
              let HA = R.indexOf(cA);
              if (HA === -1) {
                for (let II = 0; II < p.length; II++) if (II >= R.length) {
                  R.push(cA), HA = II;
                  break;
                } else if (R[II] === null) {
                  R[II] = cA, HA = II;
                  break;
                }
                if (HA === -1) break;
              }
              const NA = p[HA];
              NA && NA.connect(cA);
            }
          }
          const v = new J(), sA = new J();
          function rA(X, IA, cA) {
            v.setFromMatrixPosition(IA.matrixWorld), sA.setFromMatrixPosition(cA.matrixWorld);
            const HA = v.distanceTo(sA), NA = IA.projectionMatrix.elements, II = cA.projectionMatrix.elements, VI = NA[14] / (NA[10] - 1), d = NA[14] / (NA[10] + 1), GI = (NA[9] + 1) / NA[5], OA = (NA[9] - 1) / NA[5], LA = (NA[8] - 1) / NA[0], GA = (II[8] + 1) / II[0], kI = VI * LA, kA = VI * GA, vA = HA / (-LA + GA), TI = vA * -LA;
            if (IA.matrixWorld.decompose(X.position, X.quaternion, X.scale), X.translateX(TI), X.translateZ(vA), X.matrixWorld.compose(X.position, X.quaternion, X.scale), X.matrixWorldInverse.copy(X.matrixWorld).invert(), NA[10] === -1) X.projectionMatrix.copy(IA.projectionMatrix), X.projectionMatrixInverse.copy(IA.projectionMatrixInverse);
            else {
              const JI = VI + vA, N = d + vA, l = kI - TI, b = kA + (HA - TI), W = GI * d / N * JI, AA = OA * d / N * JI;
              X.projectionMatrix.makePerspective(l, b, W, AA, JI, N), X.projectionMatrixInverse.copy(X.projectionMatrix).invert();
            }
          }
          function JA(X, IA) {
            IA === null ? X.matrixWorld.copy(X.matrix) : X.matrixWorld.multiplyMatrices(IA.matrixWorld, X.matrix), X.matrixWorldInverse.copy(X.matrixWorld).invert();
          }
          this.updateCamera = function(X) {
            if (B === null) return;
            let IA = X.near, cA = X.far;
            h.texture !== null && (h.depthNear > 0 && (IA = h.depthNear), h.depthFar > 0 && (cA = h.depthFar)), x.near = y.near = K.near = IA, x.far = y.far = K.far = cA, (Z !== x.near || j !== x.far) && (B.updateRenderState({
              depthNear: x.near,
              depthFar: x.far
            }), Z = x.near, j = x.far), x.layers.mask = X.layers.mask | 6, K.layers.mask = x.layers.mask & 3, y.layers.mask = x.layers.mask & 5;
            const HA = X.parent, NA = x.cameras;
            JA(x, HA);
            for (let II = 0; II < NA.length; II++) JA(NA[II], HA);
            NA.length === 2 ? rA(x, K, y) : x.projectionMatrix.copy(K.projectionMatrix), jA(X, x, HA);
          };
          function jA(X, IA, cA) {
            cA === null ? X.matrix.copy(IA.matrixWorld) : (X.matrix.copy(cA.matrixWorld), X.matrix.invert(), X.matrix.multiply(IA.matrixWorld)), X.matrix.decompose(X.position, X.quaternion, X.scale), X.updateMatrixWorld(true), X.projectionMatrix.copy(IA.projectionMatrix), X.projectionMatrixInverse.copy(IA.projectionMatrixInverse), X.isPerspectiveCamera && (X.fov = HB * 2 * Math.atan(1 / X.projectionMatrix.elements[5]), X.zoom = 1);
          }
          this.getCamera = function() {
            return x;
          }, this.getFoveation = function() {
            if (!(a === null && r === null)) return o;
          }, this.setFoveation = function(X) {
            o = X, a !== null && (a.fixedFoveation = X), r !== null && r.fixedFoveation !== void 0 && (r.fixedFoveation = X);
          }, this.hasDepthSensing = function() {
            return h.texture !== null;
          }, this.getDepthSensingMesh = function() {
            return h.getMesh(x);
          }, this.getCameraTexture = function(X) {
            return D[X];
          };
          let nI = null;
          function lI(X, IA) {
            if (e = IA.getViewerPose(t || E), c = IA, e !== null) {
              const cA = e.views;
              r !== null && (A.setRenderTargetFramebuffer(k, r.framebuffer), A.setRenderTarget(k));
              let HA = false;
              cA.length !== x.cameras.length && (x.cameras.length = 0, HA = true);
              for (let d = 0; d < cA.length; d++) {
                const GI = cA[d];
                let OA = null;
                if (r !== null) OA = r.getViewport(GI);
                else {
                  const GA = s.getViewSubImage(a, GI);
                  OA = GA.viewport, d === 0 && (A.setRenderTargetTextures(k, GA.colorTexture, GA.depthStencilTexture), A.setRenderTarget(k));
                }
                let LA = q[d];
                LA === void 0 && (LA = new Qg(), LA.layers.enable(d), LA.viewport = new BI(), q[d] = LA), LA.matrix.fromArray(GI.transform.matrix), LA.matrix.decompose(LA.position, LA.quaternion, LA.scale), LA.projectionMatrix.fromArray(GI.projectionMatrix), LA.projectionMatrixInverse.copy(LA.projectionMatrix).invert(), LA.viewport.set(OA.x, OA.y, OA.width, OA.height), d === 0 && (x.matrix.copy(LA.matrix), x.matrix.decompose(x.position, x.quaternion, x.scale)), HA === true && x.cameras.push(LA);
              }
              const NA = B.enabledFeatures;
              if (NA && NA.includes("depth-sensing") && B.depthUsage == "gpu-optimized" && S) {
                s = g.getBinding();
                const d = s.getDepthInformation(cA[0]);
                d && d.isValid && d.texture && h.init(d, B.renderState);
              }
              if (NA && NA.includes("camera-access") && S) {
                A.state.unbindTexture(), s = g.getBinding();
                for (let d = 0; d < cA.length; d++) {
                  const GI = cA[d].camera;
                  if (GI) {
                    let OA = D[GI];
                    OA || (OA = new _D(), D[GI] = OA);
                    const LA = s.getCameraImage(GI);
                    OA.sourceTexture = LA;
                  }
                }
              }
            }
            for (let cA = 0; cA < p.length; cA++) {
              const HA = R[cA], NA = p[cA];
              HA !== null && NA !== void 0 && NA.update(HA, IA, t || E);
            }
            nI && nI(X, IA), IA.detectedPlanes && g.dispatchEvent({
              type: "planesdetected",
              data: IA
            }), c = null;
          }
          const QI = new jD();
          QI.setAnimationLoop(lI), this.setAnimationLoop = function(X) {
            nI = X;
          }, this.dispose = function() {
          };
        }
      }
      const OC = new pI(), dk = new uA();
      function Yk(C, A) {
        function I(h, D) {
          h.matrixAutoUpdate === true && h.updateMatrix(), D.value.copy(h.matrix);
        }
        function g(h, D) {
          D.color.getRGB(h.fogColor.value, uD(C)), D.isFog ? (h.fogNear.value = D.near, h.fogFar.value = D.far) : D.isFogExp2 && (h.fogDensity.value = D.density);
        }
        function B(h, D, U, M, k) {
          D.isMeshBasicMaterial || D.isMeshLambertMaterial ? Q(h, D) : D.isMeshToonMaterial ? (Q(h, D), s(h, D)) : D.isMeshPhongMaterial ? (Q(h, D), e(h, D)) : D.isMeshStandardMaterial ? (Q(h, D), a(h, D), D.isMeshPhysicalMaterial && r(h, D, k)) : D.isMeshMatcapMaterial ? (Q(h, D), c(h, D)) : D.isMeshDepthMaterial ? Q(h, D) : D.isMeshDistanceMaterial ? (Q(h, D), S(h, D)) : D.isMeshNormalMaterial ? Q(h, D) : D.isLineBasicMaterial ? (E(h, D), D.isLineDashedMaterial && i(h, D)) : D.isPointsMaterial ? o(h, D, U, M) : D.isSpriteMaterial ? t(h, D) : D.isShadowMaterial ? (h.color.value.copy(D.color), h.opacity.value = D.opacity) : D.isShaderMaterial && (D.uniformsNeedUpdate = false);
        }
        function Q(h, D) {
          h.opacity.value = D.opacity, D.color && h.diffuse.value.copy(D.color), D.emissive && h.emissive.value.copy(D.emissive).multiplyScalar(D.emissiveIntensity), D.map && (h.map.value = D.map, I(D.map, h.mapTransform)), D.alphaMap && (h.alphaMap.value = D.alphaMap, I(D.alphaMap, h.alphaMapTransform)), D.bumpMap && (h.bumpMap.value = D.bumpMap, I(D.bumpMap, h.bumpMapTransform), h.bumpScale.value = D.bumpScale, D.side === Dg && (h.bumpScale.value *= -1)), D.normalMap && (h.normalMap.value = D.normalMap, I(D.normalMap, h.normalMapTransform), h.normalScale.value.copy(D.normalScale), D.side === Dg && h.normalScale.value.negate()), D.displacementMap && (h.displacementMap.value = D.displacementMap, I(D.displacementMap, h.displacementMapTransform), h.displacementScale.value = D.displacementScale, h.displacementBias.value = D.displacementBias), D.emissiveMap && (h.emissiveMap.value = D.emissiveMap, I(D.emissiveMap, h.emissiveMapTransform)), D.specularMap && (h.specularMap.value = D.specularMap, I(D.specularMap, h.specularMapTransform)), D.alphaTest > 0 && (h.alphaTest.value = D.alphaTest);
          const U = A.get(D), M = U.envMap, k = U.envMapRotation;
          M && (h.envMap.value = M, OC.copy(k), OC.x *= -1, OC.y *= -1, OC.z *= -1, M.isCubeTexture && M.isRenderTargetTexture === false && (OC.y *= -1, OC.z *= -1), h.envMapRotation.value.setFromMatrix4(dk.makeRotationFromEuler(OC)), h.flipEnvMap.value = M.isCubeTexture && M.isRenderTargetTexture === false ? -1 : 1, h.reflectivity.value = D.reflectivity, h.ior.value = D.ior, h.refractionRatio.value = D.refractionRatio), D.lightMap && (h.lightMap.value = D.lightMap, h.lightMapIntensity.value = D.lightMapIntensity, I(D.lightMap, h.lightMapTransform)), D.aoMap && (h.aoMap.value = D.aoMap, h.aoMapIntensity.value = D.aoMapIntensity, I(D.aoMap, h.aoMapTransform));
        }
        function E(h, D) {
          h.diffuse.value.copy(D.color), h.opacity.value = D.opacity, D.map && (h.map.value = D.map, I(D.map, h.mapTransform));
        }
        function i(h, D) {
          h.dashSize.value = D.dashSize, h.totalSize.value = D.dashSize + D.gapSize, h.scale.value = D.scale;
        }
        function o(h, D, U, M) {
          h.diffuse.value.copy(D.color), h.opacity.value = D.opacity, h.size.value = D.size * U, h.scale.value = M * 0.5, D.map && (h.map.value = D.map, I(D.map, h.uvTransform)), D.alphaMap && (h.alphaMap.value = D.alphaMap, I(D.alphaMap, h.alphaMapTransform)), D.alphaTest > 0 && (h.alphaTest.value = D.alphaTest);
        }
        function t(h, D) {
          h.diffuse.value.copy(D.color), h.opacity.value = D.opacity, h.rotation.value = D.rotation, D.map && (h.map.value = D.map, I(D.map, h.mapTransform)), D.alphaMap && (h.alphaMap.value = D.alphaMap, I(D.alphaMap, h.alphaMapTransform)), D.alphaTest > 0 && (h.alphaTest.value = D.alphaTest);
        }
        function e(h, D) {
          h.specular.value.copy(D.specular), h.shininess.value = Math.max(D.shininess, 1e-4);
        }
        function s(h, D) {
          D.gradientMap && (h.gradientMap.value = D.gradientMap);
        }
        function a(h, D) {
          h.metalness.value = D.metalness, D.metalnessMap && (h.metalnessMap.value = D.metalnessMap, I(D.metalnessMap, h.metalnessMapTransform)), h.roughness.value = D.roughness, D.roughnessMap && (h.roughnessMap.value = D.roughnessMap, I(D.roughnessMap, h.roughnessMapTransform)), D.envMap && (h.envMapIntensity.value = D.envMapIntensity);
        }
        function r(h, D, U) {
          h.ior.value = D.ior, D.sheen > 0 && (h.sheenColor.value.copy(D.sheenColor).multiplyScalar(D.sheen), h.sheenRoughness.value = D.sheenRoughness, D.sheenColorMap && (h.sheenColorMap.value = D.sheenColorMap, I(D.sheenColorMap, h.sheenColorMapTransform)), D.sheenRoughnessMap && (h.sheenRoughnessMap.value = D.sheenRoughnessMap, I(D.sheenRoughnessMap, h.sheenRoughnessMapTransform))), D.clearcoat > 0 && (h.clearcoat.value = D.clearcoat, h.clearcoatRoughness.value = D.clearcoatRoughness, D.clearcoatMap && (h.clearcoatMap.value = D.clearcoatMap, I(D.clearcoatMap, h.clearcoatMapTransform)), D.clearcoatRoughnessMap && (h.clearcoatRoughnessMap.value = D.clearcoatRoughnessMap, I(D.clearcoatRoughnessMap, h.clearcoatRoughnessMapTransform)), D.clearcoatNormalMap && (h.clearcoatNormalMap.value = D.clearcoatNormalMap, I(D.clearcoatNormalMap, h.clearcoatNormalMapTransform), h.clearcoatNormalScale.value.copy(D.clearcoatNormalScale), D.side === Dg && h.clearcoatNormalScale.value.negate())), D.dispersion > 0 && (h.dispersion.value = D.dispersion), D.iridescence > 0 && (h.iridescence.value = D.iridescence, h.iridescenceIOR.value = D.iridescenceIOR, h.iridescenceThicknessMinimum.value = D.iridescenceThicknessRange[0], h.iridescenceThicknessMaximum.value = D.iridescenceThicknessRange[1], D.iridescenceMap && (h.iridescenceMap.value = D.iridescenceMap, I(D.iridescenceMap, h.iridescenceMapTransform)), D.iridescenceThicknessMap && (h.iridescenceThicknessMap.value = D.iridescenceThicknessMap, I(D.iridescenceThicknessMap, h.iridescenceThicknessMapTransform))), D.transmission > 0 && (h.transmission.value = D.transmission, h.transmissionSamplerMap.value = U.texture, h.transmissionSamplerSize.value.set(U.width, U.height), D.transmissionMap && (h.transmissionMap.value = D.transmissionMap, I(D.transmissionMap, h.transmissionMapTransform)), h.thickness.value = D.thickness, D.thicknessMap && (h.thicknessMap.value = D.thicknessMap, I(D.thicknessMap, h.thicknessMapTransform)), h.attenuationDistance.value = D.attenuationDistance, h.attenuationColor.value.copy(D.attenuationColor)), D.anisotropy > 0 && (h.anisotropyVector.value.set(D.anisotropy * Math.cos(D.anisotropyRotation), D.anisotropy * Math.sin(D.anisotropyRotation)), D.anisotropyMap && (h.anisotropyMap.value = D.anisotropyMap, I(D.anisotropyMap, h.anisotropyMapTransform))), h.specularIntensity.value = D.specularIntensity, h.specularColor.value.copy(D.specularColor), D.specularColorMap && (h.specularColorMap.value = D.specularColorMap, I(D.specularColorMap, h.specularColorMapTransform)), D.specularIntensityMap && (h.specularIntensityMap.value = D.specularIntensityMap, I(D.specularIntensityMap, h.specularIntensityMapTransform));
        }
        function c(h, D) {
          D.matcap && (h.matcap.value = D.matcap);
        }
        function S(h, D) {
          const U = A.get(D).light;
          h.referencePosition.value.setFromMatrixPosition(U.matrixWorld), h.nearDistance.value = U.shadow.camera.near, h.farDistance.value = U.shadow.camera.far;
        }
        return {
          refreshFogUniforms: g,
          refreshMaterialUniforms: B
        };
      }
      function qk(C, A, I, g) {
        let B = {}, Q = {}, E = [];
        const i = C.getParameter(C.MAX_UNIFORM_BUFFER_BINDINGS);
        function o(U, M) {
          const k = M.program;
          g.uniformBlockBinding(U, k);
        }
        function t(U, M) {
          let k = B[U.id];
          k === void 0 && (c(U), k = e(U), B[U.id] = k, U.addEventListener("dispose", h));
          const p = M.program;
          g.updateUBOMapping(U, p);
          const R = A.render.frame;
          Q[U.id] !== R && (a(U), Q[U.id] = R);
        }
        function e(U) {
          const M = s();
          U.__bindingPointIndex = M;
          const k = C.createBuffer(), p = U.__size, R = U.usage;
          return C.bindBuffer(C.UNIFORM_BUFFER, k), C.bufferData(C.UNIFORM_BUFFER, p, R), C.bindBuffer(C.UNIFORM_BUFFER, null), C.bindBufferBase(C.UNIFORM_BUFFER, M, k), k;
        }
        function s() {
          for (let U = 0; U < i; U++) if (E.indexOf(U) === -1) return E.push(U), U;
          return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
        }
        function a(U) {
          const M = B[U.id], k = U.uniforms, p = U.__cache;
          C.bindBuffer(C.UNIFORM_BUFFER, M);
          for (let R = 0, Y = k.length; R < Y; R++) {
            const m = Array.isArray(k[R]) ? k[R] : [
              k[R]
            ];
            for (let K = 0, y = m.length; K < y; K++) {
              const q = m[K];
              if (r(q, R, K, p) === true) {
                const x = q.__offset, Z = Array.isArray(q.value) ? q.value : [
                  q.value
                ];
                let j = 0;
                for (let z = 0; z < Z.length; z++) {
                  const V = Z[z], iA = S(V);
                  typeof V == "number" || typeof V == "boolean" ? (q.__data[0] = V, C.bufferSubData(C.UNIFORM_BUFFER, x + j, q.__data)) : V.isMatrix3 ? (q.__data[0] = V.elements[0], q.__data[1] = V.elements[1], q.__data[2] = V.elements[2], q.__data[3] = 0, q.__data[4] = V.elements[3], q.__data[5] = V.elements[4], q.__data[6] = V.elements[5], q.__data[7] = 0, q.__data[8] = V.elements[6], q.__data[9] = V.elements[7], q.__data[10] = V.elements[8], q.__data[11] = 0) : (V.toArray(q.__data, j), j += iA.storage / Float32Array.BYTES_PER_ELEMENT);
                }
                C.bufferSubData(C.UNIFORM_BUFFER, x, q.__data);
              }
            }
          }
          C.bindBuffer(C.UNIFORM_BUFFER, null);
        }
        function r(U, M, k, p) {
          const R = U.value, Y = M + "_" + k;
          if (p[Y] === void 0) return typeof R == "number" || typeof R == "boolean" ? p[Y] = R : p[Y] = R.clone(), true;
          {
            const m = p[Y];
            if (typeof R == "number" || typeof R == "boolean") {
              if (m !== R) return p[Y] = R, true;
            } else if (m.equals(R) === false) return m.copy(R), true;
          }
          return false;
        }
        function c(U) {
          const M = U.uniforms;
          let k = 0;
          const p = 16;
          for (let Y = 0, m = M.length; Y < m; Y++) {
            const K = Array.isArray(M[Y]) ? M[Y] : [
              M[Y]
            ];
            for (let y = 0, q = K.length; y < q; y++) {
              const x = K[y], Z = Array.isArray(x.value) ? x.value : [
                x.value
              ];
              for (let j = 0, z = Z.length; j < z; j++) {
                const V = Z[j], iA = S(V), v = k % p, sA = v % iA.boundary, rA = v + sA;
                k += sA, rA !== 0 && p - rA < iA.storage && (k += p - rA), x.__data = new Float32Array(iA.storage / Float32Array.BYTES_PER_ELEMENT), x.__offset = k, k += iA.storage;
              }
            }
          }
          const R = k % p;
          return R > 0 && (k += p - R), U.__size = k, U.__cache = {}, this;
        }
        function S(U) {
          const M = {
            boundary: 0,
            storage: 0
          };
          return typeof U == "number" || typeof U == "boolean" ? (M.boundary = 4, M.storage = 4) : U.isVector2 ? (M.boundary = 8, M.storage = 8) : U.isVector3 || U.isColor ? (M.boundary = 16, M.storage = 12) : U.isVector4 ? (M.boundary = 16, M.storage = 16) : U.isMatrix3 ? (M.boundary = 48, M.storage = 48) : U.isMatrix4 ? (M.boundary = 64, M.storage = 64) : U.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", U), M;
        }
        function h(U) {
          const M = U.target;
          M.removeEventListener("dispose", h);
          const k = E.indexOf(M.__bindingPointIndex);
          E.splice(k, 1), C.deleteBuffer(B[M.id]), delete B[M.id], delete Q[M.id];
        }
        function D() {
          for (const U in B) C.deleteBuffer(B[U]);
          E = [], B = {}, Q = {};
        }
        return {
          bind: o,
          update: t,
          dispose: D
        };
      }
      class Lk {
        constructor(A = {}) {
          const { canvas: I = ph(), context: g = null, depth: B = true, stencil: Q = false, alpha: E = false, antialias: i = false, premultipliedAlpha: o = true, preserveDrawingBuffer: t = false, powerPreference: e = "default", failIfMajorPerformanceCaveat: s = false, reversedDepthBuffer: a = false } = A;
          this.isWebGLRenderer = true;
          let r;
          if (g !== null) {
            if (typeof WebGLRenderingContext < "u" && g instanceof WebGLRenderingContext) throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
            r = g.getContextAttributes().alpha;
          } else r = E;
          const c = new Uint32Array(4), S = new Int32Array(4);
          let h = null, D = null;
          const U = [], M = [];
          this.domElement = I, this.debug = {
            checkShaderErrors: true,
            onShaderError: null
          }, this.autoClear = true, this.autoClearColor = true, this.autoClearDepth = true, this.autoClearStencil = true, this.sortObjects = true, this.clippingPlanes = [], this.localClippingEnabled = false, this.toneMapping = dC, this.toneMappingExposure = 1, this.transmissionResolutionScale = 1;
          const k = this;
          let p = false;
          this._outputColorSpace = PI;
          let R = 0, Y = 0, m = null, K = -1, y = null;
          const q = new BI(), x = new BI();
          let Z = null;
          const j = new mA(0);
          let z = 0, V = I.width, iA = I.height, v = 1, sA = null, rA = null;
          const JA = new BI(0, 0, V, iA), jA = new BI(0, 0, V, iA);
          let nI = false;
          const lI = new Qe();
          let QI = false, X = false;
          const IA = new uA(), cA = new J(), HA = new BI(), NA = {
            background: null,
            fog: null,
            environment: null,
            overrideMaterial: null,
            isScene: true
          };
          let II = false;
          function VI() {
            return m === null ? v : 1;
          }
          let d = g;
          function GI(G, H) {
            return I.getContext(G, H);
          }
          try {
            const G = {
              alpha: true,
              depth: B,
              stencil: Q,
              antialias: i,
              premultipliedAlpha: o,
              preserveDrawingBuffer: t,
              powerPreference: e,
              failIfMajorPerformanceCaveat: s
            };
            if ("setAttribute" in I && I.setAttribute("data-engine", `three.js r${_t}`), I.addEventListener("webglcontextlost", tA, false), I.addEventListener("webglcontextrestored", wA, false), I.addEventListener("webglcontextcreationerror", CA, false), d === null) {
              const H = "webgl2";
              if (d = GI(H, G), d === null) throw GI(H) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
            }
          } catch (G) {
            throw console.error("THREE.WebGLRenderer: " + G.message), G;
          }
          let OA, LA, GA, kI, kA, vA, TI, JI, N, l, b, W, AA, P, UA, oA, yA, MA, QA, nA, qA, KA, aA, _A;
          function u() {
            OA = new Zl(d), OA.init(), KA = new Nk(d, OA), LA = new Hl(d, OA, A, KA), GA = new Kk(d, OA), LA.reversedDepthBuffer && a && GA.buffers.depth.setReversed(true), kI = new Wl(d), kA = new ak(), vA = new Uk(d, OA, GA, kA, LA, KA, kI), TI = new Tl(k), JI = new _l(k), N = new Ac(d), aA = new fl(d, N), l = new vl(d, N, kI, aA), b = new Vl(d, l, N, kI), QA = new jl(d, LA, vA), oA = new ml(kA), W = new sk(k, TI, JI, OA, LA, aA, oA), AA = new Yk(k, kA), P = new nk(), UA = new lk(OA), MA = new Ll(k, TI, JI, GA, b, r, o), yA = new yk(k, b, LA), _A = new qk(d, kI, LA, GA), nA = new ul(d, OA, kI), qA = new Pl(d, OA, kI), kI.programs = W.programs, k.capabilities = LA, k.extensions = OA, k.properties = kA, k.renderLists = P, k.shadowMap = yA, k.state = GA, k.info = kI;
          }
          u();
          const EA = new pk(k, d);
          this.xr = EA, this.getContext = function() {
            return d;
          }, this.getContextAttributes = function() {
            return d.getContextAttributes();
          }, this.forceContextLoss = function() {
            const G = OA.get("WEBGL_lose_context");
            G && G.loseContext();
          }, this.forceContextRestore = function() {
            const G = OA.get("WEBGL_lose_context");
            G && G.restoreContext();
          }, this.getPixelRatio = function() {
            return v;
          }, this.setPixelRatio = function(G) {
            G !== void 0 && (v = G, this.setSize(V, iA, false));
          }, this.getSize = function(G) {
            return G.set(V, iA);
          }, this.setSize = function(G, H, O = true) {
            if (EA.isPresenting) {
              console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
              return;
            }
            V = G, iA = H, I.width = Math.floor(G * v), I.height = Math.floor(H * v), O === true && (I.style.width = G + "px", I.style.height = H + "px"), this.setViewport(0, 0, G, H);
          }, this.getDrawingBufferSize = function(G) {
            return G.set(V * v, iA * v).floor();
          }, this.setDrawingBufferSize = function(G, H, O) {
            V = G, iA = H, v = O, I.width = Math.floor(G * O), I.height = Math.floor(H * O), this.setViewport(0, 0, G, H);
          }, this.getCurrentViewport = function(G) {
            return G.copy(q);
          }, this.getViewport = function(G) {
            return G.copy(JA);
          }, this.setViewport = function(G, H, O, _) {
            G.isVector4 ? JA.set(G.x, G.y, G.z, G.w) : JA.set(G, H, O, _), GA.viewport(q.copy(JA).multiplyScalar(v).round());
          }, this.getScissor = function(G) {
            return G.copy(jA);
          }, this.setScissor = function(G, H, O, _) {
            G.isVector4 ? jA.set(G.x, G.y, G.z, G.w) : jA.set(G, H, O, _), GA.scissor(x.copy(jA).multiplyScalar(v).round());
          }, this.getScissorTest = function() {
            return nI;
          }, this.setScissorTest = function(G) {
            GA.setScissorTest(nI = G);
          }, this.setOpaqueSort = function(G) {
            sA = G;
          }, this.setTransparentSort = function(G) {
            rA = G;
          }, this.getClearColor = function(G) {
            return G.copy(MA.getClearColor());
          }, this.setClearColor = function() {
            MA.setClearColor(...arguments);
          }, this.getClearAlpha = function() {
            return MA.getClearAlpha();
          }, this.setClearAlpha = function() {
            MA.setClearAlpha(...arguments);
          }, this.clear = function(G = true, H = true, O = true) {
            let _ = 0;
            if (G) {
              let T = false;
              if (m !== null) {
                const BA = m.texture.format;
                T = BA === zt || BA === Xt || BA === Vt;
              }
              if (T) {
                const BA = m.texture.type, DA = BA === jg || BA === IB || BA === kQ || BA === yQ || BA === Pt || BA === Wt, SA = MA.getClearColor(), hA = MA.getClearAlpha(), YA = SA.r, fA = SA.g, pA = SA.b;
                DA ? (c[0] = YA, c[1] = fA, c[2] = pA, c[3] = hA, d.clearBufferuiv(d.COLOR, 0, c)) : (S[0] = YA, S[1] = fA, S[2] = pA, S[3] = hA, d.clearBufferiv(d.COLOR, 0, S));
              } else _ |= d.COLOR_BUFFER_BIT;
            }
            H && (_ |= d.DEPTH_BUFFER_BIT), O && (_ |= d.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), d.clear(_);
          }, this.clearColor = function() {
            this.clear(true, false, false);
          }, this.clearDepth = function() {
            this.clear(false, true, false);
          }, this.clearStencil = function() {
            this.clear(false, false, true);
          }, this.dispose = function() {
            I.removeEventListener("webglcontextlost", tA, false), I.removeEventListener("webglcontextrestored", wA, false), I.removeEventListener("webglcontextcreationerror", CA, false), MA.dispose(), P.dispose(), UA.dispose(), kA.dispose(), TI.dispose(), JI.dispose(), b.dispose(), aA.dispose(), _A.dispose(), W.dispose(), EA.dispose(), EA.removeEventListener("sessionstart", Hg), EA.removeEventListener("sessionend", Pe), fC.stop();
          };
          function tA(G) {
            G.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), p = true;
          }
          function wA() {
            console.log("THREE.WebGLRenderer: Context Restored."), p = false;
            const G = kI.autoReset, H = yA.enabled, O = yA.autoUpdate, _ = yA.needsUpdate, T = yA.type;
            u(), kI.autoReset = G, yA.enabled = H, yA.autoUpdate = O, yA.needsUpdate = _, yA.type = T;
          }
          function CA(G) {
            console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", G.statusMessage);
          }
          function $(G) {
            const H = G.target;
            H.removeEventListener("dispose", $), lA(H);
          }
          function lA(G) {
            TA(G), kA.remove(G);
          }
          function TA(G) {
            const H = kA.get(G).programs;
            H !== void 0 && (H.forEach(function(O) {
              W.releaseProgram(O);
            }), G.isShaderMaterial && W.releaseShaderCache(G));
          }
          this.renderBufferDirect = function(G, H, O, _, T, BA) {
            H === null && (H = NA);
            const DA = T.isMesh && T.matrixWorld.determinant() < 0, SA = rr(G, H, O, _, T);
            GA.setMaterial(_, DA);
            let hA = O.index, YA = 1;
            if (_.wireframe === true) {
              if (hA = l.getWireframeAttribute(O), hA === void 0) return;
              YA = 2;
            }
            const fA = O.drawRange, pA = O.attributes.position;
            let zA = fA.start * YA, tI = (fA.start + fA.count) * YA;
            BA !== null && (zA = Math.max(zA, BA.start * YA), tI = Math.min(tI, (BA.start + BA.count) * YA)), hA !== null ? (zA = Math.max(zA, 0), tI = Math.min(tI, hA.count)) : pA != null && (zA = Math.max(zA, 0), tI = Math.min(tI, pA.count));
            const FI = tI - zA;
            if (FI < 0 || FI === 1 / 0) return;
            aA.setup(T, _, SA, O, hA);
            let wI, DI = nA;
            if (hA !== null && (wI = N.get(hA), DI = qA, DI.setIndex(wI)), T.isMesh) _.wireframe === true ? (GA.setLineWidth(_.wireframeLinewidth * VI()), DI.setMode(d.LINES)) : DI.setMode(d.TRIANGLES);
            else if (T.isLine) {
              let dA = _.linewidth;
              dA === void 0 && (dA = 1), GA.setLineWidth(dA * VI()), T.isLineSegments ? DI.setMode(d.LINES) : T.isLineLoop ? DI.setMode(d.LINE_LOOP) : DI.setMode(d.LINE_STRIP);
            } else T.isPoints ? DI.setMode(d.POINTS) : T.isSprite && DI.setMode(d.TRIANGLES);
            if (T.isBatchedMesh) if (T._multiDrawInstances !== null) JQ("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."), DI.renderMultiDrawInstances(T._multiDrawStarts, T._multiDrawCounts, T._multiDrawCount, T._multiDrawInstances);
            else if (OA.get("WEBGL_multi_draw")) DI.renderMultiDraw(T._multiDrawStarts, T._multiDrawCounts, T._multiDrawCount);
            else {
              const dA = T._multiDrawStarts, yI = T._multiDrawCounts, CI = T._multiDrawCount, rg = hA ? N.get(hA).bytesPerElement : 1, iB = kA.get(_).currentProgram.getUniforms();
              for (let hg = 0; hg < CI; hg++) iB.setValue(d, "_gl_DrawID", hg), DI.render(dA[hg] / rg, yI[hg]);
            }
            else if (T.isInstancedMesh) DI.renderInstances(zA, FI, T.count);
            else if (O.isInstancedBufferGeometry) {
              const dA = O._maxInstanceCount !== void 0 ? O._maxInstanceCount : 1 / 0, yI = Math.min(O.instanceCount, dA);
              DI.renderInstances(zA, FI, yI);
            } else DI.render(zA, FI);
          };
          function rI(G, H, O) {
            G.transparent === true && G.side === _g && G.forceSinglePass === false ? (G.side = Dg, G.needsUpdate = true, WQ(G, H, O), G.side = Wg, G.needsUpdate = true, WQ(G, H, O), G.side = _g) : WQ(G, H, O);
          }
          this.compile = function(G, H, O = null) {
            O === null && (O = G), D = UA.get(O), D.init(H), M.push(D), O.traverseVisible(function(T) {
              T.isLight && T.layers.test(H.layers) && (D.pushLight(T), T.castShadow && D.pushShadow(T));
            }), G !== O && G.traverseVisible(function(T) {
              T.isLight && T.layers.test(H.layers) && (D.pushLight(T), T.castShadow && D.pushShadow(T));
            }), D.setupLights();
            const _ = /* @__PURE__ */ new Set();
            return G.traverse(function(T) {
              if (!(T.isMesh || T.isPoints || T.isLine || T.isSprite)) return;
              const BA = T.material;
              if (BA) if (Array.isArray(BA)) for (let DA = 0; DA < BA.length; DA++) {
                const SA = BA[DA];
                rI(SA, O, T), _.add(SA);
              }
              else rI(BA, O, T), _.add(BA);
            }), D = M.pop(), _;
          }, this.compileAsync = function(G, H, O = null) {
            const _ = this.compile(G, H, O);
            return new Promise((T) => {
              function BA() {
                if (_.forEach(function(DA) {
                  kA.get(DA).currentProgram.isReady() && _.delete(DA);
                }), _.size === 0) {
                  T(G);
                  return;
                }
                setTimeout(BA, 10);
              }
              OA.get("KHR_parallel_shader_compile") !== null ? BA() : setTimeout(BA, 10);
            });
          };
          let EI = null;
          function IC(G) {
            EI && EI(G);
          }
          function Hg() {
            fC.stop();
          }
          function Pe() {
            fC.start();
          }
          const fC = new jD();
          fC.setAnimationLoop(IC), typeof self < "u" && fC.setContext(self), this.setAnimationLoop = function(G) {
            EI = G, EA.setAnimationLoop(G), G === null ? fC.stop() : fC.start();
          }, EA.addEventListener("sessionstart", Hg), EA.addEventListener("sessionend", Pe), this.render = function(G, H) {
            if (H !== void 0 && H.isCamera !== true) {
              console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
              return;
            }
            if (p === true) return;
            if (G.matrixWorldAutoUpdate === true && G.updateMatrixWorld(), H.parent === null && H.matrixWorldAutoUpdate === true && H.updateMatrixWorld(), EA.enabled === true && EA.isPresenting === true && (EA.cameraAutoUpdate === true && EA.updateCamera(H), H = EA.getCamera()), G.isScene === true && G.onBeforeRender(k, G, H, m), D = UA.get(G, M.length), D.init(H), M.push(D), IA.multiplyMatrices(H.projectionMatrix, H.matrixWorldInverse), lI.setFromProjectionMatrix(IA, vg, H.reversedDepth), X = this.localClippingEnabled, QI = oA.init(this.clippingPlanes, X), h = P.get(G, U.length), h.init(), U.push(h), EA.enabled === true && EA.isPresenting === true) {
              const BA = k.xr.getDepthSensingMesh();
              BA !== null && ri(BA, H, -1 / 0, k.sortObjects);
            }
            ri(G, H, 0, k.sortObjects), h.finish(), k.sortObjects === true && h.sort(sA, rA), II = EA.enabled === false || EA.isPresenting === false || EA.hasDepthSensing() === false, II && MA.addToRenderList(h, G), this.info.render.frame++, QI === true && oA.beginShadows();
            const O = D.state.shadowsArray;
            yA.render(O, G, H), QI === true && oA.endShadows(), this.info.autoReset === true && this.info.reset();
            const _ = h.opaque, T = h.transmissive;
            if (D.setupLights(), H.isArrayCamera) {
              const BA = H.cameras;
              if (T.length > 0) for (let DA = 0, SA = BA.length; DA < SA; DA++) {
                const hA = BA[DA];
                je(_, T, G, hA);
              }
              II && MA.render(G);
              for (let DA = 0, SA = BA.length; DA < SA; DA++) {
                const hA = BA[DA];
                We(h, G, hA, hA.viewport);
              }
            } else T.length > 0 && je(_, T, G, H), II && MA.render(G), We(h, G, H);
            m !== null && Y === 0 && (vA.updateMultisampleRenderTarget(m), vA.updateRenderTargetMipmap(m)), G.isScene === true && G.onAfterRender(k, G, H), aA.resetDefaultState(), K = -1, y = null, M.pop(), M.length > 0 ? (D = M[M.length - 1], QI === true && oA.setGlobalState(k.clippingPlanes, D.state.camera)) : D = null, U.pop(), U.length > 0 ? h = U[U.length - 1] : h = null;
          };
          function ri(G, H, O, _) {
            if (G.visible === false) return;
            if (G.layers.test(H.layers)) {
              if (G.isGroup) O = G.renderOrder;
              else if (G.isLOD) G.autoUpdate === true && G.update(H);
              else if (G.isLight) D.pushLight(G), G.castShadow && D.pushShadow(G);
              else if (G.isSprite) {
                if (!G.frustumCulled || lI.intersectsSprite(G)) {
                  _ && HA.setFromMatrixPosition(G.matrixWorld).applyMatrix4(IA);
                  const DA = b.update(G), SA = G.material;
                  SA.visible && h.push(G, DA, SA, O, HA.z, null);
                }
              } else if ((G.isMesh || G.isLine || G.isPoints) && (!G.frustumCulled || lI.intersectsObject(G))) {
                const DA = b.update(G), SA = G.material;
                if (_ && (G.boundingSphere !== void 0 ? (G.boundingSphere === null && G.computeBoundingSphere(), HA.copy(G.boundingSphere.center)) : (DA.boundingSphere === null && DA.computeBoundingSphere(), HA.copy(DA.boundingSphere.center)), HA.applyMatrix4(G.matrixWorld).applyMatrix4(IA)), Array.isArray(SA)) {
                  const hA = DA.groups;
                  for (let YA = 0, fA = hA.length; YA < fA; YA++) {
                    const pA = hA[YA], zA = SA[pA.materialIndex];
                    zA && zA.visible && h.push(G, DA, zA, O, HA.z, pA);
                  }
                } else SA.visible && h.push(G, DA, SA, O, HA.z, null);
              }
            }
            const BA = G.children;
            for (let DA = 0, SA = BA.length; DA < SA; DA++) ri(BA[DA], H, O, _);
          }
          function We(G, H, O, _) {
            const T = G.opaque, BA = G.transmissive, DA = G.transparent;
            D.setupLightsView(O), QI === true && oA.setGlobalState(k.clippingPlanes, O), _ && GA.viewport(q.copy(_)), T.length > 0 && PQ(T, H, O), BA.length > 0 && PQ(BA, H, O), DA.length > 0 && PQ(DA, H, O), GA.buffers.depth.setTest(true), GA.buffers.depth.setMask(true), GA.buffers.color.setMask(true), GA.setPolygonOffset(false);
          }
          function je(G, H, O, _) {
            if ((O.isScene === true ? O.overrideMaterial : null) !== null) return;
            D.state.transmissionRenderTarget[_.id] === void 0 && (D.state.transmissionRenderTarget[_.id] = new gB(1, 1, {
              generateMipmaps: true,
              type: OA.has("EXT_color_buffer_half_float") || OA.has("EXT_color_buffer_float") ? DC : jg,
              minFilter: aC,
              samples: 4,
              stencilBuffer: Q,
              resolveDepthBuffer: false,
              resolveStencilBuffer: false,
              colorSpace: gI.workingColorSpace
            }));
            const BA = D.state.transmissionRenderTarget[_.id], DA = _.viewport || q;
            BA.setSize(DA.z * k.transmissionResolutionScale, DA.w * k.transmissionResolutionScale);
            const SA = k.getRenderTarget(), hA = k.getActiveCubeFace(), YA = k.getActiveMipmapLevel();
            k.setRenderTarget(BA), k.getClearColor(j), z = k.getClearAlpha(), z < 1 && k.setClearColor(16777215, 0.5), k.clear(), II && MA.render(O);
            const fA = k.toneMapping;
            k.toneMapping = dC;
            const pA = _.viewport;
            if (_.viewport !== void 0 && (_.viewport = void 0), D.setupLightsView(_), QI === true && oA.setGlobalState(k.clippingPlanes, _), PQ(G, O, _), vA.updateMultisampleRenderTarget(BA), vA.updateRenderTargetMipmap(BA), OA.has("WEBGL_multisampled_render_to_texture") === false) {
              let zA = false;
              for (let tI = 0, FI = H.length; tI < FI; tI++) {
                const wI = H[tI], DI = wI.object, dA = wI.geometry, yI = wI.material, CI = wI.group;
                if (yI.side === _g && DI.layers.test(_.layers)) {
                  const rg = yI.side;
                  yI.side = Dg, yI.needsUpdate = true, Ve(DI, O, _, dA, yI, CI), yI.side = rg, yI.needsUpdate = true, zA = true;
                }
              }
              zA === true && (vA.updateMultisampleRenderTarget(BA), vA.updateRenderTargetMipmap(BA));
            }
            k.setRenderTarget(SA, hA, YA), k.setClearColor(j, z), pA !== void 0 && (_.viewport = pA), k.toneMapping = fA;
          }
          function PQ(G, H, O) {
            const _ = H.isScene === true ? H.overrideMaterial : null;
            for (let T = 0, BA = G.length; T < BA; T++) {
              const DA = G[T], SA = DA.object, hA = DA.geometry, YA = DA.group;
              let fA = DA.material;
              fA.allowOverride === true && _ !== null && (fA = _), SA.layers.test(O.layers) && Ve(SA, H, O, hA, fA, YA);
            }
          }
          function Ve(G, H, O, _, T, BA) {
            G.onBeforeRender(k, H, O, _, T, BA), G.modelViewMatrix.multiplyMatrices(O.matrixWorldInverse, G.matrixWorld), G.normalMatrix.getNormalMatrix(G.modelViewMatrix), T.onBeforeRender(k, H, O, _, G, BA), T.transparent === true && T.side === _g && T.forceSinglePass === false ? (T.side = Dg, T.needsUpdate = true, k.renderBufferDirect(O, H, _, T, G, BA), T.side = Wg, T.needsUpdate = true, k.renderBufferDirect(O, H, _, T, G, BA), T.side = _g) : k.renderBufferDirect(O, H, _, T, G, BA), G.onAfterRender(k, H, O, _, T, BA);
          }
          function WQ(G, H, O) {
            H.isScene !== true && (H = NA);
            const _ = kA.get(G), T = D.state.lights, BA = D.state.shadowsArray, DA = T.state.version, SA = W.getParameters(G, T.state, BA, H, O), hA = W.getProgramCacheKey(SA);
            let YA = _.programs;
            _.environment = G.isMeshStandardMaterial ? H.environment : null, _.fog = H.fog, _.envMap = (G.isMeshStandardMaterial ? JI : TI).get(G.envMap || _.environment), _.envMapRotation = _.environment !== null && G.envMap === null ? H.environmentRotation : G.envMapRotation, YA === void 0 && (G.addEventListener("dispose", $), YA = /* @__PURE__ */ new Map(), _.programs = YA);
            let fA = YA.get(hA);
            if (fA !== void 0) {
              if (_.currentProgram === fA && _.lightsStateVersion === DA) return ze(G, SA), fA;
            } else SA.uniforms = W.getUniforms(G), G.onBeforeCompile(SA, k), fA = W.acquireProgram(SA, hA), YA.set(hA, fA), _.uniforms = SA.uniforms;
            const pA = _.uniforms;
            return (!G.isShaderMaterial && !G.isRawShaderMaterial || G.clipping === true) && (pA.clippingPlanes = oA.uniform), ze(G, SA), _.needsLights = wr(G), _.lightsStateVersion = DA, _.needsLights && (pA.ambientLightColor.value = T.state.ambient, pA.lightProbe.value = T.state.probe, pA.directionalLights.value = T.state.directional, pA.directionalLightShadows.value = T.state.directionalShadow, pA.spotLights.value = T.state.spot, pA.spotLightShadows.value = T.state.spotShadow, pA.rectAreaLights.value = T.state.rectArea, pA.ltc_1.value = T.state.rectAreaLTC1, pA.ltc_2.value = T.state.rectAreaLTC2, pA.pointLights.value = T.state.point, pA.pointLightShadows.value = T.state.pointShadow, pA.hemisphereLights.value = T.state.hemi, pA.directionalShadowMap.value = T.state.directionalShadowMap, pA.directionalShadowMatrix.value = T.state.directionalShadowMatrix, pA.spotShadowMap.value = T.state.spotShadowMap, pA.spotLightMatrix.value = T.state.spotLightMatrix, pA.spotLightMap.value = T.state.spotLightMap, pA.pointShadowMap.value = T.state.pointShadowMap, pA.pointShadowMatrix.value = T.state.pointShadowMatrix), _.currentProgram = fA, _.uniformsList = null, fA;
          }
          function Xe(G) {
            if (G.uniformsList === null) {
              const H = G.currentProgram.getUniforms();
              G.uniformsList = dE.seqWithValue(H.seq, G.uniforms);
            }
            return G.uniformsList;
          }
          function ze(G, H) {
            const O = kA.get(G);
            O.outputColorSpace = H.outputColorSpace, O.batching = H.batching, O.batchingColor = H.batchingColor, O.instancing = H.instancing, O.instancingColor = H.instancingColor, O.instancingMorph = H.instancingMorph, O.skinning = H.skinning, O.morphTargets = H.morphTargets, O.morphNormals = H.morphNormals, O.morphColors = H.morphColors, O.morphTargetsCount = H.morphTargetsCount, O.numClippingPlanes = H.numClippingPlanes, O.numIntersection = H.numClipIntersection, O.vertexAlphas = H.vertexAlphas, O.vertexTangents = H.vertexTangents, O.toneMapping = H.toneMapping;
          }
          function rr(G, H, O, _, T) {
            H.isScene !== true && (H = NA), vA.resetTextureUnits();
            const BA = H.fog, DA = _.isMeshStandardMaterial ? H.environment : null, SA = m === null ? k.outputColorSpace : m.isXRRenderTarget === true ? m.texture.colorSpace : Ag, hA = (_.isMeshStandardMaterial ? JI : TI).get(_.envMap || DA), YA = _.vertexColors === true && !!O.attributes.color && O.attributes.color.itemSize === 4, fA = !!O.attributes.tangent && (!!_.normalMap || _.anisotropy > 0), pA = !!O.morphAttributes.position, zA = !!O.morphAttributes.normal, tI = !!O.morphAttributes.color;
            let FI = dC;
            _.toneMapped && (m === null || m.isXRRenderTarget === true) && (FI = k.toneMapping);
            const wI = O.morphAttributes.position || O.morphAttributes.normal || O.morphAttributes.color, DI = wI !== void 0 ? wI.length : 0, dA = kA.get(_), yI = D.state.lights;
            if (QI === true && (X === true || G !== y)) {
              const Ig = G === y && _.id === K;
              oA.setState(_, G, Ig);
            }
            let CI = false;
            _.version === dA.__version ? (dA.needsLights && dA.lightsStateVersion !== yI.state.version || dA.outputColorSpace !== SA || T.isBatchedMesh && dA.batching === false || !T.isBatchedMesh && dA.batching === true || T.isBatchedMesh && dA.batchingColor === true && T.colorTexture === null || T.isBatchedMesh && dA.batchingColor === false && T.colorTexture !== null || T.isInstancedMesh && dA.instancing === false || !T.isInstancedMesh && dA.instancing === true || T.isSkinnedMesh && dA.skinning === false || !T.isSkinnedMesh && dA.skinning === true || T.isInstancedMesh && dA.instancingColor === true && T.instanceColor === null || T.isInstancedMesh && dA.instancingColor === false && T.instanceColor !== null || T.isInstancedMesh && dA.instancingMorph === true && T.morphTexture === null || T.isInstancedMesh && dA.instancingMorph === false && T.morphTexture !== null || dA.envMap !== hA || _.fog === true && dA.fog !== BA || dA.numClippingPlanes !== void 0 && (dA.numClippingPlanes !== oA.numPlanes || dA.numIntersection !== oA.numIntersection) || dA.vertexAlphas !== YA || dA.vertexTangents !== fA || dA.morphTargets !== pA || dA.morphNormals !== zA || dA.morphColors !== tI || dA.toneMapping !== FI || dA.morphTargetsCount !== DI) && (CI = true) : (CI = true, dA.__version = _.version);
            let rg = dA.currentProgram;
            CI === true && (rg = WQ(_, H, T));
            let iB = false, hg = false, $B = false;
            const MI = rg.getUniforms(), Gg = dA.uniforms;
            if (GA.useProgram(rg.program) && (iB = true, hg = true, $B = true), _.id !== K && (K = _.id, hg = true), iB || y !== G) {
              GA.buffers.depth.getReversed() && G.reversedDepth !== true && (G._reversedDepth = true, G.updateProjectionMatrix()), MI.setValue(d, "projectionMatrix", G.projectionMatrix), MI.setValue(d, "viewMatrix", G.matrixWorldInverse);
              const eg = MI.map.cameraPosition;
              eg !== void 0 && eg.setValue(d, cA.setFromMatrixPosition(G.matrixWorld)), LA.logarithmicDepthBuffer && MI.setValue(d, "logDepthBufFC", 2 / (Math.log(G.far + 1) / Math.LN2)), (_.isMeshPhongMaterial || _.isMeshToonMaterial || _.isMeshLambertMaterial || _.isMeshBasicMaterial || _.isMeshStandardMaterial || _.isShaderMaterial) && MI.setValue(d, "isOrthographic", G.isOrthographicCamera === true), y !== G && (y = G, hg = true, $B = true);
            }
            if (T.isSkinnedMesh) {
              MI.setOptional(d, T, "bindMatrix"), MI.setOptional(d, T, "bindMatrixInverse");
              const Ig = T.skeleton;
              Ig && (Ig.boneTexture === null && Ig.computeBoneTexture(), MI.setValue(d, "boneTexture", Ig.boneTexture, vA));
            }
            T.isBatchedMesh && (MI.setOptional(d, T, "batchingTexture"), MI.setValue(d, "batchingTexture", T._matricesTexture, vA), MI.setOptional(d, T, "batchingIdTexture"), MI.setValue(d, "batchingIdTexture", T._indirectTexture, vA), MI.setOptional(d, T, "batchingColorTexture"), T._colorsTexture !== null && MI.setValue(d, "batchingColorTexture", T._colorsTexture, vA));
            const kg = O.morphAttributes;
            if ((kg.position !== void 0 || kg.normal !== void 0 || kg.color !== void 0) && QA.update(T, O, rg), (hg || dA.receiveShadow !== T.receiveShadow) && (dA.receiveShadow = T.receiveShadow, MI.setValue(d, "receiveShadow", T.receiveShadow)), _.isMeshGouraudMaterial && _.envMap !== null && (Gg.envMap.value = hA, Gg.flipEnvMap.value = hA.isCubeTexture && hA.isRenderTargetTexture === false ? -1 : 1), _.isMeshStandardMaterial && _.envMap === null && H.environment !== null && (Gg.envMapIntensity.value = H.environmentIntensity), hg && (MI.setValue(d, "toneMappingExposure", k.toneMappingExposure), dA.needsLights && hr(Gg, $B), BA && _.fog === true && AA.refreshFogUniforms(Gg, BA), AA.refreshMaterialUniforms(Gg, _, v, iA, D.state.transmissionRenderTarget[G.id]), dE.upload(d, Xe(dA), Gg, vA)), _.isShaderMaterial && _.uniformsNeedUpdate === true && (dE.upload(d, Xe(dA), Gg, vA), _.uniformsNeedUpdate = false), _.isSpriteMaterial && MI.setValue(d, "center", T.center), MI.setValue(d, "modelViewMatrix", T.modelViewMatrix), MI.setValue(d, "normalMatrix", T.normalMatrix), MI.setValue(d, "modelMatrix", T.matrixWorld), _.isShaderMaterial || _.isRawShaderMaterial) {
              const Ig = _.uniformsGroups;
              for (let eg = 0, hi = Ig.length; eg < hi; eg++) {
                const uC = Ig[eg];
                _A.update(uC, rg), _A.bind(uC, rg);
              }
            }
            return rg;
          }
          function hr(G, H) {
            G.ambientLightColor.needsUpdate = H, G.lightProbe.needsUpdate = H, G.directionalLights.needsUpdate = H, G.directionalLightShadows.needsUpdate = H, G.pointLights.needsUpdate = H, G.pointLightShadows.needsUpdate = H, G.spotLights.needsUpdate = H, G.spotLightShadows.needsUpdate = H, G.rectAreaLights.needsUpdate = H, G.hemisphereLights.needsUpdate = H;
          }
          function wr(G) {
            return G.isMeshLambertMaterial || G.isMeshToonMaterial || G.isMeshPhongMaterial || G.isMeshStandardMaterial || G.isShadowMaterial || G.isShaderMaterial && G.lights === true;
          }
          this.getActiveCubeFace = function() {
            return R;
          }, this.getActiveMipmapLevel = function() {
            return Y;
          }, this.getRenderTarget = function() {
            return m;
          }, this.setRenderTargetTextures = function(G, H, O) {
            const _ = kA.get(G);
            _.__autoAllocateDepthBuffer = G.resolveDepthBuffer === false, _.__autoAllocateDepthBuffer === false && (_.__useRenderToTexture = false), kA.get(G.texture).__webglTexture = H, kA.get(G.depthTexture).__webglTexture = _.__autoAllocateDepthBuffer ? void 0 : O, _.__hasExternalTextures = true;
          }, this.setRenderTargetFramebuffer = function(G, H) {
            const O = kA.get(G);
            O.__webglFramebuffer = H, O.__useDefaultFramebuffer = H === void 0;
          };
          const cr = d.createFramebuffer();
          this.setRenderTarget = function(G, H = 0, O = 0) {
            m = G, R = H, Y = O;
            let _ = true, T = null, BA = false, DA = false;
            if (G) {
              const hA = kA.get(G);
              if (hA.__useDefaultFramebuffer !== void 0) GA.bindFramebuffer(d.FRAMEBUFFER, null), _ = false;
              else if (hA.__webglFramebuffer === void 0) vA.setupRenderTarget(G);
              else if (hA.__hasExternalTextures) vA.rebindTextures(G, kA.get(G.texture).__webglTexture, kA.get(G.depthTexture).__webglTexture);
              else if (G.depthBuffer) {
                const pA = G.depthTexture;
                if (hA.__boundDepthTexture !== pA) {
                  if (pA !== null && kA.has(pA) && (G.width !== pA.image.width || G.height !== pA.image.height)) throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
                  vA.setupDepthRenderbuffer(G);
                }
              }
              const YA = G.texture;
              (YA.isData3DTexture || YA.isDataArrayTexture || YA.isCompressedArrayTexture) && (DA = true);
              const fA = kA.get(G).__webglFramebuffer;
              G.isWebGLCubeRenderTarget ? (Array.isArray(fA[H]) ? T = fA[H][O] : T = fA[H], BA = true) : G.samples > 0 && vA.useMultisampledRTT(G) === false ? T = kA.get(G).__webglMultisampledFramebuffer : Array.isArray(fA) ? T = fA[O] : T = fA, q.copy(G.viewport), x.copy(G.scissor), Z = G.scissorTest;
            } else q.copy(JA).multiplyScalar(v).floor(), x.copy(jA).multiplyScalar(v).floor(), Z = nI;
            if (O !== 0 && (T = cr), GA.bindFramebuffer(d.FRAMEBUFFER, T) && _ && GA.drawBuffers(G, T), GA.viewport(q), GA.scissor(x), GA.setScissorTest(Z), BA) {
              const hA = kA.get(G.texture);
              d.framebufferTexture2D(d.FRAMEBUFFER, d.COLOR_ATTACHMENT0, d.TEXTURE_CUBE_MAP_POSITIVE_X + H, hA.__webglTexture, O);
            } else if (DA) {
              const hA = H;
              for (let YA = 0; YA < G.textures.length; YA++) {
                const fA = kA.get(G.textures[YA]);
                d.framebufferTextureLayer(d.FRAMEBUFFER, d.COLOR_ATTACHMENT0 + YA, fA.__webglTexture, O, hA);
              }
            } else if (G !== null && O !== 0) {
              const hA = kA.get(G.texture);
              d.framebufferTexture2D(d.FRAMEBUFFER, d.COLOR_ATTACHMENT0, d.TEXTURE_2D, hA.__webglTexture, O);
            }
            K = -1;
          }, this.readRenderTargetPixels = function(G, H, O, _, T, BA, DA, SA = 0) {
            if (!(G && G.isWebGLRenderTarget)) {
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
              return;
            }
            let hA = kA.get(G).__webglFramebuffer;
            if (G.isWebGLCubeRenderTarget && DA !== void 0 && (hA = hA[DA]), hA) {
              GA.bindFramebuffer(d.FRAMEBUFFER, hA);
              try {
                const YA = G.textures[SA], fA = YA.format, pA = YA.type;
                if (!LA.textureFormatReadable(fA)) {
                  console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                  return;
                }
                if (!LA.textureTypeReadable(pA)) {
                  console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                  return;
                }
                H >= 0 && H <= G.width - _ && O >= 0 && O <= G.height - T && (G.textures.length > 1 && d.readBuffer(d.COLOR_ATTACHMENT0 + SA), d.readPixels(H, O, _, T, KA.convert(fA), KA.convert(pA), BA));
              } finally {
                const YA = m !== null ? kA.get(m).__webglFramebuffer : null;
                GA.bindFramebuffer(d.FRAMEBUFFER, YA);
              }
            }
          }, this.readRenderTargetPixelsAsync = async function(G, H, O, _, T, BA, DA, SA = 0) {
            if (!(G && G.isWebGLRenderTarget)) throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
            let hA = kA.get(G).__webglFramebuffer;
            if (G.isWebGLCubeRenderTarget && DA !== void 0 && (hA = hA[DA]), hA) if (H >= 0 && H <= G.width - _ && O >= 0 && O <= G.height - T) {
              GA.bindFramebuffer(d.FRAMEBUFFER, hA);
              const YA = G.textures[SA], fA = YA.format, pA = YA.type;
              if (!LA.textureFormatReadable(fA)) throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
              if (!LA.textureTypeReadable(pA)) throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
              const zA = d.createBuffer();
              d.bindBuffer(d.PIXEL_PACK_BUFFER, zA), d.bufferData(d.PIXEL_PACK_BUFFER, BA.byteLength, d.STREAM_READ), G.textures.length > 1 && d.readBuffer(d.COLOR_ATTACHMENT0 + SA), d.readPixels(H, O, _, T, KA.convert(fA), KA.convert(pA), 0);
              const tI = m !== null ? kA.get(m).__webglFramebuffer : null;
              GA.bindFramebuffer(d.FRAMEBUFFER, tI);
              const FI = d.fenceSync(d.SYNC_GPU_COMMANDS_COMPLETE, 0);
              return d.flush(), await dh(d, FI, 4), d.bindBuffer(d.PIXEL_PACK_BUFFER, zA), d.getBufferSubData(d.PIXEL_PACK_BUFFER, 0, BA), d.deleteBuffer(zA), d.deleteSync(FI), BA;
            } else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
          }, this.copyFramebufferToTexture = function(G, H = null, O = 0) {
            const _ = Math.pow(2, -O), T = Math.floor(G.image.width * _), BA = Math.floor(G.image.height * _), DA = H !== null ? H.x : 0, SA = H !== null ? H.y : 0;
            vA.setTexture2D(G, 0), d.copyTexSubImage2D(d.TEXTURE_2D, O, 0, 0, DA, SA, T, BA), GA.unbindTexture();
          };
          const Sr = d.createFramebuffer(), lr = d.createFramebuffer();
          this.copyTextureToTexture = function(G, H, O = null, _ = null, T = 0, BA = null) {
            BA === null && (T !== 0 ? (JQ("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."), BA = T, T = 0) : BA = 0);
            let DA, SA, hA, YA, fA, pA, zA, tI, FI;
            const wI = G.isCompressedTexture ? G.mipmaps[BA] : G.image;
            if (O !== null) DA = O.max.x - O.min.x, SA = O.max.y - O.min.y, hA = O.isBox3 ? O.max.z - O.min.z : 1, YA = O.min.x, fA = O.min.y, pA = O.isBox3 ? O.min.z : 0;
            else {
              const kg = Math.pow(2, -T);
              DA = Math.floor(wI.width * kg), SA = Math.floor(wI.height * kg), G.isDataArrayTexture ? hA = wI.depth : G.isData3DTexture ? hA = Math.floor(wI.depth * kg) : hA = 1, YA = 0, fA = 0, pA = 0;
            }
            _ !== null ? (zA = _.x, tI = _.y, FI = _.z) : (zA = 0, tI = 0, FI = 0);
            const DI = KA.convert(H.format), dA = KA.convert(H.type);
            let yI;
            H.isData3DTexture ? (vA.setTexture3D(H, 0), yI = d.TEXTURE_3D) : H.isDataArrayTexture || H.isCompressedArrayTexture ? (vA.setTexture2DArray(H, 0), yI = d.TEXTURE_2D_ARRAY) : (vA.setTexture2D(H, 0), yI = d.TEXTURE_2D), d.pixelStorei(d.UNPACK_FLIP_Y_WEBGL, H.flipY), d.pixelStorei(d.UNPACK_PREMULTIPLY_ALPHA_WEBGL, H.premultiplyAlpha), d.pixelStorei(d.UNPACK_ALIGNMENT, H.unpackAlignment);
            const CI = d.getParameter(d.UNPACK_ROW_LENGTH), rg = d.getParameter(d.UNPACK_IMAGE_HEIGHT), iB = d.getParameter(d.UNPACK_SKIP_PIXELS), hg = d.getParameter(d.UNPACK_SKIP_ROWS), $B = d.getParameter(d.UNPACK_SKIP_IMAGES);
            d.pixelStorei(d.UNPACK_ROW_LENGTH, wI.width), d.pixelStorei(d.UNPACK_IMAGE_HEIGHT, wI.height), d.pixelStorei(d.UNPACK_SKIP_PIXELS, YA), d.pixelStorei(d.UNPACK_SKIP_ROWS, fA), d.pixelStorei(d.UNPACK_SKIP_IMAGES, pA);
            const MI = G.isDataArrayTexture || G.isData3DTexture, Gg = H.isDataArrayTexture || H.isData3DTexture;
            if (G.isDepthTexture) {
              const kg = kA.get(G), Ig = kA.get(H), eg = kA.get(kg.__renderTarget), hi = kA.get(Ig.__renderTarget);
              GA.bindFramebuffer(d.READ_FRAMEBUFFER, eg.__webglFramebuffer), GA.bindFramebuffer(d.DRAW_FRAMEBUFFER, hi.__webglFramebuffer);
              for (let uC = 0; uC < hA; uC++) MI && (d.framebufferTextureLayer(d.READ_FRAMEBUFFER, d.COLOR_ATTACHMENT0, kA.get(G).__webglTexture, T, pA + uC), d.framebufferTextureLayer(d.DRAW_FRAMEBUFFER, d.COLOR_ATTACHMENT0, kA.get(H).__webglTexture, BA, FI + uC)), d.blitFramebuffer(YA, fA, DA, SA, zA, tI, DA, SA, d.DEPTH_BUFFER_BIT, d.NEAREST);
              GA.bindFramebuffer(d.READ_FRAMEBUFFER, null), GA.bindFramebuffer(d.DRAW_FRAMEBUFFER, null);
            } else if (T !== 0 || G.isRenderTargetTexture || kA.has(G)) {
              const kg = kA.get(G), Ig = kA.get(H);
              GA.bindFramebuffer(d.READ_FRAMEBUFFER, Sr), GA.bindFramebuffer(d.DRAW_FRAMEBUFFER, lr);
              for (let eg = 0; eg < hA; eg++) MI ? d.framebufferTextureLayer(d.READ_FRAMEBUFFER, d.COLOR_ATTACHMENT0, kg.__webglTexture, T, pA + eg) : d.framebufferTexture2D(d.READ_FRAMEBUFFER, d.COLOR_ATTACHMENT0, d.TEXTURE_2D, kg.__webglTexture, T), Gg ? d.framebufferTextureLayer(d.DRAW_FRAMEBUFFER, d.COLOR_ATTACHMENT0, Ig.__webglTexture, BA, FI + eg) : d.framebufferTexture2D(d.DRAW_FRAMEBUFFER, d.COLOR_ATTACHMENT0, d.TEXTURE_2D, Ig.__webglTexture, BA), T !== 0 ? d.blitFramebuffer(YA, fA, DA, SA, zA, tI, DA, SA, d.COLOR_BUFFER_BIT, d.NEAREST) : Gg ? d.copyTexSubImage3D(yI, BA, zA, tI, FI + eg, YA, fA, DA, SA) : d.copyTexSubImage2D(yI, BA, zA, tI, YA, fA, DA, SA);
              GA.bindFramebuffer(d.READ_FRAMEBUFFER, null), GA.bindFramebuffer(d.DRAW_FRAMEBUFFER, null);
            } else Gg ? G.isDataTexture || G.isData3DTexture ? d.texSubImage3D(yI, BA, zA, tI, FI, DA, SA, hA, DI, dA, wI.data) : H.isCompressedArrayTexture ? d.compressedTexSubImage3D(yI, BA, zA, tI, FI, DA, SA, hA, DI, wI.data) : d.texSubImage3D(yI, BA, zA, tI, FI, DA, SA, hA, DI, dA, wI) : G.isDataTexture ? d.texSubImage2D(d.TEXTURE_2D, BA, zA, tI, DA, SA, DI, dA, wI.data) : G.isCompressedTexture ? d.compressedTexSubImage2D(d.TEXTURE_2D, BA, zA, tI, wI.width, wI.height, DI, wI.data) : d.texSubImage2D(d.TEXTURE_2D, BA, zA, tI, DA, SA, DI, dA, wI);
            d.pixelStorei(d.UNPACK_ROW_LENGTH, CI), d.pixelStorei(d.UNPACK_IMAGE_HEIGHT, rg), d.pixelStorei(d.UNPACK_SKIP_PIXELS, iB), d.pixelStorei(d.UNPACK_SKIP_ROWS, hg), d.pixelStorei(d.UNPACK_SKIP_IMAGES, $B), BA === 0 && H.generateMipmaps && d.generateMipmap(yI), GA.unbindTexture();
          }, this.initRenderTarget = function(G) {
            kA.get(G).__webglFramebuffer === void 0 && vA.setupRenderTarget(G);
          }, this.initTexture = function(G) {
            G.isCubeTexture ? vA.setTextureCube(G, 0) : G.isData3DTexture ? vA.setTexture3D(G, 0) : G.isDataArrayTexture || G.isCompressedArrayTexture ? vA.setTexture2DArray(G, 0) : vA.setTexture2D(G, 0), GA.unbindTexture();
          }, this.resetState = function() {
            R = 0, Y = 0, m = null, GA.reset(), aA.reset();
          }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
          }));
        }
        get coordinateSystem() {
          return vg;
        }
        get outputColorSpace() {
          return this._outputColorSpace;
        }
        set outputColorSpace(A) {
          this._outputColorSpace = A;
          const I = this.getContext();
          I.drawingBufferColorSpace = gI._getDrawingBufferColorSpace(A), I.unpackColorSpace = gI._getUnpackColorSpace();
        }
      }
      function fk(C) {
        return C && C.__esModule && Object.prototype.hasOwnProperty.call(C, "default") ? C.default : C;
      }
      var zi, ca;
      function uk() {
        return ca || (ca = 1, zi = kr), zi;
      }
      var Hk = uk();
      const mk = fk(Hk), Tk = "data:application/wasm;base64,", bk = async (C = {}, A) => {
        let I;
        if (A.startsWith("data:")) {
          const g = A.replace(/^data:.*?base64,/, "");
          let B;
          if (typeof Buffer == "function" && typeof Buffer.from == "function") B = Buffer.from(g, "base64");
          else if (typeof atob == "function") {
            const Q = atob(g);
            B = new Uint8Array(Q.length);
            for (let E = 0; E < Q.length; E++) B[E] = Q.charCodeAt(E);
          } else throw new Error("Cannot decode base64-encoded data URL");
          I = await WebAssembly.instantiate(B, C);
        } else {
          const g = await fetch(A), B = g.headers.get("Content-Type") || "";
          if ("instantiateStreaming" in WebAssembly && B.startsWith("application/wasm")) I = await WebAssembly.instantiateStreaming(g, C);
          else {
            const Q = await g.arrayBuffer();
            I = await WebAssembly.instantiate(Q, C);
          }
        }
        return I.instance.exports;
      };
      let n;
      function xk(C) {
        n = C;
      }
      const AI = new Array(128).fill(void 0);
      AI.push(void 0, null, true, false);
      function $A(C) {
        return AI[C];
      }
      let cQ = AI.length;
      function aI(C) {
        cQ === AI.length && AI.push(AI.length + 1);
        const A = cQ;
        return cQ = AI[A], AI[A] = C, A;
      }
      function Ii(C, A) {
        try {
          return C.apply(this, A);
        } catch (I) {
          n.__wbindgen_export_0(aI(I));
        }
      }
      const Ok = typeof TextDecoder > "u" ? (0, module.require)("util").TextDecoder : TextDecoder;
      let An = new Ok("utf-8", {
        ignoreBOM: true,
        fatal: true
      });
      An.decode();
      let kE = null;
      function _k() {
        return (kE === null || kE.byteLength === 0) && (kE = new Uint8Array(n.memory.buffer)), kE;
      }
      function re(C, A) {
        return C = C >>> 0, An.decode(_k().subarray(C, C + A));
      }
      function RA(C) {
        return C == null;
      }
      let MB = null;
      function qI() {
        return (MB === null || MB.buffer.detached === true || MB.buffer.detached === void 0 && MB.buffer !== n.memory.buffer) && (MB = new DataView(n.memory.buffer)), MB;
      }
      function Zk(C) {
        C < 132 || (AI[C] = cQ, cQ = C);
      }
      function RQ(C) {
        const A = $A(C);
        return Zk(C), A;
      }
      function vk() {
        let C, A;
        try {
          const B = n.__wbindgen_add_to_stack_pointer(-16);
          n.version(B);
          var I = qI().getInt32(B + 0, true), g = qI().getInt32(B + 4, true);
          return C = I, A = g, re(I, g);
        } finally {
          n.__wbindgen_add_to_stack_pointer(16), n.__wbindgen_export_1(C, A, 1);
        }
      }
      function Pk(C) {
        n.reserve_memory(C);
      }
      function F(C, A) {
        if (!(C instanceof A)) throw new Error(`expected instance of ${A.name}`);
      }
      let sI = 128;
      function cI(C) {
        if (sI == 1) throw new Error("out of js stack");
        return AI[--sI] = C, sI;
      }
      let yE = null;
      function Wk() {
        return (yE === null || yE.byteLength === 0) && (yE = new Int32Array(n.memory.buffer)), yE;
      }
      function jk(C, A) {
        return C = C >>> 0, Wk().subarray(C / 4, C / 4 + A);
      }
      let ME = null;
      function In() {
        return (ME === null || ME.byteLength === 0) && (ME = new Float32Array(n.memory.buffer)), ME;
      }
      function Sa(C, A) {
        return C = C >>> 0, In().subarray(C / 4, C / 4 + A);
      }
      let KE = null;
      function gn() {
        return (KE === null || KE.byteLength === 0) && (KE = new Uint32Array(n.memory.buffer)), KE;
      }
      function Vk(C, A) {
        return C = C >>> 0, gn().subarray(C / 4, C / 4 + A);
      }
      let Bg = 0;
      function tQ(C, A) {
        const I = A(C.length * 4, 4) >>> 0;
        return gn().set(C, I / 4), Bg = C.length, I;
      }
      function NC(C, A) {
        const I = A(C.length * 4, 4) >>> 0;
        return In().set(C, I / 4), Bg = C.length, I;
      }
      const gi = Object.freeze({
        LinX: 0,
        0: "LinX",
        LinY: 1,
        1: "LinY",
        LinZ: 2,
        2: "LinZ",
        AngX: 3,
        3: "AngX",
        AngY: 4,
        4: "AngY",
        AngZ: 5,
        5: "AngZ"
      }), Jg = Object.freeze({
        Revolute: 0,
        0: "Revolute",
        Fixed: 1,
        1: "Fixed",
        Prismatic: 2,
        2: "Prismatic",
        Rope: 3,
        3: "Rope",
        Spring: 4,
        4: "Spring",
        Spherical: 5,
        5: "Spherical",
        Generic: 6,
        6: "Generic"
      }), xI = Object.freeze({
        Ball: 0,
        0: "Ball",
        Cuboid: 1,
        1: "Cuboid",
        Capsule: 2,
        2: "Capsule",
        Segment: 3,
        3: "Segment",
        Polyline: 4,
        4: "Polyline",
        Triangle: 5,
        5: "Triangle",
        TriMesh: 6,
        6: "TriMesh",
        HeightField: 7,
        7: "HeightField",
        Compound: 8,
        8: "Compound",
        ConvexPolyhedron: 9,
        9: "ConvexPolyhedron",
        Cylinder: 10,
        10: "Cylinder",
        Cone: 11,
        11: "Cone",
        RoundCuboid: 12,
        12: "RoundCuboid",
        RoundTriangle: 13,
        13: "RoundTriangle",
        RoundCylinder: 14,
        14: "RoundCylinder",
        RoundCone: 15,
        15: "RoundCone",
        RoundConvexPolyhedron: 16,
        16: "RoundConvexPolyhedron",
        HalfSpace: 17,
        17: "HalfSpace",
        Voxels: 18,
        18: "Voxels"
      }), $i = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawbroadphase_free(C >>> 0, 1));
      class wC {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(wC.prototype);
          return I.__wbg_ptr = A, $i.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, $i.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawbroadphase_free(A, 0);
        }
        constructor() {
          const A = n.rawbroadphase_new();
          return this.__wbg_ptr = A >>> 0, $i.register(this, this.__wbg_ptr, this), this;
        }
        castRay(A, I, g, B, Q, E, i, o, t, e, s, a) {
          try {
            F(A, LI), F(I, hI), F(g, KI), F(B, L), F(Q, L);
            const r = n.rawbroadphase_castRay(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E, i, o, RA(t) ? 4294967297 : t >>> 0, !RA(e), RA(e) ? 0 : e, !RA(s), RA(s) ? 0 : s, cI(a));
            return r === 0 ? void 0 : le.__wrap(r);
          } finally {
            AI[sI++] = void 0;
          }
        }
        castRayAndGetNormal(A, I, g, B, Q, E, i, o, t, e, s, a) {
          try {
            F(A, LI), F(I, hI), F(g, KI), F(B, L), F(Q, L);
            const r = n.rawbroadphase_castRayAndGetNormal(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E, i, o, RA(t) ? 4294967297 : t >>> 0, !RA(e), RA(e) ? 0 : e, !RA(s), RA(s) ? 0 : s, cI(a));
            return r === 0 ? void 0 : Qi.__wrap(r);
          } finally {
            AI[sI++] = void 0;
          }
        }
        intersectionsWithRay(A, I, g, B, Q, E, i, o, t, e, s, a, r) {
          try {
            F(A, LI), F(I, hI), F(g, KI), F(B, L), F(Q, L), n.rawbroadphase_intersectionsWithRay(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E, i, cI(o), t, RA(e) ? 4294967297 : e >>> 0, !RA(s), RA(s) ? 0 : s, !RA(a), RA(a) ? 0 : a, cI(r));
          } finally {
            AI[sI++] = void 0, AI[sI++] = void 0;
          }
        }
        intersectionWithShape(A, I, g, B, Q, E, i, o, t, e, s) {
          try {
            const c = n.__wbindgen_add_to_stack_pointer(-16);
            F(A, LI), F(I, hI), F(g, KI), F(B, L), F(Q, PA), F(E, FA), n.rawbroadphase_intersectionWithShape(c, this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E.__wbg_ptr, i, RA(o) ? 4294967297 : o >>> 0, !RA(t), RA(t) ? 0 : t, !RA(e), RA(e) ? 0 : e, cI(s));
            var a = qI().getInt32(c + 0, true), r = qI().getFloat64(c + 8, true);
            return a === 0 ? void 0 : r;
          } finally {
            n.__wbindgen_add_to_stack_pointer(16), AI[sI++] = void 0;
          }
        }
        projectPoint(A, I, g, B, Q, E, i, o, t, e) {
          try {
            F(A, LI), F(I, hI), F(g, KI), F(B, L);
            const s = n.rawbroadphase_projectPoint(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q, E, RA(i) ? 4294967297 : i >>> 0, !RA(o), RA(o) ? 0 : o, !RA(t), RA(t) ? 0 : t, cI(e));
            return s === 0 ? void 0 : bE.__wrap(s);
          } finally {
            AI[sI++] = void 0;
          }
        }
        projectPointAndGetFeature(A, I, g, B, Q, E, i, o, t) {
          try {
            F(A, LI), F(I, hI), F(g, KI), F(B, L);
            const e = n.rawbroadphase_projectPointAndGetFeature(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q, RA(E) ? 4294967297 : E >>> 0, !RA(i), RA(i) ? 0 : i, !RA(o), RA(o) ? 0 : o, cI(t));
            return e === 0 ? void 0 : bE.__wrap(e);
          } finally {
            AI[sI++] = void 0;
          }
        }
        intersectionsWithPoint(A, I, g, B, Q, E, i, o, t, e) {
          try {
            F(A, LI), F(I, hI), F(g, KI), F(B, L), n.rawbroadphase_intersectionsWithPoint(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, cI(Q), E, RA(i) ? 4294967297 : i >>> 0, !RA(o), RA(o) ? 0 : o, !RA(t), RA(t) ? 0 : t, cI(e));
          } finally {
            AI[sI++] = void 0, AI[sI++] = void 0;
          }
        }
        castShape(A, I, g, B, Q, E, i, o, t, e, s, a, r, c, S) {
          try {
            F(A, LI), F(I, hI), F(g, KI), F(B, L), F(Q, PA), F(E, L), F(i, FA);
            const h = n.rawbroadphase_castShape(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E.__wbg_ptr, i.__wbg_ptr, o, t, e, s, RA(a) ? 4294967297 : a >>> 0, !RA(r), RA(r) ? 0 : r, !RA(c), RA(c) ? 0 : c, cI(S));
            return h === 0 ? void 0 : Ci.__wrap(h);
          } finally {
            AI[sI++] = void 0;
          }
        }
        intersectionsWithShape(A, I, g, B, Q, E, i, o, t, e, s, a) {
          try {
            F(A, LI), F(I, hI), F(g, KI), F(B, L), F(Q, PA), F(E, FA), n.rawbroadphase_intersectionsWithShape(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E.__wbg_ptr, cI(i), o, RA(t) ? 4294967297 : t >>> 0, !RA(e), RA(e) ? 0 : e, !RA(s), RA(s) ? 0 : s, cI(a));
          } finally {
            AI[sI++] = void 0, AI[sI++] = void 0;
          }
        }
        collidersWithAabbIntersectingAabb(A, I, g, B, Q, E) {
          try {
            F(A, LI), F(I, hI), F(g, KI), F(B, L), F(Q, L), n.rawbroadphase_collidersWithAabbIntersectingAabb(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, cI(E));
          } finally {
            AI[sI++] = void 0;
          }
        }
      }
      const la = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawccdsolver_free(C >>> 0, 1));
      class ht {
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, la.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawccdsolver_free(A, 0);
        }
        constructor() {
          const A = n.rawccdsolver_new();
          return this.__wbg_ptr = A >>> 0, la.register(this, this.__wbg_ptr, this), this;
        }
      }
      const Ga = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawcharactercollision_free(C >>> 0, 1));
      class Cn {
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Ga.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawcharactercollision_free(A, 0);
        }
        constructor() {
          const A = n.rawcharactercollision_new();
          return this.__wbg_ptr = A >>> 0, Ga.register(this, this.__wbg_ptr, this), this;
        }
        handle() {
          return n.rawcharactercollision_handle(this.__wbg_ptr);
        }
        translationDeltaApplied() {
          const A = n.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);
          return L.__wrap(A);
        }
        translationDeltaRemaining() {
          const A = n.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);
          return L.__wrap(A);
        }
        toi() {
          return n.rawcharactercollision_toi(this.__wbg_ptr);
        }
        worldWitness1() {
          const A = n.rawcharactercollision_worldWitness1(this.__wbg_ptr);
          return L.__wrap(A);
        }
        worldWitness2() {
          const A = n.rawcharactercollision_worldWitness2(this.__wbg_ptr);
          return L.__wrap(A);
        }
        worldNormal1() {
          const A = n.rawcharactercollision_worldNormal1(this.__wbg_ptr);
          return L.__wrap(A);
        }
        worldNormal2() {
          const A = n.rawcharactercollision_worldNormal2(this.__wbg_ptr);
          return L.__wrap(A);
        }
      }
      const Ao = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawcolliderset_free(C >>> 0, 1));
      class KI {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(KI.prototype);
          return I.__wbg_ptr = A, Ao.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Ao.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawcolliderset_free(A, 0);
        }
        coTranslation(A) {
          const I = n.rawcolliderset_coTranslation(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        coRotation(A) {
          const I = n.rawcolliderset_coRotation(this.__wbg_ptr, A);
          return PA.__wrap(I);
        }
        coTranslationWrtParent(A) {
          const I = n.rawcolliderset_coTranslationWrtParent(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        coRotationWrtParent(A) {
          const I = n.rawcolliderset_coRotationWrtParent(this.__wbg_ptr, A);
          return I === 0 ? void 0 : PA.__wrap(I);
        }
        coSetTranslation(A, I, g, B) {
          n.rawcolliderset_coSetTranslation(this.__wbg_ptr, A, I, g, B);
        }
        coSetTranslationWrtParent(A, I, g, B) {
          n.rawcolliderset_coSetTranslationWrtParent(this.__wbg_ptr, A, I, g, B);
        }
        coSetRotation(A, I, g, B, Q) {
          n.rawcolliderset_coSetRotation(this.__wbg_ptr, A, I, g, B, Q);
        }
        coSetRotationWrtParent(A, I, g, B, Q) {
          n.rawcolliderset_coSetRotationWrtParent(this.__wbg_ptr, A, I, g, B, Q);
        }
        coIsSensor(A) {
          return n.rawcolliderset_coIsSensor(this.__wbg_ptr, A) !== 0;
        }
        coShapeType(A) {
          return n.rawcolliderset_coShapeType(this.__wbg_ptr, A);
        }
        coHalfspaceNormal(A) {
          const I = n.rawcolliderset_coHalfspaceNormal(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        coHalfExtents(A) {
          const I = n.rawcolliderset_coHalfExtents(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        coSetHalfExtents(A, I) {
          F(I, L), n.rawcolliderset_coSetHalfExtents(this.__wbg_ptr, A, I.__wbg_ptr);
        }
        coRadius(A) {
          const I = n.rawcolliderset_coRadius(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        coSetRadius(A, I) {
          n.rawcolliderset_coSetRadius(this.__wbg_ptr, A, I);
        }
        coHalfHeight(A) {
          const I = n.rawcolliderset_coHalfHeight(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        coSetHalfHeight(A, I) {
          n.rawcolliderset_coSetHalfHeight(this.__wbg_ptr, A, I);
        }
        coRoundRadius(A) {
          const I = n.rawcolliderset_coRoundRadius(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        coSetRoundRadius(A, I) {
          n.rawcolliderset_coSetRoundRadius(this.__wbg_ptr, A, I);
        }
        coVoxelData(A) {
          try {
            const B = n.__wbindgen_add_to_stack_pointer(-16);
            n.rawcolliderset_coVoxelData(B, this.__wbg_ptr, A);
            var I = qI().getInt32(B + 0, true), g = qI().getInt32(B + 4, true);
            let Q;
            return I !== 0 && (Q = jk(I, g).slice(), n.__wbindgen_export_1(I, g * 4, 4)), Q;
          } finally {
            n.__wbindgen_add_to_stack_pointer(16);
          }
        }
        coVoxelSize(A) {
          const I = n.rawcolliderset_coVoxelSize(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        coSetVoxel(A, I, g, B, Q) {
          n.rawcolliderset_coSetVoxel(this.__wbg_ptr, A, I, g, B, Q);
        }
        coPropagateVoxelChange(A, I, g, B, Q, E, i, o) {
          n.rawcolliderset_coPropagateVoxelChange(this.__wbg_ptr, A, I, g, B, Q, E, i, o);
        }
        coCombineVoxelStates(A, I, g, B, Q) {
          n.rawcolliderset_coCombineVoxelStates(this.__wbg_ptr, A, I, g, B, Q);
        }
        coVertices(A) {
          try {
            const B = n.__wbindgen_add_to_stack_pointer(-16);
            n.rawcolliderset_coVertices(B, this.__wbg_ptr, A);
            var I = qI().getInt32(B + 0, true), g = qI().getInt32(B + 4, true);
            let Q;
            return I !== 0 && (Q = Sa(I, g).slice(), n.__wbindgen_export_1(I, g * 4, 4)), Q;
          } finally {
            n.__wbindgen_add_to_stack_pointer(16);
          }
        }
        coIndices(A) {
          try {
            const B = n.__wbindgen_add_to_stack_pointer(-16);
            n.rawcolliderset_coIndices(B, this.__wbg_ptr, A);
            var I = qI().getInt32(B + 0, true), g = qI().getInt32(B + 4, true);
            let Q;
            return I !== 0 && (Q = Vk(I, g).slice(), n.__wbindgen_export_1(I, g * 4, 4)), Q;
          } finally {
            n.__wbindgen_add_to_stack_pointer(16);
          }
        }
        coTriMeshFlags(A) {
          const I = n.rawcolliderset_coTriMeshFlags(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        coHeightFieldFlags(A) {
          const I = n.rawcolliderset_coHeightFieldFlags(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        coHeightfieldHeights(A) {
          try {
            const B = n.__wbindgen_add_to_stack_pointer(-16);
            n.rawcolliderset_coHeightfieldHeights(B, this.__wbg_ptr, A);
            var I = qI().getInt32(B + 0, true), g = qI().getInt32(B + 4, true);
            let Q;
            return I !== 0 && (Q = Sa(I, g).slice(), n.__wbindgen_export_1(I, g * 4, 4)), Q;
          } finally {
            n.__wbindgen_add_to_stack_pointer(16);
          }
        }
        coHeightfieldScale(A) {
          const I = n.rawcolliderset_coHeightfieldScale(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        coHeightfieldNRows(A) {
          const I = n.rawcolliderset_coHeightfieldNRows(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        coHeightfieldNCols(A) {
          const I = n.rawcolliderset_coHeightfieldNCols(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        coParent(A) {
          try {
            const B = n.__wbindgen_add_to_stack_pointer(-16);
            n.rawcolliderset_coParent(B, this.__wbg_ptr, A);
            var I = qI().getInt32(B + 0, true), g = qI().getFloat64(B + 8, true);
            return I === 0 ? void 0 : g;
          } finally {
            n.__wbindgen_add_to_stack_pointer(16);
          }
        }
        coSetEnabled(A, I) {
          n.rawcolliderset_coSetEnabled(this.__wbg_ptr, A, I);
        }
        coIsEnabled(A) {
          return n.rawcolliderset_coIsEnabled(this.__wbg_ptr, A) !== 0;
        }
        coSetContactSkin(A, I) {
          n.rawcolliderset_coSetContactSkin(this.__wbg_ptr, A, I);
        }
        coContactSkin(A) {
          return n.rawcolliderset_coContactSkin(this.__wbg_ptr, A);
        }
        coFriction(A) {
          return n.rawcolliderset_coFriction(this.__wbg_ptr, A);
        }
        coRestitution(A) {
          return n.rawcolliderset_coRestitution(this.__wbg_ptr, A);
        }
        coDensity(A) {
          return n.rawcolliderset_coDensity(this.__wbg_ptr, A);
        }
        coMass(A) {
          return n.rawcolliderset_coMass(this.__wbg_ptr, A);
        }
        coVolume(A) {
          return n.rawcolliderset_coVolume(this.__wbg_ptr, A);
        }
        coCollisionGroups(A) {
          return n.rawcolliderset_coCollisionGroups(this.__wbg_ptr, A) >>> 0;
        }
        coSolverGroups(A) {
          return n.rawcolliderset_coSolverGroups(this.__wbg_ptr, A) >>> 0;
        }
        coActiveHooks(A) {
          return n.rawcolliderset_coActiveHooks(this.__wbg_ptr, A) >>> 0;
        }
        coActiveCollisionTypes(A) {
          return n.rawcolliderset_coActiveCollisionTypes(this.__wbg_ptr, A);
        }
        coActiveEvents(A) {
          return n.rawcolliderset_coActiveEvents(this.__wbg_ptr, A) >>> 0;
        }
        coContactForceEventThreshold(A) {
          return n.rawcolliderset_coContactForceEventThreshold(this.__wbg_ptr, A);
        }
        coContainsPoint(A, I) {
          return F(I, L), n.rawcolliderset_coContainsPoint(this.__wbg_ptr, A, I.__wbg_ptr) !== 0;
        }
        coCastShape(A, I, g, B, Q, E, i, o, t) {
          F(I, L), F(g, FA), F(B, L), F(Q, PA), F(E, L);
          const e = n.rawcolliderset_coCastShape(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E.__wbg_ptr, i, o, t);
          return e === 0 ? void 0 : ii.__wrap(e);
        }
        coCastCollider(A, I, g, B, Q, E, i) {
          F(I, L), F(B, L);
          const o = n.rawcolliderset_coCastCollider(this.__wbg_ptr, A, I.__wbg_ptr, g, B.__wbg_ptr, Q, E, i);
          return o === 0 ? void 0 : Ci.__wrap(o);
        }
        coIntersectsShape(A, I, g, B) {
          return F(I, FA), F(g, L), F(B, PA), n.rawcolliderset_coIntersectsShape(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr) !== 0;
        }
        coContactShape(A, I, g, B, Q) {
          F(I, FA), F(g, L), F(B, PA);
          const E = n.rawcolliderset_coContactShape(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q);
          return E === 0 ? void 0 : pQ.__wrap(E);
        }
        coContactCollider(A, I, g) {
          const B = n.rawcolliderset_coContactCollider(this.__wbg_ptr, A, I, g);
          return B === 0 ? void 0 : pQ.__wrap(B);
        }
        coProjectPoint(A, I, g) {
          F(I, L);
          const B = n.rawcolliderset_coProjectPoint(this.__wbg_ptr, A, I.__wbg_ptr, g);
          return Bi.__wrap(B);
        }
        coIntersectsRay(A, I, g, B) {
          return F(I, L), F(g, L), n.rawcolliderset_coIntersectsRay(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B) !== 0;
        }
        coCastRay(A, I, g, B, Q) {
          return F(I, L), F(g, L), n.rawcolliderset_coCastRay(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B, Q);
        }
        coCastRayAndGetNormal(A, I, g, B, Q) {
          F(I, L), F(g, L);
          const E = n.rawcolliderset_coCastRayAndGetNormal(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B, Q);
          return E === 0 ? void 0 : Ei.__wrap(E);
        }
        coSetSensor(A, I) {
          n.rawcolliderset_coSetSensor(this.__wbg_ptr, A, I);
        }
        coSetRestitution(A, I) {
          n.rawcolliderset_coSetRestitution(this.__wbg_ptr, A, I);
        }
        coSetFriction(A, I) {
          n.rawcolliderset_coSetFriction(this.__wbg_ptr, A, I);
        }
        coFrictionCombineRule(A) {
          return n.rawcolliderset_coFrictionCombineRule(this.__wbg_ptr, A) >>> 0;
        }
        coSetFrictionCombineRule(A, I) {
          n.rawcolliderset_coSetFrictionCombineRule(this.__wbg_ptr, A, I);
        }
        coRestitutionCombineRule(A) {
          return n.rawcolliderset_coRestitutionCombineRule(this.__wbg_ptr, A) >>> 0;
        }
        coSetRestitutionCombineRule(A, I) {
          n.rawcolliderset_coSetRestitutionCombineRule(this.__wbg_ptr, A, I);
        }
        coSetCollisionGroups(A, I) {
          n.rawcolliderset_coSetCollisionGroups(this.__wbg_ptr, A, I);
        }
        coSetSolverGroups(A, I) {
          n.rawcolliderset_coSetSolverGroups(this.__wbg_ptr, A, I);
        }
        coSetActiveHooks(A, I) {
          n.rawcolliderset_coSetActiveHooks(this.__wbg_ptr, A, I);
        }
        coSetActiveEvents(A, I) {
          n.rawcolliderset_coSetActiveEvents(this.__wbg_ptr, A, I);
        }
        coSetActiveCollisionTypes(A, I) {
          n.rawcolliderset_coSetActiveCollisionTypes(this.__wbg_ptr, A, I);
        }
        coSetShape(A, I) {
          F(I, FA), n.rawcolliderset_coSetShape(this.__wbg_ptr, A, I.__wbg_ptr);
        }
        coSetContactForceEventThreshold(A, I) {
          n.rawcolliderset_coSetContactForceEventThreshold(this.__wbg_ptr, A, I);
        }
        coSetDensity(A, I) {
          n.rawcolliderset_coSetDensity(this.__wbg_ptr, A, I);
        }
        coSetMass(A, I) {
          n.rawcolliderset_coSetMass(this.__wbg_ptr, A, I);
        }
        coSetMassProperties(A, I, g, B, Q) {
          F(g, L), F(B, L), F(Q, PA), n.rawcolliderset_coSetMassProperties(this.__wbg_ptr, A, I, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr);
        }
        constructor() {
          const A = n.rawcolliderset_new();
          return this.__wbg_ptr = A >>> 0, Ao.register(this, this.__wbg_ptr, this), this;
        }
        len() {
          return n.rawcolliderset_len(this.__wbg_ptr) >>> 0;
        }
        contains(A) {
          return n.rawcolliderset_contains(this.__wbg_ptr, A) !== 0;
        }
        createCollider(A, I, g, B, Q, E, i, o, t, e, s, a, r, c, S, h, D, U, M, k, p, R, Y, m, K) {
          try {
            const x = n.__wbindgen_add_to_stack_pointer(-16);
            F(I, FA), F(g, L), F(B, PA), F(i, L), F(o, L), F(t, PA), F(K, hI), n.rawcolliderset_createCollider(x, this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q, E, i.__wbg_ptr, o.__wbg_ptr, t.__wbg_ptr, e, s, a, r, c, S, h, D, U, M, k, p, R, Y, m, K.__wbg_ptr);
            var y = qI().getInt32(x + 0, true), q = qI().getFloat64(x + 8, true);
            return y === 0 ? void 0 : q;
          } finally {
            n.__wbindgen_add_to_stack_pointer(16);
          }
        }
        remove(A, I, g, B) {
          F(I, SC), F(g, hI), n.rawcolliderset_remove(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B);
        }
        isHandleValid(A) {
          return n.rawcolliderset_contains(this.__wbg_ptr, A) !== 0;
        }
        forEachColliderHandle(A) {
          try {
            n.rawcolliderset_forEachColliderHandle(this.__wbg_ptr, cI(A));
          } finally {
            AI[sI++] = void 0;
          }
        }
      }
      const ka = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawcollidershapecasthit_free(C >>> 0, 1));
      class Ci {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(Ci.prototype);
          return I.__wbg_ptr = A, ka.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, ka.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawcollidershapecasthit_free(A, 0);
        }
        colliderHandle() {
          return n.rawcharactercollision_handle(this.__wbg_ptr);
        }
        time_of_impact() {
          return n.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);
        }
        witness1() {
          const A = n.rawcollidershapecasthit_witness1(this.__wbg_ptr);
          return L.__wrap(A);
        }
        witness2() {
          const A = n.rawcollidershapecasthit_witness2(this.__wbg_ptr);
          return L.__wrap(A);
        }
        normal1() {
          const A = n.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);
          return L.__wrap(A);
        }
        normal2() {
          const A = n.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);
          return L.__wrap(A);
        }
      }
      const ya = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawcontactforceevent_free(C >>> 0, 1));
      class he {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(he.prototype);
          return I.__wbg_ptr = A, ya.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, ya.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawcontactforceevent_free(A, 0);
        }
        collider1() {
          return n.rawcharactercollision_handle(this.__wbg_ptr);
        }
        collider2() {
          return n.rawcontactforceevent_collider2(this.__wbg_ptr);
        }
        total_force() {
          const A = n.rawcontactforceevent_total_force(this.__wbg_ptr);
          return L.__wrap(A);
        }
        total_force_magnitude() {
          return n.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr);
        }
        max_force_direction() {
          const A = n.rawcontactforceevent_max_force_direction(this.__wbg_ptr);
          return L.__wrap(A);
        }
        max_force_magnitude() {
          return n.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr);
        }
      }
      const Ma = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawcontactmanifold_free(C >>> 0, 1));
      class we {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(we.prototype);
          return I.__wbg_ptr = A, Ma.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Ma.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawcontactmanifold_free(A, 0);
        }
        normal() {
          const A = n.rawcontactmanifold_normal(this.__wbg_ptr);
          return L.__wrap(A);
        }
        local_n1() {
          const A = n.rawcontactmanifold_local_n1(this.__wbg_ptr);
          return L.__wrap(A);
        }
        local_n2() {
          const A = n.rawcontactmanifold_local_n2(this.__wbg_ptr);
          return L.__wrap(A);
        }
        subshape1() {
          return n.rawcontactmanifold_subshape1(this.__wbg_ptr) >>> 0;
        }
        subshape2() {
          return n.rawcontactmanifold_subshape2(this.__wbg_ptr) >>> 0;
        }
        num_contacts() {
          return n.rawcontactmanifold_num_contacts(this.__wbg_ptr) >>> 0;
        }
        contact_local_p1(A) {
          const I = n.rawcontactmanifold_contact_local_p1(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        contact_local_p2(A) {
          const I = n.rawcontactmanifold_contact_local_p2(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        contact_dist(A) {
          return n.rawcontactmanifold_contact_dist(this.__wbg_ptr, A);
        }
        contact_fid1(A) {
          return n.rawcontactmanifold_contact_fid1(this.__wbg_ptr, A) >>> 0;
        }
        contact_fid2(A) {
          return n.rawcontactmanifold_contact_fid2(this.__wbg_ptr, A) >>> 0;
        }
        contact_impulse(A) {
          return n.rawcontactmanifold_contact_impulse(this.__wbg_ptr, A);
        }
        contact_tangent_impulse_x(A) {
          return n.rawcontactmanifold_contact_tangent_impulse_x(this.__wbg_ptr, A);
        }
        contact_tangent_impulse_y(A) {
          return n.rawcontactmanifold_contact_tangent_impulse_y(this.__wbg_ptr, A);
        }
        num_solver_contacts() {
          return n.rawcontactmanifold_num_solver_contacts(this.__wbg_ptr) >>> 0;
        }
        solver_contact_point(A) {
          const I = n.rawcontactmanifold_solver_contact_point(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        solver_contact_dist(A) {
          return n.rawcontactmanifold_solver_contact_dist(this.__wbg_ptr, A);
        }
        solver_contact_friction(A) {
          return n.rawcontactmanifold_solver_contact_friction(this.__wbg_ptr, A);
        }
        solver_contact_restitution(A) {
          return n.rawcontactmanifold_solver_contact_restitution(this.__wbg_ptr, A);
        }
        solver_contact_tangent_velocity(A) {
          const I = n.rawcontactmanifold_solver_contact_tangent_velocity(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
      }
      const Ka = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawcontactpair_free(C >>> 0, 1));
      class ce {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(ce.prototype);
          return I.__wbg_ptr = A, Ka.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Ka.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawcontactpair_free(A, 0);
        }
        collider1() {
          return n.rawcontactpair_collider1(this.__wbg_ptr);
        }
        collider2() {
          return n.rawcontactpair_collider2(this.__wbg_ptr);
        }
        numContactManifolds() {
          return n.rawcontactpair_numContactManifolds(this.__wbg_ptr) >>> 0;
        }
        contactManifold(A) {
          const I = n.rawcontactpair_contactManifold(this.__wbg_ptr, A);
          return I === 0 ? void 0 : we.__wrap(I);
        }
      }
      const Ua = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawdebugrenderpipeline_free(C >>> 0, 1));
      class Xk {
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Ua.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawdebugrenderpipeline_free(A, 0);
        }
        constructor() {
          const A = n.rawdebugrenderpipeline_new();
          return this.__wbg_ptr = A >>> 0, Ua.register(this, this.__wbg_ptr, this), this;
        }
        vertices() {
          const A = n.rawdebugrenderpipeline_vertices(this.__wbg_ptr);
          return RQ(A);
        }
        colors() {
          const A = n.rawdebugrenderpipeline_colors(this.__wbg_ptr);
          return RQ(A);
        }
        render(A, I, g, B, Q, E, i) {
          try {
            F(A, hI), F(I, KI), F(g, cC), F(B, lC), F(Q, LI), n.rawdebugrenderpipeline_render(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E, cI(i));
          } finally {
            AI[sI++] = void 0;
          }
        }
      }
      const Na = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawdeserializedworld_free(C >>> 0, 1));
      class Se {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(Se.prototype);
          return I.__wbg_ptr = A, Na.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Na.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawdeserializedworld_free(A, 0);
        }
        takeGravity() {
          const A = n.rawdeserializedworld_takeGravity(this.__wbg_ptr);
          return A === 0 ? void 0 : L.__wrap(A);
        }
        takeIntegrationParameters() {
          const A = n.rawdeserializedworld_takeIntegrationParameters(this.__wbg_ptr);
          return A === 0 ? void 0 : CB.__wrap(A);
        }
        takeIslandManager() {
          const A = n.rawdeserializedworld_takeIslandManager(this.__wbg_ptr);
          return A === 0 ? void 0 : SC.__wrap(A);
        }
        takeBroadPhase() {
          const A = n.rawdeserializedworld_takeBroadPhase(this.__wbg_ptr);
          return A === 0 ? void 0 : wC.__wrap(A);
        }
        takeNarrowPhase() {
          const A = n.rawdeserializedworld_takeNarrowPhase(this.__wbg_ptr);
          return A === 0 ? void 0 : LI.__wrap(A);
        }
        takeBodies() {
          const A = n.rawdeserializedworld_takeBodies(this.__wbg_ptr);
          return A === 0 ? void 0 : hI.__wrap(A);
        }
        takeColliders() {
          const A = n.rawdeserializedworld_takeColliders(this.__wbg_ptr);
          return A === 0 ? void 0 : KI.__wrap(A);
        }
        takeImpulseJoints() {
          const A = n.rawdeserializedworld_takeImpulseJoints(this.__wbg_ptr);
          return A === 0 ? void 0 : cC.__wrap(A);
        }
        takeMultibodyJoints() {
          const A = n.rawdeserializedworld_takeMultibodyJoints(this.__wbg_ptr);
          return A === 0 ? void 0 : lC.__wrap(A);
        }
      }
      const Fa = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawdynamicraycastvehiclecontroller_free(C >>> 0, 1));
      class zk {
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Fa.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawdynamicraycastvehiclecontroller_free(A, 0);
        }
        constructor(A) {
          const I = n.rawdynamicraycastvehiclecontroller_new(A);
          return this.__wbg_ptr = I >>> 0, Fa.register(this, this.__wbg_ptr, this), this;
        }
        current_vehicle_speed() {
          return n.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr);
        }
        chassis() {
          return n.rawdynamicraycastvehiclecontroller_chassis(this.__wbg_ptr);
        }
        index_up_axis() {
          return n.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr) >>> 0;
        }
        set_index_up_axis(A) {
          n.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr, A);
        }
        index_forward_axis() {
          return n.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr) >>> 0;
        }
        set_index_forward_axis(A) {
          n.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr, A);
        }
        add_wheel(A, I, g, B, Q) {
          F(A, L), F(I, L), F(g, L), n.rawdynamicraycastvehiclecontroller_add_wheel(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B, Q);
        }
        num_wheels() {
          return n.rawdynamicraycastvehiclecontroller_num_wheels(this.__wbg_ptr) >>> 0;
        }
        update_vehicle(A, I, g, B, Q, E, i, o) {
          try {
            F(I, wC), F(g, LI), F(B, hI), F(Q, KI), n.rawdynamicraycastvehiclecontroller_update_vehicle(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E, RA(i) ? 4294967297 : i >>> 0, cI(o));
          } finally {
            AI[sI++] = void 0;
          }
        }
        wheel_chassis_connection_point_cs(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        set_wheel_chassis_connection_point_cs(A, I) {
          F(I, L), n.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs(this.__wbg_ptr, A, I.__wbg_ptr);
        }
        wheel_suspension_rest_length(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_suspension_rest_length(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length(this.__wbg_ptr, A, I);
        }
        wheel_max_suspension_travel(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_max_suspension_travel(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel(this.__wbg_ptr, A, I);
        }
        wheel_radius(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_radius(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_radius(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_radius(this.__wbg_ptr, A, I);
        }
        wheel_suspension_stiffness(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_suspension_stiffness(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness(this.__wbg_ptr, A, I);
        }
        wheel_suspension_compression(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_suspension_compression(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_suspension_compression(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression(this.__wbg_ptr, A, I);
        }
        wheel_suspension_relaxation(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_suspension_relaxation(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation(this.__wbg_ptr, A, I);
        }
        wheel_max_suspension_force(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_max_suspension_force(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force(this.__wbg_ptr, A, I);
        }
        wheel_brake(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_brake(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_brake(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_brake(this.__wbg_ptr, A, I);
        }
        wheel_steering(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_steering(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_steering(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_steering(this.__wbg_ptr, A, I);
        }
        wheel_engine_force(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_engine_force(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_engine_force(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_engine_force(this.__wbg_ptr, A, I);
        }
        wheel_direction_cs(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_direction_cs(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        set_wheel_direction_cs(A, I) {
          F(I, L), n.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs(this.__wbg_ptr, A, I.__wbg_ptr);
        }
        wheel_axle_cs(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_axle_cs(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        set_wheel_axle_cs(A, I) {
          F(I, L), n.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs(this.__wbg_ptr, A, I.__wbg_ptr);
        }
        wheel_friction_slip(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_friction_slip(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_friction_slip(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip(this.__wbg_ptr, A, I);
        }
        wheel_side_friction_stiffness(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        set_wheel_side_friction_stiffness(A, I) {
          n.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness(this.__wbg_ptr, A, I);
        }
        wheel_rotation(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_rotation(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        wheel_forward_impulse(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_forward_impulse(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        wheel_side_impulse(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_side_impulse(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        wheel_suspension_force(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_suspension_force(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        wheel_contact_normal_ws(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        wheel_contact_point_ws(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        wheel_suspension_length(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_suspension_length(this.__wbg_ptr, A);
          return I === 4294967297 ? void 0 : I;
        }
        wheel_hard_point_ws(A) {
          const I = n.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws(this.__wbg_ptr, A);
          return I === 0 ? void 0 : L.__wrap(I);
        }
        wheel_is_in_contact(A) {
          return n.rawdynamicraycastvehiclecontroller_wheel_is_in_contact(this.__wbg_ptr, A) !== 0;
        }
        wheel_ground_object(A) {
          try {
            const B = n.__wbindgen_add_to_stack_pointer(-16);
            n.rawdynamicraycastvehiclecontroller_wheel_ground_object(B, this.__wbg_ptr, A);
            var I = qI().getInt32(B + 0, true), g = qI().getFloat64(B + 8, true);
            return I === 0 ? void 0 : g;
          } finally {
            n.__wbindgen_add_to_stack_pointer(16);
          }
        }
      }
      const Ja = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_raweventqueue_free(C >>> 0, 1));
      class Bn {
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Ja.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_raweventqueue_free(A, 0);
        }
        constructor(A) {
          const I = n.raweventqueue_new(A);
          return this.__wbg_ptr = I >>> 0, Ja.register(this, this.__wbg_ptr, this), this;
        }
        drainCollisionEvents(A) {
          try {
            n.raweventqueue_drainCollisionEvents(this.__wbg_ptr, cI(A));
          } finally {
            AI[sI++] = void 0;
          }
        }
        drainContactForceEvents(A) {
          try {
            n.raweventqueue_drainContactForceEvents(this.__wbg_ptr, cI(A));
          } finally {
            AI[sI++] = void 0;
          }
        }
        clear() {
          n.raweventqueue_clear(this.__wbg_ptr);
        }
      }
      const Ra = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawgenericjoint_free(C >>> 0, 1));
      class OI {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(OI.prototype);
          return I.__wbg_ptr = A, Ra.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Ra.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawgenericjoint_free(A, 0);
        }
        static generic(A, I, g, B) {
          F(A, L), F(I, L), F(g, L);
          const Q = n.rawgenericjoint_generic(A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B);
          return Q === 0 ? void 0 : OI.__wrap(Q);
        }
        static spring(A, I, g, B, Q) {
          F(B, L), F(Q, L);
          const E = n.rawgenericjoint_spring(A, I, g, B.__wbg_ptr, Q.__wbg_ptr);
          return OI.__wrap(E);
        }
        static rope(A, I, g) {
          F(I, L), F(g, L);
          const B = n.rawgenericjoint_rope(A, I.__wbg_ptr, g.__wbg_ptr);
          return OI.__wrap(B);
        }
        static spherical(A, I) {
          F(A, L), F(I, L);
          const g = n.rawgenericjoint_spherical(A.__wbg_ptr, I.__wbg_ptr);
          return OI.__wrap(g);
        }
        static prismatic(A, I, g, B, Q, E) {
          F(A, L), F(I, L), F(g, L);
          const i = n.rawgenericjoint_prismatic(A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B, Q, E);
          return i === 0 ? void 0 : OI.__wrap(i);
        }
        static fixed(A, I, g, B) {
          F(A, L), F(I, PA), F(g, L), F(B, PA);
          const Q = n.rawgenericjoint_fixed(A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr);
          return OI.__wrap(Q);
        }
        static revolute(A, I, g) {
          F(A, L), F(I, L), F(g, L);
          const B = n.rawgenericjoint_revolute(A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr);
          return B === 0 ? void 0 : OI.__wrap(B);
        }
      }
      const Io = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawimpulsejointset_free(C >>> 0, 1));
      class cC {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(cC.prototype);
          return I.__wbg_ptr = A, Io.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Io.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawimpulsejointset_free(A, 0);
        }
        jointType(A) {
          return n.rawimpulsejointset_jointType(this.__wbg_ptr, A);
        }
        jointBodyHandle1(A) {
          return n.rawimpulsejointset_jointBodyHandle1(this.__wbg_ptr, A);
        }
        jointBodyHandle2(A) {
          return n.rawimpulsejointset_jointBodyHandle2(this.__wbg_ptr, A);
        }
        jointFrameX1(A) {
          const I = n.rawimpulsejointset_jointFrameX1(this.__wbg_ptr, A);
          return PA.__wrap(I);
        }
        jointFrameX2(A) {
          const I = n.rawimpulsejointset_jointFrameX2(this.__wbg_ptr, A);
          return PA.__wrap(I);
        }
        jointAnchor1(A) {
          const I = n.rawimpulsejointset_jointAnchor1(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        jointAnchor2(A) {
          const I = n.rawimpulsejointset_jointAnchor2(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        jointSetAnchor1(A, I) {
          F(I, L), n.rawimpulsejointset_jointSetAnchor1(this.__wbg_ptr, A, I.__wbg_ptr);
        }
        jointSetAnchor2(A, I) {
          F(I, L), n.rawimpulsejointset_jointSetAnchor2(this.__wbg_ptr, A, I.__wbg_ptr);
        }
        jointContactsEnabled(A) {
          return n.rawimpulsejointset_jointContactsEnabled(this.__wbg_ptr, A) !== 0;
        }
        jointSetContactsEnabled(A, I) {
          n.rawimpulsejointset_jointSetContactsEnabled(this.__wbg_ptr, A, I);
        }
        jointLimitsEnabled(A, I) {
          return n.rawimpulsejointset_jointLimitsEnabled(this.__wbg_ptr, A, I) !== 0;
        }
        jointLimitsMin(A, I) {
          return n.rawimpulsejointset_jointLimitsMin(this.__wbg_ptr, A, I);
        }
        jointLimitsMax(A, I) {
          return n.rawimpulsejointset_jointLimitsMax(this.__wbg_ptr, A, I);
        }
        jointSetLimits(A, I, g, B) {
          n.rawimpulsejointset_jointSetLimits(this.__wbg_ptr, A, I, g, B);
        }
        jointConfigureMotorModel(A, I, g) {
          n.rawimpulsejointset_jointConfigureMotorModel(this.__wbg_ptr, A, I, g);
        }
        jointConfigureMotorVelocity(A, I, g, B) {
          n.rawimpulsejointset_jointConfigureMotorVelocity(this.__wbg_ptr, A, I, g, B);
        }
        jointConfigureMotorPosition(A, I, g, B, Q) {
          n.rawimpulsejointset_jointConfigureMotorPosition(this.__wbg_ptr, A, I, g, B, Q);
        }
        jointConfigureMotor(A, I, g, B, Q, E) {
          n.rawimpulsejointset_jointConfigureMotor(this.__wbg_ptr, A, I, g, B, Q, E);
        }
        constructor() {
          const A = n.rawimpulsejointset_new();
          return this.__wbg_ptr = A >>> 0, Io.register(this, this.__wbg_ptr, this), this;
        }
        createJoint(A, I, g, B) {
          return F(A, OI), n.rawimpulsejointset_createJoint(this.__wbg_ptr, A.__wbg_ptr, I, g, B);
        }
        remove(A, I) {
          n.rawimpulsejointset_remove(this.__wbg_ptr, A, I);
        }
        len() {
          return n.rawimpulsejointset_len(this.__wbg_ptr) >>> 0;
        }
        contains(A) {
          return n.rawimpulsejointset_contains(this.__wbg_ptr, A) !== 0;
        }
        forEachJointHandle(A) {
          try {
            n.rawimpulsejointset_forEachJointHandle(this.__wbg_ptr, cI(A));
          } finally {
            AI[sI++] = void 0;
          }
        }
        forEachJointAttachedToRigidBody(A, I) {
          try {
            n.rawimpulsejointset_forEachJointAttachedToRigidBody(this.__wbg_ptr, A, cI(I));
          } finally {
            AI[sI++] = void 0;
          }
        }
      }
      const go = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawintegrationparameters_free(C >>> 0, 1));
      class CB {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(CB.prototype);
          return I.__wbg_ptr = A, go.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, go.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawintegrationparameters_free(A, 0);
        }
        constructor() {
          const A = n.rawintegrationparameters_new();
          return this.__wbg_ptr = A >>> 0, go.register(this, this.__wbg_ptr, this), this;
        }
        get dt() {
          return n.rawintegrationparameters_dt(this.__wbg_ptr);
        }
        get contact_erp() {
          return n.rawintegrationparameters_contact_erp(this.__wbg_ptr);
        }
        get normalizedAllowedLinearError() {
          return n.rawintegrationparameters_normalizedAllowedLinearError(this.__wbg_ptr);
        }
        get normalizedPredictionDistance() {
          return n.rawintegrationparameters_normalizedPredictionDistance(this.__wbg_ptr);
        }
        get numSolverIterations() {
          return n.rawintegrationparameters_numSolverIterations(this.__wbg_ptr) >>> 0;
        }
        get numInternalPgsIterations() {
          return n.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr) >>> 0;
        }
        get minIslandSize() {
          return n.rawintegrationparameters_minIslandSize(this.__wbg_ptr) >>> 0;
        }
        get maxCcdSubsteps() {
          return n.rawintegrationparameters_maxCcdSubsteps(this.__wbg_ptr) >>> 0;
        }
        get lengthUnit() {
          return n.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr);
        }
        set dt(A) {
          n.rawintegrationparameters_set_dt(this.__wbg_ptr, A);
        }
        set contact_natural_frequency(A) {
          n.rawintegrationparameters_set_contact_natural_frequency(this.__wbg_ptr, A);
        }
        set normalizedAllowedLinearError(A) {
          n.rawintegrationparameters_set_normalizedAllowedLinearError(this.__wbg_ptr, A);
        }
        set normalizedPredictionDistance(A) {
          n.rawintegrationparameters_set_normalizedPredictionDistance(this.__wbg_ptr, A);
        }
        set numSolverIterations(A) {
          n.rawintegrationparameters_set_numSolverIterations(this.__wbg_ptr, A);
        }
        set numInternalPgsIterations(A) {
          n.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr, A);
        }
        set minIslandSize(A) {
          n.rawintegrationparameters_set_minIslandSize(this.__wbg_ptr, A);
        }
        set maxCcdSubsteps(A) {
          n.rawintegrationparameters_set_maxCcdSubsteps(this.__wbg_ptr, A);
        }
        set lengthUnit(A) {
          n.rawintegrationparameters_set_lengthUnit(this.__wbg_ptr, A);
        }
      }
      const Co = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawislandmanager_free(C >>> 0, 1));
      class SC {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(SC.prototype);
          return I.__wbg_ptr = A, Co.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Co.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawislandmanager_free(A, 0);
        }
        constructor() {
          const A = n.rawislandmanager_new();
          return this.__wbg_ptr = A >>> 0, Co.register(this, this.__wbg_ptr, this), this;
        }
        forEachActiveRigidBodyHandle(A) {
          try {
            n.rawislandmanager_forEachActiveRigidBodyHandle(this.__wbg_ptr, cI(A));
          } finally {
            AI[sI++] = void 0;
          }
        }
      }
      const pa = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawkinematiccharactercontroller_free(C >>> 0, 1));
      class $k {
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, pa.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawkinematiccharactercontroller_free(A, 0);
        }
        constructor(A) {
          const I = n.rawkinematiccharactercontroller_new(A);
          return this.__wbg_ptr = I >>> 0, pa.register(this, this.__wbg_ptr, this), this;
        }
        up() {
          const A = n.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);
          return L.__wrap(A);
        }
        setUp(A) {
          F(A, L), n.rawkinematiccharactercontroller_setUp(this.__wbg_ptr, A.__wbg_ptr);
        }
        normalNudgeFactor() {
          return n.rawkinematiccharactercontroller_normalNudgeFactor(this.__wbg_ptr);
        }
        setNormalNudgeFactor(A) {
          n.rawkinematiccharactercontroller_setNormalNudgeFactor(this.__wbg_ptr, A);
        }
        offset() {
          return n.rawkinematiccharactercontroller_offset(this.__wbg_ptr);
        }
        setOffset(A) {
          n.rawkinematiccharactercontroller_setOffset(this.__wbg_ptr, A);
        }
        slideEnabled() {
          return n.rawkinematiccharactercontroller_slideEnabled(this.__wbg_ptr) !== 0;
        }
        setSlideEnabled(A) {
          n.rawkinematiccharactercontroller_setSlideEnabled(this.__wbg_ptr, A);
        }
        autostepMaxHeight() {
          const A = n.rawkinematiccharactercontroller_autostepMaxHeight(this.__wbg_ptr);
          return A === 4294967297 ? void 0 : A;
        }
        autostepMinWidth() {
          const A = n.rawkinematiccharactercontroller_autostepMinWidth(this.__wbg_ptr);
          return A === 4294967297 ? void 0 : A;
        }
        autostepIncludesDynamicBodies() {
          const A = n.rawkinematiccharactercontroller_autostepIncludesDynamicBodies(this.__wbg_ptr);
          return A === 16777215 ? void 0 : A !== 0;
        }
        autostepEnabled() {
          return n.rawkinematiccharactercontroller_autostepEnabled(this.__wbg_ptr) !== 0;
        }
        enableAutostep(A, I, g) {
          n.rawkinematiccharactercontroller_enableAutostep(this.__wbg_ptr, A, I, g);
        }
        disableAutostep() {
          n.rawkinematiccharactercontroller_disableAutostep(this.__wbg_ptr);
        }
        maxSlopeClimbAngle() {
          return n.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr);
        }
        setMaxSlopeClimbAngle(A) {
          n.rawkinematiccharactercontroller_setMaxSlopeClimbAngle(this.__wbg_ptr, A);
        }
        minSlopeSlideAngle() {
          return n.rawkinematiccharactercontroller_minSlopeSlideAngle(this.__wbg_ptr);
        }
        setMinSlopeSlideAngle(A) {
          n.rawkinematiccharactercontroller_setMinSlopeSlideAngle(this.__wbg_ptr, A);
        }
        snapToGroundDistance() {
          const A = n.rawkinematiccharactercontroller_snapToGroundDistance(this.__wbg_ptr);
          return A === 4294967297 ? void 0 : A;
        }
        enableSnapToGround(A) {
          n.rawkinematiccharactercontroller_enableSnapToGround(this.__wbg_ptr, A);
        }
        disableSnapToGround() {
          n.rawkinematiccharactercontroller_disableSnapToGround(this.__wbg_ptr);
        }
        snapToGroundEnabled() {
          return n.rawkinematiccharactercontroller_snapToGroundEnabled(this.__wbg_ptr) !== 0;
        }
        computeColliderMovement(A, I, g, B, Q, E, i, o, t, e, s, a) {
          try {
            F(I, wC), F(g, LI), F(B, hI), F(Q, KI), F(i, L), n.rawkinematiccharactercontroller_computeColliderMovement(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E, i.__wbg_ptr, o, RA(t) ? 4294967297 : Math.fround(t), e, RA(s) ? 4294967297 : s >>> 0, cI(a));
          } finally {
            AI[sI++] = void 0;
          }
        }
        computedMovement() {
          const A = n.rawkinematiccharactercontroller_computedMovement(this.__wbg_ptr);
          return L.__wrap(A);
        }
        computedGrounded() {
          return n.rawkinematiccharactercontroller_computedGrounded(this.__wbg_ptr) !== 0;
        }
        numComputedCollisions() {
          return n.rawkinematiccharactercontroller_numComputedCollisions(this.__wbg_ptr) >>> 0;
        }
        computedCollision(A, I) {
          return F(I, Cn), n.rawkinematiccharactercontroller_computedCollision(this.__wbg_ptr, A, I.__wbg_ptr) !== 0;
        }
      }
      const Bo = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawmultibodyjointset_free(C >>> 0, 1));
      class lC {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(lC.prototype);
          return I.__wbg_ptr = A, Bo.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Bo.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawmultibodyjointset_free(A, 0);
        }
        jointType(A) {
          return n.rawmultibodyjointset_jointType(this.__wbg_ptr, A);
        }
        jointFrameX1(A) {
          const I = n.rawmultibodyjointset_jointFrameX1(this.__wbg_ptr, A);
          return PA.__wrap(I);
        }
        jointFrameX2(A) {
          const I = n.rawmultibodyjointset_jointFrameX2(this.__wbg_ptr, A);
          return PA.__wrap(I);
        }
        jointAnchor1(A) {
          const I = n.rawmultibodyjointset_jointAnchor1(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        jointAnchor2(A) {
          const I = n.rawmultibodyjointset_jointAnchor2(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        jointContactsEnabled(A) {
          return n.rawmultibodyjointset_jointContactsEnabled(this.__wbg_ptr, A) !== 0;
        }
        jointSetContactsEnabled(A, I) {
          n.rawmultibodyjointset_jointSetContactsEnabled(this.__wbg_ptr, A, I);
        }
        jointLimitsEnabled(A, I) {
          return n.rawmultibodyjointset_jointLimitsEnabled(this.__wbg_ptr, A, I) !== 0;
        }
        jointLimitsMin(A, I) {
          return n.rawmultibodyjointset_jointLimitsMin(this.__wbg_ptr, A, I);
        }
        jointLimitsMax(A, I) {
          return n.rawmultibodyjointset_jointLimitsMax(this.__wbg_ptr, A, I);
        }
        constructor() {
          const A = n.rawmultibodyjointset_new();
          return this.__wbg_ptr = A >>> 0, Bo.register(this, this.__wbg_ptr, this), this;
        }
        createJoint(A, I, g, B) {
          return F(A, OI), n.rawmultibodyjointset_createJoint(this.__wbg_ptr, A.__wbg_ptr, I, g, B);
        }
        remove(A, I) {
          n.rawmultibodyjointset_remove(this.__wbg_ptr, A, I);
        }
        contains(A) {
          return n.rawmultibodyjointset_contains(this.__wbg_ptr, A) !== 0;
        }
        forEachJointHandle(A) {
          try {
            n.rawmultibodyjointset_forEachJointHandle(this.__wbg_ptr, cI(A));
          } finally {
            AI[sI++] = void 0;
          }
        }
        forEachJointAttachedToRigidBody(A, I) {
          try {
            n.rawmultibodyjointset_forEachJointAttachedToRigidBody(this.__wbg_ptr, A, cI(I));
          } finally {
            AI[sI++] = void 0;
          }
        }
      }
      const Qo = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawnarrowphase_free(C >>> 0, 1));
      class LI {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(LI.prototype);
          return I.__wbg_ptr = A, Qo.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Qo.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawnarrowphase_free(A, 0);
        }
        constructor() {
          const A = n.rawnarrowphase_new();
          return this.__wbg_ptr = A >>> 0, Qo.register(this, this.__wbg_ptr, this), this;
        }
        contact_pairs_with(A, I) {
          n.rawnarrowphase_contact_pairs_with(this.__wbg_ptr, A, aI(I));
        }
        contact_pair(A, I) {
          const g = n.rawnarrowphase_contact_pair(this.__wbg_ptr, A, I);
          return g === 0 ? void 0 : ce.__wrap(g);
        }
        intersection_pairs_with(A, I) {
          n.rawnarrowphase_intersection_pairs_with(this.__wbg_ptr, A, aI(I));
        }
        intersection_pair(A, I) {
          return n.rawnarrowphase_intersection_pair(this.__wbg_ptr, A, I) !== 0;
        }
      }
      const da = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawphysicspipeline_free(C >>> 0, 1));
      class Ay {
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, da.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawphysicspipeline_free(A, 0);
        }
        constructor() {
          const A = n.rawphysicspipeline_new();
          return this.__wbg_ptr = A >>> 0, da.register(this, this.__wbg_ptr, this), this;
        }
        set_profiler_enabled(A) {
          n.rawphysicspipeline_set_profiler_enabled(this.__wbg_ptr, A);
        }
        is_profiler_enabled() {
          return n.rawphysicspipeline_is_profiler_enabled(this.__wbg_ptr) !== 0;
        }
        timing_step() {
          return n.rawphysicspipeline_timing_step(this.__wbg_ptr);
        }
        timing_collision_detection() {
          return n.rawphysicspipeline_timing_collision_detection(this.__wbg_ptr);
        }
        timing_broad_phase() {
          return n.rawphysicspipeline_timing_broad_phase(this.__wbg_ptr);
        }
        timing_narrow_phase() {
          return n.rawphysicspipeline_timing_narrow_phase(this.__wbg_ptr);
        }
        timing_solver() {
          return n.rawphysicspipeline_timing_solver(this.__wbg_ptr);
        }
        timing_velocity_assembly() {
          return n.rawphysicspipeline_timing_velocity_assembly(this.__wbg_ptr);
        }
        timing_velocity_resolution() {
          return n.rawphysicspipeline_timing_velocity_resolution(this.__wbg_ptr);
        }
        timing_velocity_update() {
          return n.rawphysicspipeline_timing_velocity_update(this.__wbg_ptr);
        }
        timing_velocity_writeback() {
          return n.rawphysicspipeline_timing_velocity_writeback(this.__wbg_ptr);
        }
        timing_ccd() {
          return n.rawphysicspipeline_timing_ccd(this.__wbg_ptr);
        }
        timing_ccd_toi_computation() {
          return n.rawphysicspipeline_timing_ccd_toi_computation(this.__wbg_ptr);
        }
        timing_ccd_broad_phase() {
          return n.rawphysicspipeline_timing_ccd_broad_phase(this.__wbg_ptr);
        }
        timing_ccd_narrow_phase() {
          return n.rawphysicspipeline_timing_ccd_narrow_phase(this.__wbg_ptr);
        }
        timing_ccd_solver() {
          return n.rawphysicspipeline_timing_ccd_solver(this.__wbg_ptr);
        }
        timing_island_construction() {
          return n.rawphysicspipeline_timing_island_construction(this.__wbg_ptr);
        }
        timing_user_changes() {
          return n.rawphysicspipeline_timing_user_changes(this.__wbg_ptr);
        }
        step(A, I, g, B, Q, E, i, o, t, e) {
          F(A, L), F(I, CB), F(g, SC), F(B, wC), F(Q, LI), F(E, hI), F(i, KI), F(o, cC), F(t, lC), F(e, ht), n.rawphysicspipeline_step(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E.__wbg_ptr, i.__wbg_ptr, o.__wbg_ptr, t.__wbg_ptr, e.__wbg_ptr);
        }
        stepWithEvents(A, I, g, B, Q, E, i, o, t, e, s, a, r, c) {
          F(A, L), F(I, CB), F(g, SC), F(B, wC), F(Q, LI), F(E, hI), F(i, KI), F(o, cC), F(t, lC), F(e, ht), F(s, Bn), n.rawphysicspipeline_stepWithEvents(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E.__wbg_ptr, i.__wbg_ptr, o.__wbg_ptr, t.__wbg_ptr, e.__wbg_ptr, s.__wbg_ptr, aI(a), aI(r), aI(c));
        }
      }
      const Ya = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawpidcontroller_free(C >>> 0, 1));
      class Iy {
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Ya.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawpidcontroller_free(A, 0);
        }
        constructor(A, I, g, B) {
          const Q = n.rawpidcontroller_new(A, I, g, B);
          return this.__wbg_ptr = Q >>> 0, Ya.register(this, this.__wbg_ptr, this), this;
        }
        set_kp(A, I) {
          n.rawpidcontroller_set_kp(this.__wbg_ptr, A, I);
        }
        set_ki(A, I) {
          n.rawpidcontroller_set_ki(this.__wbg_ptr, A, I);
        }
        set_kd(A, I) {
          n.rawpidcontroller_set_kd(this.__wbg_ptr, A, I);
        }
        set_axes_mask(A) {
          n.rawpidcontroller_set_axes_mask(this.__wbg_ptr, A);
        }
        reset_integrals() {
          n.rawpidcontroller_reset_integrals(this.__wbg_ptr);
        }
        apply_linear_correction(A, I, g, B, Q) {
          F(I, hI), F(B, L), F(Q, L), n.rawpidcontroller_apply_linear_correction(this.__wbg_ptr, A, I.__wbg_ptr, g, B.__wbg_ptr, Q.__wbg_ptr);
        }
        apply_angular_correction(A, I, g, B, Q) {
          F(I, hI), F(B, PA), F(Q, L), n.rawpidcontroller_apply_angular_correction(this.__wbg_ptr, A, I.__wbg_ptr, g, B.__wbg_ptr, Q.__wbg_ptr);
        }
        linear_correction(A, I, g, B, Q) {
          F(I, hI), F(B, L), F(Q, L);
          const E = n.rawpidcontroller_linear_correction(this.__wbg_ptr, A, I.__wbg_ptr, g, B.__wbg_ptr, Q.__wbg_ptr);
          return L.__wrap(E);
        }
        angular_correction(A, I, g, B, Q) {
          F(I, hI), F(B, PA), F(Q, L);
          const E = n.rawpidcontroller_angular_correction(this.__wbg_ptr, A, I.__wbg_ptr, g, B.__wbg_ptr, Q.__wbg_ptr);
          return L.__wrap(E);
        }
      }
      const qa = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawpointcolliderprojection_free(C >>> 0, 1));
      class bE {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(bE.prototype);
          return I.__wbg_ptr = A, qa.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, qa.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawpointcolliderprojection_free(A, 0);
        }
        colliderHandle() {
          return n.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr);
        }
        point() {
          const A = n.rawpointcolliderprojection_point(this.__wbg_ptr);
          return L.__wrap(A);
        }
        isInside() {
          return n.rawpointcolliderprojection_isInside(this.__wbg_ptr) !== 0;
        }
        featureType() {
          return n.rawpointcolliderprojection_featureType(this.__wbg_ptr);
        }
        featureId() {
          const A = n.rawpointcolliderprojection_featureId(this.__wbg_ptr);
          return A === 4294967297 ? void 0 : A;
        }
      }
      const La = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawpointprojection_free(C >>> 0, 1));
      class Bi {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(Bi.prototype);
          return I.__wbg_ptr = A, La.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, La.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawpointprojection_free(A, 0);
        }
        point() {
          const A = n.rawpointprojection_point(this.__wbg_ptr);
          return L.__wrap(A);
        }
        isInside() {
          return n.rawpointprojection_isInside(this.__wbg_ptr) !== 0;
        }
      }
      const fa = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawraycolliderhit_free(C >>> 0, 1));
      class le {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(le.prototype);
          return I.__wbg_ptr = A, fa.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, fa.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawraycolliderhit_free(A, 0);
        }
        colliderHandle() {
          return n.rawcharactercollision_handle(this.__wbg_ptr);
        }
        timeOfImpact() {
          return n.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);
        }
      }
      const ua = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawraycolliderintersection_free(C >>> 0, 1));
      class Qi {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(Qi.prototype);
          return I.__wbg_ptr = A, ua.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, ua.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawraycolliderintersection_free(A, 0);
        }
        colliderHandle() {
          return n.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr);
        }
        normal() {
          const A = n.rawcollidershapecasthit_witness1(this.__wbg_ptr);
          return L.__wrap(A);
        }
        time_of_impact() {
          return n.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);
        }
        featureType() {
          return n.rawpointcolliderprojection_featureType(this.__wbg_ptr);
        }
        featureId() {
          const A = n.rawpointcolliderprojection_featureId(this.__wbg_ptr);
          return A === 4294967297 ? void 0 : A;
        }
      }
      const Ha = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawrayintersection_free(C >>> 0, 1));
      class Ei {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(Ei.prototype);
          return I.__wbg_ptr = A, Ha.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Ha.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawrayintersection_free(A, 0);
        }
        normal() {
          const A = n.rawcollidershapecasthit_witness1(this.__wbg_ptr);
          return L.__wrap(A);
        }
        time_of_impact() {
          return n.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);
        }
        featureType() {
          return n.rawpointcolliderprojection_featureType(this.__wbg_ptr);
        }
        featureId() {
          const A = n.rawpointcolliderprojection_featureId(this.__wbg_ptr);
          return A === 4294967297 ? void 0 : A;
        }
      }
      const Eo = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawrigidbodyset_free(C >>> 0, 1));
      class hI {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(hI.prototype);
          return I.__wbg_ptr = A, Eo.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Eo.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawrigidbodyset_free(A, 0);
        }
        rbTranslation(A) {
          const I = n.rawrigidbodyset_rbTranslation(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        rbRotation(A) {
          const I = n.rawrigidbodyset_rbRotation(this.__wbg_ptr, A);
          return PA.__wrap(I);
        }
        rbSleep(A) {
          n.rawrigidbodyset_rbSleep(this.__wbg_ptr, A);
        }
        rbIsSleeping(A) {
          return n.rawrigidbodyset_rbIsSleeping(this.__wbg_ptr, A) !== 0;
        }
        rbIsMoving(A) {
          return n.rawrigidbodyset_rbIsMoving(this.__wbg_ptr, A) !== 0;
        }
        rbNextTranslation(A) {
          const I = n.rawrigidbodyset_rbNextTranslation(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        rbNextRotation(A) {
          const I = n.rawrigidbodyset_rbNextRotation(this.__wbg_ptr, A);
          return PA.__wrap(I);
        }
        rbSetTranslation(A, I, g, B, Q) {
          n.rawrigidbodyset_rbSetTranslation(this.__wbg_ptr, A, I, g, B, Q);
        }
        rbSetRotation(A, I, g, B, Q, E) {
          n.rawrigidbodyset_rbSetRotation(this.__wbg_ptr, A, I, g, B, Q, E);
        }
        rbSetLinvel(A, I, g) {
          F(I, L), n.rawrigidbodyset_rbSetLinvel(this.__wbg_ptr, A, I.__wbg_ptr, g);
        }
        rbSetAngvel(A, I, g) {
          F(I, L), n.rawrigidbodyset_rbSetAngvel(this.__wbg_ptr, A, I.__wbg_ptr, g);
        }
        rbSetNextKinematicTranslation(A, I, g, B) {
          n.rawrigidbodyset_rbSetNextKinematicTranslation(this.__wbg_ptr, A, I, g, B);
        }
        rbSetNextKinematicRotation(A, I, g, B, Q) {
          n.rawrigidbodyset_rbSetNextKinematicRotation(this.__wbg_ptr, A, I, g, B, Q);
        }
        rbRecomputeMassPropertiesFromColliders(A, I) {
          F(I, KI), n.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders(this.__wbg_ptr, A, I.__wbg_ptr);
        }
        rbSetAdditionalMass(A, I, g) {
          n.rawrigidbodyset_rbSetAdditionalMass(this.__wbg_ptr, A, I, g);
        }
        rbSetAdditionalMassProperties(A, I, g, B, Q, E) {
          F(g, L), F(B, L), F(Q, PA), n.rawrigidbodyset_rbSetAdditionalMassProperties(this.__wbg_ptr, A, I, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E);
        }
        rbLinvel(A) {
          const I = n.rawrigidbodyset_rbLinvel(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        rbAngvel(A) {
          const I = n.rawrigidbodyset_rbAngvel(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        rbVelocityAtPoint(A, I) {
          F(I, L);
          const g = n.rawrigidbodyset_rbVelocityAtPoint(this.__wbg_ptr, A, I.__wbg_ptr);
          return L.__wrap(g);
        }
        rbLockTranslations(A, I, g) {
          n.rawrigidbodyset_rbLockTranslations(this.__wbg_ptr, A, I, g);
        }
        rbSetEnabledTranslations(A, I, g, B, Q) {
          n.rawrigidbodyset_rbSetEnabledTranslations(this.__wbg_ptr, A, I, g, B, Q);
        }
        rbLockRotations(A, I, g) {
          n.rawrigidbodyset_rbLockRotations(this.__wbg_ptr, A, I, g);
        }
        rbSetEnabledRotations(A, I, g, B, Q) {
          n.rawrigidbodyset_rbSetEnabledRotations(this.__wbg_ptr, A, I, g, B, Q);
        }
        rbDominanceGroup(A) {
          return n.rawrigidbodyset_rbDominanceGroup(this.__wbg_ptr, A);
        }
        rbSetDominanceGroup(A, I) {
          n.rawrigidbodyset_rbSetDominanceGroup(this.__wbg_ptr, A, I);
        }
        rbEnableCcd(A, I) {
          n.rawrigidbodyset_rbEnableCcd(this.__wbg_ptr, A, I);
        }
        rbSetSoftCcdPrediction(A, I) {
          n.rawrigidbodyset_rbSetSoftCcdPrediction(this.__wbg_ptr, A, I);
        }
        rbMass(A) {
          return n.rawrigidbodyset_rbMass(this.__wbg_ptr, A);
        }
        rbInvMass(A) {
          return n.rawrigidbodyset_rbInvMass(this.__wbg_ptr, A);
        }
        rbEffectiveInvMass(A) {
          const I = n.rawrigidbodyset_rbEffectiveInvMass(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        rbLocalCom(A) {
          const I = n.rawrigidbodyset_rbLocalCom(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        rbWorldCom(A) {
          const I = n.rawrigidbodyset_rbWorldCom(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        rbInvPrincipalInertia(A) {
          const I = n.rawrigidbodyset_rbInvPrincipalInertia(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        rbPrincipalInertiaLocalFrame(A) {
          const I = n.rawrigidbodyset_rbPrincipalInertiaLocalFrame(this.__wbg_ptr, A);
          return PA.__wrap(I);
        }
        rbPrincipalInertia(A) {
          const I = n.rawrigidbodyset_rbPrincipalInertia(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        rbEffectiveWorldInvInertia(A) {
          const I = n.rawrigidbodyset_rbEffectiveWorldInvInertia(this.__wbg_ptr, A);
          return xE.__wrap(I);
        }
        rbEffectiveAngularInertia(A) {
          const I = n.rawrigidbodyset_rbEffectiveAngularInertia(this.__wbg_ptr, A);
          return xE.__wrap(I);
        }
        rbWakeUp(A) {
          n.rawrigidbodyset_rbWakeUp(this.__wbg_ptr, A);
        }
        rbIsCcdEnabled(A) {
          return n.rawrigidbodyset_rbIsCcdEnabled(this.__wbg_ptr, A) !== 0;
        }
        rbSoftCcdPrediction(A) {
          return n.rawrigidbodyset_rbSoftCcdPrediction(this.__wbg_ptr, A);
        }
        rbNumColliders(A) {
          return n.rawrigidbodyset_rbNumColliders(this.__wbg_ptr, A) >>> 0;
        }
        rbCollider(A, I) {
          return n.rawrigidbodyset_rbCollider(this.__wbg_ptr, A, I);
        }
        rbBodyType(A) {
          return n.rawrigidbodyset_rbBodyType(this.__wbg_ptr, A);
        }
        rbSetBodyType(A, I, g) {
          n.rawrigidbodyset_rbSetBodyType(this.__wbg_ptr, A, I, g);
        }
        rbIsFixed(A) {
          return n.rawrigidbodyset_rbIsFixed(this.__wbg_ptr, A) !== 0;
        }
        rbIsKinematic(A) {
          return n.rawrigidbodyset_rbIsKinematic(this.__wbg_ptr, A) !== 0;
        }
        rbIsDynamic(A) {
          return n.rawrigidbodyset_rbIsDynamic(this.__wbg_ptr, A) !== 0;
        }
        rbLinearDamping(A) {
          return n.rawrigidbodyset_rbLinearDamping(this.__wbg_ptr, A);
        }
        rbAngularDamping(A) {
          return n.rawrigidbodyset_rbAngularDamping(this.__wbg_ptr, A);
        }
        rbSetLinearDamping(A, I) {
          n.rawrigidbodyset_rbSetLinearDamping(this.__wbg_ptr, A, I);
        }
        rbSetAngularDamping(A, I) {
          n.rawrigidbodyset_rbSetAngularDamping(this.__wbg_ptr, A, I);
        }
        rbSetEnabled(A, I) {
          n.rawrigidbodyset_rbSetEnabled(this.__wbg_ptr, A, I);
        }
        rbIsEnabled(A) {
          return n.rawrigidbodyset_rbIsEnabled(this.__wbg_ptr, A) !== 0;
        }
        rbGravityScale(A) {
          return n.rawrigidbodyset_rbGravityScale(this.__wbg_ptr, A);
        }
        rbSetGravityScale(A, I, g) {
          n.rawrigidbodyset_rbSetGravityScale(this.__wbg_ptr, A, I, g);
        }
        rbResetForces(A, I) {
          n.rawrigidbodyset_rbResetForces(this.__wbg_ptr, A, I);
        }
        rbResetTorques(A, I) {
          n.rawrigidbodyset_rbResetTorques(this.__wbg_ptr, A, I);
        }
        rbAddForce(A, I, g) {
          F(I, L), n.rawrigidbodyset_rbAddForce(this.__wbg_ptr, A, I.__wbg_ptr, g);
        }
        rbApplyImpulse(A, I, g) {
          F(I, L), n.rawrigidbodyset_rbApplyImpulse(this.__wbg_ptr, A, I.__wbg_ptr, g);
        }
        rbAddTorque(A, I, g) {
          F(I, L), n.rawrigidbodyset_rbAddTorque(this.__wbg_ptr, A, I.__wbg_ptr, g);
        }
        rbApplyTorqueImpulse(A, I, g) {
          F(I, L), n.rawrigidbodyset_rbApplyTorqueImpulse(this.__wbg_ptr, A, I.__wbg_ptr, g);
        }
        rbAddForceAtPoint(A, I, g, B) {
          F(I, L), F(g, L), n.rawrigidbodyset_rbAddForceAtPoint(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B);
        }
        rbApplyImpulseAtPoint(A, I, g, B) {
          F(I, L), F(g, L), n.rawrigidbodyset_rbApplyImpulseAtPoint(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B);
        }
        rbAdditionalSolverIterations(A) {
          return n.rawrigidbodyset_rbAdditionalSolverIterations(this.__wbg_ptr, A) >>> 0;
        }
        rbSetAdditionalSolverIterations(A, I) {
          n.rawrigidbodyset_rbSetAdditionalSolverIterations(this.__wbg_ptr, A, I);
        }
        rbUserData(A) {
          return n.rawrigidbodyset_rbUserData(this.__wbg_ptr, A) >>> 0;
        }
        rbSetUserData(A, I) {
          n.rawrigidbodyset_rbSetUserData(this.__wbg_ptr, A, I);
        }
        rbUserForce(A) {
          const I = n.rawrigidbodyset_rbUserForce(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        rbUserTorque(A) {
          const I = n.rawrigidbodyset_rbUserTorque(this.__wbg_ptr, A);
          return L.__wrap(I);
        }
        constructor() {
          const A = n.rawrigidbodyset_new();
          return this.__wbg_ptr = A >>> 0, Eo.register(this, this.__wbg_ptr, this), this;
        }
        createRigidBody(A, I, g, B, Q, E, i, o, t, e, s, a, r, c, S, h, D, U, M, k, p, R, Y, m, K, y) {
          return F(I, L), F(g, PA), F(i, L), F(o, L), F(t, L), F(e, L), F(s, PA), n.rawrigidbodyset_createRigidBody(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B, Q, E, i.__wbg_ptr, o.__wbg_ptr, t.__wbg_ptr, e.__wbg_ptr, s.__wbg_ptr, a, r, c, S, h, D, U, M, k, p, R, Y, m, K, y);
        }
        remove(A, I, g, B, Q) {
          F(I, SC), F(g, KI), F(B, cC), F(Q, lC), n.rawrigidbodyset_remove(this.__wbg_ptr, A, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr);
        }
        len() {
          return n.rawrigidbodyset_len(this.__wbg_ptr) >>> 0;
        }
        contains(A) {
          return n.rawrigidbodyset_contains(this.__wbg_ptr, A) !== 0;
        }
        forEachRigidBodyHandle(A) {
          try {
            n.rawrigidbodyset_forEachRigidBodyHandle(this.__wbg_ptr, cI(A));
          } finally {
            AI[sI++] = void 0;
          }
        }
        propagateModifiedBodyPositionsToColliders(A) {
          F(A, KI), n.rawrigidbodyset_propagateModifiedBodyPositionsToColliders(this.__wbg_ptr, A.__wbg_ptr);
        }
      }
      const io = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawrotation_free(C >>> 0, 1));
      class PA {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(PA.prototype);
          return I.__wbg_ptr = A, io.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, io.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawrotation_free(A, 0);
        }
        constructor(A, I, g, B) {
          const Q = n.rawrotation_new(A, I, g, B);
          return this.__wbg_ptr = Q >>> 0, io.register(this, this.__wbg_ptr, this), this;
        }
        static identity() {
          const A = n.rawrotation_identity();
          return PA.__wrap(A);
        }
        get x() {
          return n.rawintegrationparameters_dt(this.__wbg_ptr);
        }
        get y() {
          return n.rawkinematiccharactercontroller_offset(this.__wbg_ptr);
        }
        get z() {
          return n.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);
        }
        get w() {
          return n.rawrotation_w(this.__wbg_ptr);
        }
      }
      const ma = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawsdpmatrix3_free(C >>> 0, 1));
      class xE {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(xE.prototype);
          return I.__wbg_ptr = A, ma.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, ma.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawsdpmatrix3_free(A, 0);
        }
        elements() {
          const A = n.rawsdpmatrix3_elements(this.__wbg_ptr);
          return RQ(A);
        }
      }
      const Ta = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawserializationpipeline_free(C >>> 0, 1));
      class gy {
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Ta.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawserializationpipeline_free(A, 0);
        }
        constructor() {
          const A = n.rawccdsolver_new();
          return this.__wbg_ptr = A >>> 0, Ta.register(this, this.__wbg_ptr, this), this;
        }
        serializeAll(A, I, g, B, Q, E, i, o, t) {
          F(A, L), F(I, CB), F(g, SC), F(B, wC), F(Q, LI), F(E, hI), F(i, KI), F(o, cC), F(t, lC);
          const e = n.rawserializationpipeline_serializeAll(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E.__wbg_ptr, i.__wbg_ptr, o.__wbg_ptr, t.__wbg_ptr);
          return RQ(e);
        }
        deserializeAll(A) {
          const I = n.rawserializationpipeline_deserializeAll(this.__wbg_ptr, aI(A));
          return I === 0 ? void 0 : Se.__wrap(I);
        }
      }
      const ba = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawshape_free(C >>> 0, 1));
      class FA {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(FA.prototype);
          return I.__wbg_ptr = A, ba.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, ba.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawshape_free(A, 0);
        }
        static cuboid(A, I, g) {
          const B = n.rawshape_cuboid(A, I, g);
          return FA.__wrap(B);
        }
        static roundCuboid(A, I, g, B) {
          const Q = n.rawshape_roundCuboid(A, I, g, B);
          return FA.__wrap(Q);
        }
        static ball(A) {
          const I = n.rawshape_ball(A);
          return FA.__wrap(I);
        }
        static halfspace(A) {
          F(A, L);
          const I = n.rawshape_halfspace(A.__wbg_ptr);
          return FA.__wrap(I);
        }
        static capsule(A, I) {
          const g = n.rawshape_capsule(A, I);
          return FA.__wrap(g);
        }
        static cylinder(A, I) {
          const g = n.rawshape_cylinder(A, I);
          return FA.__wrap(g);
        }
        static roundCylinder(A, I, g) {
          const B = n.rawshape_roundCylinder(A, I, g);
          return FA.__wrap(B);
        }
        static cone(A, I) {
          const g = n.rawshape_cone(A, I);
          return FA.__wrap(g);
        }
        static roundCone(A, I, g) {
          const B = n.rawshape_roundCone(A, I, g);
          return FA.__wrap(B);
        }
        static voxels(A, I) {
          F(A, L);
          const g = tQ(I, n.__wbindgen_export_2), B = Bg, Q = n.rawshape_voxels(A.__wbg_ptr, g, B);
          return FA.__wrap(Q);
        }
        static voxelsFromPoints(A, I) {
          F(A, L);
          const g = NC(I, n.__wbindgen_export_2), B = Bg, Q = n.rawshape_voxelsFromPoints(A.__wbg_ptr, g, B);
          return FA.__wrap(Q);
        }
        static polyline(A, I) {
          const g = NC(A, n.__wbindgen_export_2), B = Bg, Q = tQ(I, n.__wbindgen_export_2), E = Bg, i = n.rawshape_polyline(g, B, Q, E);
          return FA.__wrap(i);
        }
        static trimesh(A, I, g) {
          const B = NC(A, n.__wbindgen_export_2), Q = Bg, E = tQ(I, n.__wbindgen_export_2), i = Bg, o = n.rawshape_trimesh(B, Q, E, i, g);
          return o === 0 ? void 0 : FA.__wrap(o);
        }
        static heightfield(A, I, g, B, Q) {
          const E = NC(g, n.__wbindgen_export_2), i = Bg;
          F(B, L);
          const o = n.rawshape_heightfield(A, I, E, i, B.__wbg_ptr, Q);
          return FA.__wrap(o);
        }
        static segment(A, I) {
          F(A, L), F(I, L);
          const g = n.rawshape_segment(A.__wbg_ptr, I.__wbg_ptr);
          return FA.__wrap(g);
        }
        static triangle(A, I, g) {
          F(A, L), F(I, L), F(g, L);
          const B = n.rawshape_triangle(A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr);
          return FA.__wrap(B);
        }
        static roundTriangle(A, I, g, B) {
          F(A, L), F(I, L), F(g, L);
          const Q = n.rawshape_roundTriangle(A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B);
          return FA.__wrap(Q);
        }
        static convexHull(A) {
          const I = NC(A, n.__wbindgen_export_2), g = Bg, B = n.rawshape_convexHull(I, g);
          return B === 0 ? void 0 : FA.__wrap(B);
        }
        static roundConvexHull(A, I) {
          const g = NC(A, n.__wbindgen_export_2), B = Bg, Q = n.rawshape_roundConvexHull(g, B, I);
          return Q === 0 ? void 0 : FA.__wrap(Q);
        }
        static convexMesh(A, I) {
          const g = NC(A, n.__wbindgen_export_2), B = Bg, Q = tQ(I, n.__wbindgen_export_2), E = Bg, i = n.rawshape_convexMesh(g, B, Q, E);
          return i === 0 ? void 0 : FA.__wrap(i);
        }
        static roundConvexMesh(A, I, g) {
          const B = NC(A, n.__wbindgen_export_2), Q = Bg, E = tQ(I, n.__wbindgen_export_2), i = Bg, o = n.rawshape_roundConvexMesh(B, Q, E, i, g);
          return o === 0 ? void 0 : FA.__wrap(o);
        }
        castShape(A, I, g, B, Q, E, i, o, t, e) {
          F(A, L), F(I, PA), F(g, L), F(B, FA), F(Q, L), F(E, PA), F(i, L);
          const s = n.rawshape_castShape(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E.__wbg_ptr, i.__wbg_ptr, o, t, e);
          return s === 0 ? void 0 : ii.__wrap(s);
        }
        intersectsShape(A, I, g, B, Q) {
          return F(A, L), F(I, PA), F(g, FA), F(B, L), F(Q, PA), n.rawshape_intersectsShape(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr) !== 0;
        }
        contactShape(A, I, g, B, Q, E) {
          F(A, L), F(I, PA), F(g, FA), F(B, L), F(Q, PA);
          const i = n.rawshape_contactShape(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q.__wbg_ptr, E);
          return i === 0 ? void 0 : pQ.__wrap(i);
        }
        containsPoint(A, I, g) {
          return F(A, L), F(I, PA), F(g, L), n.rawshape_containsPoint(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr) !== 0;
        }
        projectPoint(A, I, g, B) {
          F(A, L), F(I, PA), F(g, L);
          const Q = n.rawshape_projectPoint(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B);
          return Bi.__wrap(Q);
        }
        intersectsRay(A, I, g, B, Q) {
          return F(A, L), F(I, PA), F(g, L), F(B, L), n.rawshape_intersectsRay(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q) !== 0;
        }
        castRay(A, I, g, B, Q, E) {
          return F(A, L), F(I, PA), F(g, L), F(B, L), n.rawshape_castRay(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q, E);
        }
        castRayAndGetNormal(A, I, g, B, Q, E) {
          F(A, L), F(I, PA), F(g, L), F(B, L);
          const i = n.rawshape_castRayAndGetNormal(this.__wbg_ptr, A.__wbg_ptr, I.__wbg_ptr, g.__wbg_ptr, B.__wbg_ptr, Q, E);
          return i === 0 ? void 0 : Ei.__wrap(i);
        }
      }
      const xa = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawshapecasthit_free(C >>> 0, 1));
      class ii {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(ii.prototype);
          return I.__wbg_ptr = A, xa.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, xa.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawshapecasthit_free(A, 0);
        }
        time_of_impact() {
          return n.rawintegrationparameters_dt(this.__wbg_ptr);
        }
        witness1() {
          const A = n.rawshapecasthit_witness1(this.__wbg_ptr);
          return L.__wrap(A);
        }
        witness2() {
          const A = n.rawcontactforceevent_total_force(this.__wbg_ptr);
          return L.__wrap(A);
        }
        normal1() {
          const A = n.rawshapecasthit_normal1(this.__wbg_ptr);
          return L.__wrap(A);
        }
        normal2() {
          const A = n.rawshapecasthit_normal2(this.__wbg_ptr);
          return L.__wrap(A);
        }
      }
      const Oa = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawshapecontact_free(C >>> 0, 1));
      class pQ {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(pQ.prototype);
          return I.__wbg_ptr = A, Oa.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, Oa.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawshapecontact_free(A, 0);
        }
        distance() {
          return n.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr);
        }
        point1() {
          const A = n.rawpointprojection_point(this.__wbg_ptr);
          return L.__wrap(A);
        }
        point2() {
          const A = n.rawcollidershapecasthit_witness1(this.__wbg_ptr);
          return L.__wrap(A);
        }
        normal1() {
          const A = n.rawcollidershapecasthit_witness2(this.__wbg_ptr);
          return L.__wrap(A);
        }
        normal2() {
          const A = n.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);
          return L.__wrap(A);
        }
      }
      const oo = typeof FinalizationRegistry > "u" ? {
        register: () => {
        },
        unregister: () => {
        }
      } : new FinalizationRegistry((C) => n.__wbg_rawvector_free(C >>> 0, 1));
      class L {
        static __wrap(A) {
          A = A >>> 0;
          const I = Object.create(L.prototype);
          return I.__wbg_ptr = A, oo.register(I, I.__wbg_ptr, I), I;
        }
        __destroy_into_raw() {
          const A = this.__wbg_ptr;
          return this.__wbg_ptr = 0, oo.unregister(this), A;
        }
        free() {
          const A = this.__destroy_into_raw();
          n.__wbg_rawvector_free(A, 0);
        }
        static zero() {
          const A = n.rawvector_zero();
          return L.__wrap(A);
        }
        constructor(A, I, g) {
          const B = n.rawvector_new(A, I, g);
          return this.__wbg_ptr = B >>> 0, oo.register(this, this.__wbg_ptr, this), this;
        }
        get x() {
          return n.rawintegrationparameters_dt(this.__wbg_ptr);
        }
        set x(A) {
          n.rawintegrationparameters_set_dt(this.__wbg_ptr, A);
        }
        get y() {
          return n.rawkinematiccharactercontroller_offset(this.__wbg_ptr);
        }
        set y(A) {
          n.rawvector_set_y(this.__wbg_ptr, A);
        }
        get z() {
          return n.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);
        }
        set z(A) {
          n.rawvector_set_z(this.__wbg_ptr, A);
        }
        xyz() {
          const A = n.rawvector_xyz(this.__wbg_ptr);
          return L.__wrap(A);
        }
        yxz() {
          const A = n.rawvector_yxz(this.__wbg_ptr);
          return L.__wrap(A);
        }
        zxy() {
          const A = n.rawvector_zxy(this.__wbg_ptr);
          return L.__wrap(A);
        }
        xzy() {
          const A = n.rawvector_xzy(this.__wbg_ptr);
          return L.__wrap(A);
        }
        yzx() {
          const A = n.rawvector_yzx(this.__wbg_ptr);
          return L.__wrap(A);
        }
        zyx() {
          const A = n.rawvector_zyx(this.__wbg_ptr);
          return L.__wrap(A);
        }
      }
      function Cy(C, A, I, g) {
        const B = $A(C).bind($A(A), $A(I), $A(g));
        return aI(B);
      }
      function By(C) {
        const A = $A(C).buffer;
        return aI(A);
      }
      function Qy() {
        return Ii(function(C, A) {
          const I = $A(C).call($A(A));
          return aI(I);
        }, arguments);
      }
      function Ey() {
        return Ii(function(C, A, I) {
          const g = $A(C).call($A(A), $A(I));
          return aI(g);
        }, arguments);
      }
      function iy() {
        return Ii(function(C, A, I, g) {
          const B = $A(C).call($A(A), $A(I), $A(g));
          return aI(B);
        }, arguments);
      }
      function oy() {
        return Ii(function(C, A, I, g, B) {
          const Q = $A(C).call($A(A), $A(I), $A(g), $A(B));
          return aI(Q);
        }, arguments);
      }
      function ty(C) {
        return $A(C).length;
      }
      function ey(C) {
        return $A(C).length;
      }
      function sy(C) {
        const A = new Uint8Array($A(C));
        return aI(A);
      }
      function ay(C, A) {
        const I = new Function(re(C, A));
        return aI(I);
      }
      function Dy(C, A, I) {
        const g = new Uint8Array($A(C), A >>> 0, I >>> 0);
        return aI(g);
      }
      function ny(C, A, I) {
        const g = new Float32Array($A(C), A >>> 0, I >>> 0);
        return aI(g);
      }
      function ry(C) {
        const A = new Float32Array(C >>> 0);
        return aI(A);
      }
      function hy(C) {
        return $A(C).now();
      }
      function wy(C) {
        const A = $A(C).performance;
        return aI(A);
      }
      function cy(C) {
        const A = he.__wrap(C);
        return aI(A);
      }
      function Sy(C) {
        const A = Qi.__wrap(C);
        return aI(A);
      }
      function ly(C, A, I) {
        $A(C).set($A(A), I >>> 0);
      }
      function Gy(C, A, I) {
        $A(C).set($A(A), I >>> 0);
      }
      function ky() {
        const C = typeof global > "u" ? null : global;
        return RA(C) ? 0 : aI(C);
      }
      function yy() {
        const C = typeof globalThis > "u" ? null : globalThis;
        return RA(C) ? 0 : aI(C);
      }
      function My() {
        const C = typeof self > "u" ? null : self;
        return RA(C) ? 0 : aI(C);
      }
      function Ky() {
        const C = typeof window > "u" ? null : window;
        return RA(C) ? 0 : aI(C);
      }
      function Uy(C) {
        const A = $A(C);
        return typeof A == "boolean" ? A ? 1 : 0 : 2;
      }
      function Ny(C) {
        return typeof $A(C) == "function";
      }
      function Fy(C) {
        return $A(C) === void 0;
      }
      function Jy() {
        const C = n.memory;
        return aI(C);
      }
      function Ry(C, A) {
        const I = $A(A), g = typeof I == "number" ? I : void 0;
        qI().setFloat64(C + 8, RA(g) ? 0 : g, true), qI().setInt32(C + 0, !RA(g), true);
      }
      function py(C) {
        return aI(C);
      }
      function dy(C) {
        const A = $A(C);
        return aI(A);
      }
      function Yy(C) {
        RQ(C);
      }
      function qy(C, A) {
        throw new Error(re(C, A));
      }
      URL = globalThis.URL;
      const w = await bk({
        "./rapier_wasm3d_bg.js": {
          __wbindgen_number_new: py,
          __wbindgen_boolean_get: Uy,
          __wbindgen_object_drop_ref: Yy,
          __wbindgen_number_get: Ry,
          __wbindgen_is_function: Ny,
          __wbg_rawraycolliderintersection_new: Sy,
          __wbg_rawcontactforceevent_new: cy,
          __wbg_performance_7a3ffd0b17f663ad: wy,
          __wbindgen_is_undefined: Fy,
          __wbg_now_2c95c9de01293173: hy,
          __wbindgen_object_clone_ref: dy,
          __wbg_newnoargs_105ed471475aaf50: ay,
          __wbg_call_672a4d21634d4a24: Qy,
          __wbg_call_7cccdd69e0791ae2: Ey,
          __wbg_call_833bed5770ea2041: iy,
          __wbg_call_b8adc8b1d0a0d8eb: oy,
          __wbg_bind_c8359b1cba058168: Cy,
          __wbg_buffer_609cc3eee51ed158: By,
          __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0: yy,
          __wbg_static_accessor_SELF_37c5d418e4bf5819: My,
          __wbg_static_accessor_WINDOW_5de37043a91a9c40: Ky,
          __wbg_static_accessor_GLOBAL_88a902d13a557d07: ky,
          __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a: Dy,
          __wbg_new_a12002a7f91c75be: sy,
          __wbg_set_65595bdd868b3009: Gy,
          __wbg_length_a446193dc22c12f8: ey,
          __wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354: ny,
          __wbg_set_10bad9bee0e9c58b: ly,
          __wbg_length_3b4f022188ae8db6: ty,
          __wbg_newwithlength_5a5efe313cfd59f1: ry,
          __wbindgen_throw: qy,
          __wbindgen_memory: Jy
        }
      }, Tk), Ly = w.memory, fy = w.version, uy = w.__wbg_rawkinematiccharactercontroller_free, Hy = w.rawkinematiccharactercontroller_new, my = w.rawkinematiccharactercontroller_setUp, Ty = w.rawkinematiccharactercontroller_normalNudgeFactor, by = w.rawkinematiccharactercontroller_setNormalNudgeFactor, xy = w.rawkinematiccharactercontroller_offset, Oy = w.rawkinematiccharactercontroller_setOffset, _y = w.rawkinematiccharactercontroller_slideEnabled, Zy = w.rawkinematiccharactercontroller_setSlideEnabled, vy = w.rawkinematiccharactercontroller_autostepMaxHeight, Py = w.rawkinematiccharactercontroller_autostepMinWidth, Wy = w.rawkinematiccharactercontroller_autostepIncludesDynamicBodies, jy = w.rawkinematiccharactercontroller_autostepEnabled, Vy = w.rawkinematiccharactercontroller_enableAutostep, Xy = w.rawkinematiccharactercontroller_disableAutostep, zy = w.rawkinematiccharactercontroller_maxSlopeClimbAngle, $y = w.rawkinematiccharactercontroller_setMaxSlopeClimbAngle, AM = w.rawkinematiccharactercontroller_minSlopeSlideAngle, IM = w.rawkinematiccharactercontroller_setMinSlopeSlideAngle, gM = w.rawkinematiccharactercontroller_snapToGroundDistance, CM = w.rawkinematiccharactercontroller_enableSnapToGround, BM = w.rawkinematiccharactercontroller_disableSnapToGround, QM = w.rawkinematiccharactercontroller_snapToGroundEnabled, EM = w.rawkinematiccharactercontroller_computeColliderMovement, iM = w.rawkinematiccharactercontroller_computedMovement, oM = w.rawkinematiccharactercontroller_computedGrounded, tM = w.rawkinematiccharactercontroller_numComputedCollisions, eM = w.rawkinematiccharactercontroller_computedCollision, sM = w.__wbg_rawcharactercollision_free, aM = w.rawcharactercollision_new, DM = w.rawcharactercollision_handle, nM = w.rawcharactercollision_translationDeltaApplied, rM = w.rawcharactercollision_translationDeltaRemaining, hM = w.rawcharactercollision_toi, wM = w.rawcharactercollision_worldWitness1, cM = w.rawcharactercollision_worldWitness2, SM = w.rawcharactercollision_worldNormal1, lM = w.rawcharactercollision_worldNormal2, GM = w.__wbg_rawpidcontroller_free, kM = w.rawpidcontroller_new, yM = w.rawpidcontroller_set_kp, MM = w.rawpidcontroller_set_ki, KM = w.rawpidcontroller_set_kd, UM = w.rawpidcontroller_set_axes_mask, NM = w.rawpidcontroller_reset_integrals, FM = w.rawpidcontroller_apply_linear_correction, JM = w.rawpidcontroller_apply_angular_correction, RM = w.rawpidcontroller_linear_correction, pM = w.rawpidcontroller_angular_correction, dM = w.__wbg_rawdynamicraycastvehiclecontroller_free, YM = w.rawdynamicraycastvehiclecontroller_new, qM = w.rawdynamicraycastvehiclecontroller_current_vehicle_speed, LM = w.rawdynamicraycastvehiclecontroller_chassis, fM = w.rawdynamicraycastvehiclecontroller_index_up_axis, uM = w.rawdynamicraycastvehiclecontroller_set_index_up_axis, HM = w.rawdynamicraycastvehiclecontroller_index_forward_axis, mM = w.rawdynamicraycastvehiclecontroller_set_index_forward_axis, TM = w.rawdynamicraycastvehiclecontroller_add_wheel, bM = w.rawdynamicraycastvehiclecontroller_num_wheels, xM = w.rawdynamicraycastvehiclecontroller_update_vehicle, OM = w.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs, _M = w.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs, ZM = w.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length, vM = w.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length, PM = w.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel, WM = w.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel, jM = w.rawdynamicraycastvehiclecontroller_wheel_radius, VM = w.rawdynamicraycastvehiclecontroller_set_wheel_radius, XM = w.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness, zM = w.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness, $M = w.rawdynamicraycastvehiclecontroller_wheel_suspension_compression, AK = w.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression, IK = w.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation, gK = w.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation, CK = w.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force, BK = w.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force, QK = w.rawdynamicraycastvehiclecontroller_wheel_brake, EK = w.rawdynamicraycastvehiclecontroller_set_wheel_brake, iK = w.rawdynamicraycastvehiclecontroller_wheel_steering, oK = w.rawdynamicraycastvehiclecontroller_set_wheel_steering, tK = w.rawdynamicraycastvehiclecontroller_wheel_engine_force, eK = w.rawdynamicraycastvehiclecontroller_set_wheel_engine_force, sK = w.rawdynamicraycastvehiclecontroller_wheel_direction_cs, aK = w.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs, DK = w.rawdynamicraycastvehiclecontroller_wheel_axle_cs, nK = w.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs, rK = w.rawdynamicraycastvehiclecontroller_wheel_friction_slip, hK = w.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip, wK = w.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness, cK = w.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness, SK = w.rawdynamicraycastvehiclecontroller_wheel_rotation, lK = w.rawdynamicraycastvehiclecontroller_wheel_forward_impulse, GK = w.rawdynamicraycastvehiclecontroller_wheel_side_impulse, kK = w.rawdynamicraycastvehiclecontroller_wheel_suspension_force, yK = w.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws, MK = w.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws, KK = w.rawdynamicraycastvehiclecontroller_wheel_suspension_length, UK = w.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws, NK = w.rawdynamicraycastvehiclecontroller_wheel_is_in_contact, FK = w.rawdynamicraycastvehiclecontroller_wheel_ground_object, JK = w.__wbg_rawccdsolver_free, RK = w.rawimpulsejointset_jointType, pK = w.rawimpulsejointset_jointBodyHandle1, dK = w.rawimpulsejointset_jointBodyHandle2, YK = w.rawimpulsejointset_jointFrameX1, qK = w.rawimpulsejointset_jointFrameX2, LK = w.rawimpulsejointset_jointAnchor1, fK = w.rawimpulsejointset_jointAnchor2, uK = w.rawimpulsejointset_jointSetAnchor1, HK = w.rawimpulsejointset_jointSetAnchor2, mK = w.rawimpulsejointset_jointContactsEnabled, TK = w.rawimpulsejointset_jointSetContactsEnabled, bK = w.rawimpulsejointset_jointLimitsEnabled, xK = w.rawimpulsejointset_jointLimitsMin, OK = w.rawimpulsejointset_jointLimitsMax, _K = w.rawimpulsejointset_jointSetLimits, ZK = w.rawimpulsejointset_jointConfigureMotorModel, vK = w.rawimpulsejointset_jointConfigureMotorVelocity, PK = w.rawimpulsejointset_jointConfigureMotorPosition, WK = w.rawimpulsejointset_jointConfigureMotor, jK = w.__wbg_rawimpulsejointset_free, VK = w.rawimpulsejointset_new, XK = w.rawimpulsejointset_createJoint, zK = w.rawimpulsejointset_remove, $K = w.rawimpulsejointset_len, AU = w.rawimpulsejointset_contains, IU = w.rawimpulsejointset_forEachJointHandle, gU = w.rawimpulsejointset_forEachJointAttachedToRigidBody, CU = w.__wbg_rawintegrationparameters_free, BU = w.rawintegrationparameters_new, QU = w.rawintegrationparameters_dt, EU = w.rawintegrationparameters_contact_erp, iU = w.rawintegrationparameters_normalizedAllowedLinearError, oU = w.rawintegrationparameters_normalizedPredictionDistance, tU = w.rawintegrationparameters_numSolverIterations, eU = w.rawintegrationparameters_minIslandSize, sU = w.rawintegrationparameters_maxCcdSubsteps, aU = w.rawintegrationparameters_set_dt, DU = w.rawintegrationparameters_set_contact_natural_frequency, nU = w.rawintegrationparameters_set_normalizedAllowedLinearError, rU = w.rawintegrationparameters_set_normalizedPredictionDistance, hU = w.rawintegrationparameters_set_numSolverIterations, wU = w.rawintegrationparameters_set_minIslandSize, cU = w.rawintegrationparameters_set_maxCcdSubsteps, SU = w.rawintegrationparameters_set_lengthUnit, lU = w.__wbg_rawislandmanager_free, GU = w.rawislandmanager_new, kU = w.rawislandmanager_forEachActiveRigidBodyHandle, yU = w.__wbg_rawgenericjoint_free, MU = w.rawgenericjoint_generic, KU = w.rawgenericjoint_spring, UU = w.rawgenericjoint_rope, NU = w.rawgenericjoint_spherical, FU = w.rawgenericjoint_prismatic, JU = w.rawgenericjoint_fixed, RU = w.rawgenericjoint_revolute, pU = w.rawmultibodyjointset_jointType, dU = w.rawmultibodyjointset_jointFrameX1, YU = w.rawmultibodyjointset_jointFrameX2, qU = w.rawmultibodyjointset_jointAnchor1, LU = w.rawmultibodyjointset_jointAnchor2, fU = w.rawmultibodyjointset_jointContactsEnabled, uU = w.rawmultibodyjointset_jointSetContactsEnabled, HU = w.rawmultibodyjointset_jointLimitsEnabled, mU = w.rawmultibodyjointset_jointLimitsMin, TU = w.rawmultibodyjointset_jointLimitsMax, bU = w.__wbg_rawmultibodyjointset_free, xU = w.rawmultibodyjointset_new, OU = w.rawmultibodyjointset_createJoint, _U = w.rawmultibodyjointset_remove, ZU = w.rawmultibodyjointset_contains, vU = w.rawmultibodyjointset_forEachJointHandle, PU = w.rawmultibodyjointset_forEachJointAttachedToRigidBody, WU = w.rawrigidbodyset_rbTranslation, jU = w.rawrigidbodyset_rbRotation, VU = w.rawrigidbodyset_rbSleep, XU = w.rawrigidbodyset_rbIsSleeping, zU = w.rawrigidbodyset_rbIsMoving, $U = w.rawrigidbodyset_rbNextTranslation, AN = w.rawrigidbodyset_rbNextRotation, IN = w.rawrigidbodyset_rbSetTranslation, gN = w.rawrigidbodyset_rbSetRotation, CN = w.rawrigidbodyset_rbSetLinvel, BN = w.rawrigidbodyset_rbSetAngvel, QN = w.rawrigidbodyset_rbSetNextKinematicTranslation, EN = w.rawrigidbodyset_rbSetNextKinematicRotation, iN = w.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders, oN = w.rawrigidbodyset_rbSetAdditionalMass, tN = w.rawrigidbodyset_rbSetAdditionalMassProperties, eN = w.rawrigidbodyset_rbLinvel, sN = w.rawrigidbodyset_rbAngvel, aN = w.rawrigidbodyset_rbVelocityAtPoint, DN = w.rawrigidbodyset_rbLockTranslations, nN = w.rawrigidbodyset_rbSetEnabledTranslations, rN = w.rawrigidbodyset_rbLockRotations, hN = w.rawrigidbodyset_rbSetEnabledRotations, wN = w.rawrigidbodyset_rbDominanceGroup, cN = w.rawrigidbodyset_rbSetDominanceGroup, SN = w.rawrigidbodyset_rbEnableCcd, lN = w.rawrigidbodyset_rbSetSoftCcdPrediction, GN = w.rawrigidbodyset_rbMass, kN = w.rawrigidbodyset_rbInvMass, yN = w.rawrigidbodyset_rbEffectiveInvMass, MN = w.rawrigidbodyset_rbLocalCom, KN = w.rawrigidbodyset_rbWorldCom, UN = w.rawrigidbodyset_rbInvPrincipalInertia, NN = w.rawrigidbodyset_rbPrincipalInertiaLocalFrame, FN = w.rawrigidbodyset_rbPrincipalInertia, JN = w.rawrigidbodyset_rbEffectiveWorldInvInertia, RN = w.rawrigidbodyset_rbEffectiveAngularInertia, pN = w.rawrigidbodyset_rbWakeUp, dN = w.rawrigidbodyset_rbIsCcdEnabled, YN = w.rawrigidbodyset_rbSoftCcdPrediction, qN = w.rawrigidbodyset_rbNumColliders, LN = w.rawrigidbodyset_rbCollider, fN = w.rawrigidbodyset_rbBodyType, uN = w.rawrigidbodyset_rbSetBodyType, HN = w.rawrigidbodyset_rbIsFixed, mN = w.rawrigidbodyset_rbIsKinematic, TN = w.rawrigidbodyset_rbIsDynamic, bN = w.rawrigidbodyset_rbLinearDamping, xN = w.rawrigidbodyset_rbAngularDamping, ON = w.rawrigidbodyset_rbSetLinearDamping, _N = w.rawrigidbodyset_rbSetAngularDamping, ZN = w.rawrigidbodyset_rbSetEnabled, vN = w.rawrigidbodyset_rbIsEnabled, PN = w.rawrigidbodyset_rbGravityScale, WN = w.rawrigidbodyset_rbSetGravityScale, jN = w.rawrigidbodyset_rbResetForces, VN = w.rawrigidbodyset_rbResetTorques, XN = w.rawrigidbodyset_rbAddForce, zN = w.rawrigidbodyset_rbApplyImpulse, $N = w.rawrigidbodyset_rbAddTorque, AF = w.rawrigidbodyset_rbApplyTorqueImpulse, IF = w.rawrigidbodyset_rbAddForceAtPoint, gF = w.rawrigidbodyset_rbApplyImpulseAtPoint, CF = w.rawrigidbodyset_rbAdditionalSolverIterations, BF = w.rawrigidbodyset_rbSetAdditionalSolverIterations, QF = w.rawrigidbodyset_rbUserData, EF = w.rawrigidbodyset_rbSetUserData, iF = w.rawrigidbodyset_rbUserForce, oF = w.rawrigidbodyset_rbUserTorque, tF = w.__wbg_rawrigidbodyset_free, eF = w.rawrigidbodyset_new, sF = w.rawrigidbodyset_createRigidBody, aF = w.rawrigidbodyset_remove, DF = w.rawrigidbodyset_len, nF = w.rawrigidbodyset_contains, rF = w.rawrigidbodyset_forEachRigidBodyHandle, hF = w.rawrigidbodyset_propagateModifiedBodyPositionsToColliders, wF = w.__wbg_rawbroadphase_free, cF = w.rawbroadphase_new, SF = w.rawbroadphase_castRay, lF = w.rawbroadphase_castRayAndGetNormal, GF = w.rawbroadphase_intersectionsWithRay, kF = w.rawbroadphase_intersectionWithShape, yF = w.rawbroadphase_projectPoint, MF = w.rawbroadphase_projectPointAndGetFeature, KF = w.rawbroadphase_intersectionsWithPoint, UF = w.rawbroadphase_castShape, NF = w.rawbroadphase_intersectionsWithShape, FF = w.rawbroadphase_collidersWithAabbIntersectingAabb, JF = w.rawcolliderset_coTranslation, RF = w.rawcolliderset_coRotation, pF = w.rawcolliderset_coTranslationWrtParent, dF = w.rawcolliderset_coRotationWrtParent, YF = w.rawcolliderset_coSetTranslation, qF = w.rawcolliderset_coSetTranslationWrtParent, LF = w.rawcolliderset_coSetRotation, fF = w.rawcolliderset_coSetRotationWrtParent, uF = w.rawcolliderset_coIsSensor, HF = w.rawcolliderset_coShapeType, mF = w.rawcolliderset_coHalfspaceNormal, TF = w.rawcolliderset_coHalfExtents, bF = w.rawcolliderset_coSetHalfExtents, xF = w.rawcolliderset_coRadius, OF = w.rawcolliderset_coSetRadius, _F = w.rawcolliderset_coHalfHeight, ZF = w.rawcolliderset_coSetHalfHeight, vF = w.rawcolliderset_coRoundRadius, PF = w.rawcolliderset_coSetRoundRadius, WF = w.rawcolliderset_coVoxelData, jF = w.rawcolliderset_coVoxelSize, VF = w.rawcolliderset_coSetVoxel, XF = w.rawcolliderset_coPropagateVoxelChange, zF = w.rawcolliderset_coCombineVoxelStates, $F = w.rawcolliderset_coVertices, AJ = w.rawcolliderset_coIndices, IJ = w.rawcolliderset_coTriMeshFlags, gJ = w.rawcolliderset_coHeightFieldFlags, CJ = w.rawcolliderset_coHeightfieldHeights, BJ = w.rawcolliderset_coHeightfieldScale, QJ = w.rawcolliderset_coHeightfieldNRows, EJ = w.rawcolliderset_coHeightfieldNCols, iJ = w.rawcolliderset_coParent, oJ = w.rawcolliderset_coSetEnabled, tJ = w.rawcolliderset_coIsEnabled, eJ = w.rawcolliderset_coSetContactSkin, sJ = w.rawcolliderset_coContactSkin, aJ = w.rawcolliderset_coFriction, DJ = w.rawcolliderset_coRestitution, nJ = w.rawcolliderset_coDensity, rJ = w.rawcolliderset_coMass, hJ = w.rawcolliderset_coVolume, wJ = w.rawcolliderset_coCollisionGroups, cJ = w.rawcolliderset_coSolverGroups, SJ = w.rawcolliderset_coActiveHooks, lJ = w.rawcolliderset_coActiveCollisionTypes, GJ = w.rawcolliderset_coActiveEvents, kJ = w.rawcolliderset_coContactForceEventThreshold, yJ = w.rawcolliderset_coContainsPoint, MJ = w.rawcolliderset_coCastShape, KJ = w.rawcolliderset_coCastCollider, UJ = w.rawcolliderset_coIntersectsShape, NJ = w.rawcolliderset_coContactShape, FJ = w.rawcolliderset_coContactCollider, JJ = w.rawcolliderset_coProjectPoint, RJ = w.rawcolliderset_coIntersectsRay, pJ = w.rawcolliderset_coCastRay, dJ = w.rawcolliderset_coCastRayAndGetNormal, YJ = w.rawcolliderset_coSetSensor, qJ = w.rawcolliderset_coSetRestitution, LJ = w.rawcolliderset_coSetFriction, fJ = w.rawcolliderset_coFrictionCombineRule, uJ = w.rawcolliderset_coSetFrictionCombineRule, HJ = w.rawcolliderset_coRestitutionCombineRule, mJ = w.rawcolliderset_coSetRestitutionCombineRule, TJ = w.rawcolliderset_coSetCollisionGroups, bJ = w.rawcolliderset_coSetSolverGroups, xJ = w.rawcolliderset_coSetActiveHooks, OJ = w.rawcolliderset_coSetActiveEvents, _J = w.rawcolliderset_coSetActiveCollisionTypes, ZJ = w.rawcolliderset_coSetShape, vJ = w.rawcolliderset_coSetContactForceEventThreshold, PJ = w.rawcolliderset_coSetDensity, WJ = w.rawcolliderset_coSetMass, jJ = w.rawcolliderset_coSetMassProperties, VJ = w.__wbg_rawcolliderset_free, XJ = w.rawcolliderset_new, zJ = w.rawcolliderset_len, $J = w.rawcolliderset_contains, A0 = w.rawcolliderset_createCollider, I0 = w.rawcolliderset_remove, g0 = w.rawcolliderset_forEachColliderHandle, C0 = w.__wbg_rawshapecontact_free, B0 = w.__wbg_rawnarrowphase_free, Q0 = w.rawnarrowphase_new, E0 = w.rawnarrowphase_contact_pairs_with, i0 = w.rawnarrowphase_contact_pair, o0 = w.rawnarrowphase_intersection_pairs_with, t0 = w.rawnarrowphase_intersection_pair, e0 = w.__wbg_rawcontactmanifold_free, s0 = w.rawcontactpair_collider1, a0 = w.rawcontactpair_collider2, D0 = w.rawcontactpair_numContactManifolds, n0 = w.rawcontactpair_contactManifold, r0 = w.rawcontactmanifold_normal, h0 = w.rawcontactmanifold_local_n1, w0 = w.rawcontactmanifold_local_n2, c0 = w.rawcontactmanifold_subshape1, S0 = w.rawcontactmanifold_subshape2, l0 = w.rawcontactmanifold_num_contacts, G0 = w.rawcontactmanifold_contact_local_p1, k0 = w.rawcontactmanifold_contact_local_p2, y0 = w.rawcontactmanifold_contact_dist, M0 = w.rawcontactmanifold_contact_fid1, K0 = w.rawcontactmanifold_contact_fid2, U0 = w.rawcontactmanifold_contact_impulse, N0 = w.rawcontactmanifold_contact_tangent_impulse_x, F0 = w.rawcontactmanifold_contact_tangent_impulse_y, J0 = w.rawcontactmanifold_num_solver_contacts, R0 = w.rawcontactmanifold_solver_contact_point, p0 = w.rawcontactmanifold_solver_contact_dist, d0 = w.rawcontactmanifold_solver_contact_friction, Y0 = w.rawcontactmanifold_solver_contact_restitution, q0 = w.rawcontactmanifold_solver_contact_tangent_velocity, L0 = w.__wbg_rawpointprojection_free, f0 = w.rawpointprojection_point, u0 = w.rawpointprojection_isInside, H0 = w.__wbg_rawpointcolliderprojection_free, m0 = w.rawpointcolliderprojection_colliderHandle, T0 = w.rawpointcolliderprojection_point, b0 = w.rawpointcolliderprojection_isInside, x0 = w.rawpointcolliderprojection_featureType, O0 = w.rawpointcolliderprojection_featureId, _0 = w.__wbg_rawrayintersection_free, Z0 = w.__wbg_rawraycolliderhit_free, v0 = w.__wbg_rawshape_free, P0 = w.rawshape_cuboid, W0 = w.rawshape_roundCuboid, j0 = w.rawshape_ball, V0 = w.rawshape_halfspace, X0 = w.rawshape_capsule, z0 = w.rawshape_cylinder, $0 = w.rawshape_roundCylinder, AR = w.rawshape_cone, IR = w.rawshape_roundCone, gR = w.rawshape_voxels, CR = w.rawshape_voxelsFromPoints, BR = w.rawshape_polyline, QR = w.rawshape_trimesh, ER = w.rawshape_heightfield, iR = w.rawshape_segment, oR = w.rawshape_triangle, tR = w.rawshape_roundTriangle, eR = w.rawshape_convexHull, sR = w.rawshape_roundConvexHull, aR = w.rawshape_convexMesh, DR = w.rawshape_roundConvexMesh, nR = w.rawshape_castShape, rR = w.rawshape_intersectsShape, hR = w.rawshape_contactShape, wR = w.rawshape_containsPoint, cR = w.rawshape_projectPoint, SR = w.rawshape_intersectsRay, lR = w.rawshape_castRay, GR = w.rawshape_castRayAndGetNormal, kR = w.__wbg_rawshapecasthit_free, yR = w.rawshapecasthit_witness1, MR = w.rawshapecasthit_normal1, KR = w.rawshapecasthit_normal2, UR = w.__wbg_rawcollidershapecasthit_free, NR = w.rawcollidershapecasthit_time_of_impact, FR = w.rawcollidershapecasthit_witness1, JR = w.rawcollidershapecasthit_witness2, RR = w.rawrotation_new, pR = w.rawrotation_identity, dR = w.rawrotation_w, YR = w.rawvector_zero, qR = w.rawvector_new, LR = w.rawvector_set_y, fR = w.rawvector_set_z, uR = w.rawvector_xyz, HR = w.rawvector_yxz, mR = w.rawvector_zxy, TR = w.rawvector_xzy, bR = w.rawvector_yzx, xR = w.rawvector_zyx, OR = w.rawsdpmatrix3_elements, _R = w.__wbg_rawdebugrenderpipeline_free, ZR = w.rawdebugrenderpipeline_new, vR = w.rawdebugrenderpipeline_vertices, PR = w.rawdebugrenderpipeline_colors, WR = w.rawdebugrenderpipeline_render, jR = w.__wbg_raweventqueue_free, VR = w.__wbg_rawcontactforceevent_free, XR = w.rawcontactforceevent_collider2, zR = w.rawcontactforceevent_total_force, $R = w.rawcontactforceevent_total_force_magnitude, Ap = w.rawcontactforceevent_max_force_direction, Ip = w.rawcontactforceevent_max_force_magnitude, gp = w.raweventqueue_new, Cp = w.raweventqueue_drainCollisionEvents, Bp = w.raweventqueue_drainContactForceEvents, Qp = w.raweventqueue_clear, Ep = w.__wbg_rawphysicspipeline_free, ip = w.rawphysicspipeline_new, op = w.rawphysicspipeline_set_profiler_enabled, tp = w.rawphysicspipeline_is_profiler_enabled, ep = w.rawphysicspipeline_timing_step, sp = w.rawphysicspipeline_timing_collision_detection, ap = w.rawphysicspipeline_timing_broad_phase, Dp = w.rawphysicspipeline_timing_narrow_phase, np = w.rawphysicspipeline_timing_solver, rp = w.rawphysicspipeline_timing_velocity_assembly, hp = w.rawphysicspipeline_timing_velocity_resolution, wp = w.rawphysicspipeline_timing_velocity_update, cp = w.rawphysicspipeline_timing_velocity_writeback, Sp = w.rawphysicspipeline_timing_ccd, lp = w.rawphysicspipeline_timing_ccd_toi_computation, Gp = w.rawphysicspipeline_timing_ccd_broad_phase, kp = w.rawphysicspipeline_timing_ccd_narrow_phase, yp = w.rawphysicspipeline_timing_ccd_solver, Mp = w.rawphysicspipeline_timing_island_construction, Kp = w.rawphysicspipeline_timing_user_changes, Up = w.rawphysicspipeline_step, Np = w.rawphysicspipeline_stepWithEvents, Fp = w.__wbg_rawdeserializedworld_free, Jp = w.rawdeserializedworld_takeGravity, Rp = w.rawdeserializedworld_takeIntegrationParameters, pp = w.rawdeserializedworld_takeIslandManager, dp = w.rawdeserializedworld_takeBroadPhase, Yp = w.rawdeserializedworld_takeNarrowPhase, qp = w.rawdeserializedworld_takeBodies, Lp = w.rawdeserializedworld_takeColliders, fp = w.rawdeserializedworld_takeImpulseJoints, up = w.rawdeserializedworld_takeMultibodyJoints, Hp = w.rawserializationpipeline_serializeAll, mp = w.rawserializationpipeline_deserializeAll, Tp = w.rawcolliderset_isHandleValid, bp = w.rawrayintersection_featureId, xp = w.rawraycolliderintersection_featureId, Op = w.rawintegrationparameters_set_numInternalPgsIterations, _p = w.rawvector_set_x, Zp = w.reserve_memory, vp = w.rawkinematiccharactercontroller_up, Pp = w.rawshapecontact_normal2, Wp = w.rawshapecontact_point1, jp = w.rawshapecontact_point2, Vp = w.rawrayintersection_normal, Xp = w.rawraycolliderintersection_normal, zp = w.rawshapecontact_normal1, $p = w.rawcollidershapecasthit_normal1, Ad = w.rawcollidershapecasthit_normal2, Id = w.rawshapecasthit_witness2, gd = w.rawintegrationparameters_numInternalPgsIterations, Cd = w.rawshapecontact_distance, Bd = w.rawrayintersection_featureType, Qd = w.rawraycolliderintersection_colliderHandle, Ed = w.rawrayintersection_time_of_impact, id = w.rawraycolliderintersection_featureType, od = w.rawraycolliderhit_colliderHandle, td = w.rawraycolliderintersection_time_of_impact, ed = w.rawshapecasthit_time_of_impact, sd = w.rawcollidershapecasthit_colliderHandle, ad = w.rawraycolliderhit_timeOfImpact, Dd = w.rawrotation_x, nd = w.rawrotation_y, rd = w.rawrotation_z, hd = w.rawvector_x, wd = w.rawvector_y, cd = w.rawvector_z, Sd = w.rawcontactforceevent_collider1, ld = w.rawintegrationparameters_lengthUnit, Gd = w.__wbg_rawcontactpair_free, kd = w.__wbg_rawraycolliderintersection_free, yd = w.__wbg_rawrotation_free, Md = w.__wbg_rawvector_free, Kd = w.__wbg_rawsdpmatrix3_free, Ud = w.__wbg_rawserializationpipeline_free, Nd = w.rawccdsolver_new, Fd = w.rawserializationpipeline_new, Jd = w.__wbindgen_export_0, Rd = w.__wbindgen_add_to_stack_pointer, pd = w.__wbindgen_export_1, dd = w.__wbindgen_export_2, Yd = Object.freeze(Object.defineProperty({
        __proto__: null,
        __wbg_rawbroadphase_free: wF,
        __wbg_rawccdsolver_free: JK,
        __wbg_rawcharactercollision_free: sM,
        __wbg_rawcolliderset_free: VJ,
        __wbg_rawcollidershapecasthit_free: UR,
        __wbg_rawcontactforceevent_free: VR,
        __wbg_rawcontactmanifold_free: e0,
        __wbg_rawcontactpair_free: Gd,
        __wbg_rawdebugrenderpipeline_free: _R,
        __wbg_rawdeserializedworld_free: Fp,
        __wbg_rawdynamicraycastvehiclecontroller_free: dM,
        __wbg_raweventqueue_free: jR,
        __wbg_rawgenericjoint_free: yU,
        __wbg_rawimpulsejointset_free: jK,
        __wbg_rawintegrationparameters_free: CU,
        __wbg_rawislandmanager_free: lU,
        __wbg_rawkinematiccharactercontroller_free: uy,
        __wbg_rawmultibodyjointset_free: bU,
        __wbg_rawnarrowphase_free: B0,
        __wbg_rawphysicspipeline_free: Ep,
        __wbg_rawpidcontroller_free: GM,
        __wbg_rawpointcolliderprojection_free: H0,
        __wbg_rawpointprojection_free: L0,
        __wbg_rawraycolliderhit_free: Z0,
        __wbg_rawraycolliderintersection_free: kd,
        __wbg_rawrayintersection_free: _0,
        __wbg_rawrigidbodyset_free: tF,
        __wbg_rawrotation_free: yd,
        __wbg_rawsdpmatrix3_free: Kd,
        __wbg_rawserializationpipeline_free: Ud,
        __wbg_rawshape_free: v0,
        __wbg_rawshapecasthit_free: kR,
        __wbg_rawshapecontact_free: C0,
        __wbg_rawvector_free: Md,
        __wbindgen_add_to_stack_pointer: Rd,
        __wbindgen_export_0: Jd,
        __wbindgen_export_1: pd,
        __wbindgen_export_2: dd,
        memory: Ly,
        rawbroadphase_castRay: SF,
        rawbroadphase_castRayAndGetNormal: lF,
        rawbroadphase_castShape: UF,
        rawbroadphase_collidersWithAabbIntersectingAabb: FF,
        rawbroadphase_intersectionWithShape: kF,
        rawbroadphase_intersectionsWithPoint: KF,
        rawbroadphase_intersectionsWithRay: GF,
        rawbroadphase_intersectionsWithShape: NF,
        rawbroadphase_new: cF,
        rawbroadphase_projectPoint: yF,
        rawbroadphase_projectPointAndGetFeature: MF,
        rawccdsolver_new: Nd,
        rawcharactercollision_handle: DM,
        rawcharactercollision_new: aM,
        rawcharactercollision_toi: hM,
        rawcharactercollision_translationDeltaApplied: nM,
        rawcharactercollision_translationDeltaRemaining: rM,
        rawcharactercollision_worldNormal1: SM,
        rawcharactercollision_worldNormal2: lM,
        rawcharactercollision_worldWitness1: wM,
        rawcharactercollision_worldWitness2: cM,
        rawcolliderset_coActiveCollisionTypes: lJ,
        rawcolliderset_coActiveEvents: GJ,
        rawcolliderset_coActiveHooks: SJ,
        rawcolliderset_coCastCollider: KJ,
        rawcolliderset_coCastRay: pJ,
        rawcolliderset_coCastRayAndGetNormal: dJ,
        rawcolliderset_coCastShape: MJ,
        rawcolliderset_coCollisionGroups: wJ,
        rawcolliderset_coCombineVoxelStates: zF,
        rawcolliderset_coContactCollider: FJ,
        rawcolliderset_coContactForceEventThreshold: kJ,
        rawcolliderset_coContactShape: NJ,
        rawcolliderset_coContactSkin: sJ,
        rawcolliderset_coContainsPoint: yJ,
        rawcolliderset_coDensity: nJ,
        rawcolliderset_coFriction: aJ,
        rawcolliderset_coFrictionCombineRule: fJ,
        rawcolliderset_coHalfExtents: TF,
        rawcolliderset_coHalfHeight: _F,
        rawcolliderset_coHalfspaceNormal: mF,
        rawcolliderset_coHeightFieldFlags: gJ,
        rawcolliderset_coHeightfieldHeights: CJ,
        rawcolliderset_coHeightfieldNCols: EJ,
        rawcolliderset_coHeightfieldNRows: QJ,
        rawcolliderset_coHeightfieldScale: BJ,
        rawcolliderset_coIndices: AJ,
        rawcolliderset_coIntersectsRay: RJ,
        rawcolliderset_coIntersectsShape: UJ,
        rawcolliderset_coIsEnabled: tJ,
        rawcolliderset_coIsSensor: uF,
        rawcolliderset_coMass: rJ,
        rawcolliderset_coParent: iJ,
        rawcolliderset_coProjectPoint: JJ,
        rawcolliderset_coPropagateVoxelChange: XF,
        rawcolliderset_coRadius: xF,
        rawcolliderset_coRestitution: DJ,
        rawcolliderset_coRestitutionCombineRule: HJ,
        rawcolliderset_coRotation: RF,
        rawcolliderset_coRotationWrtParent: dF,
        rawcolliderset_coRoundRadius: vF,
        rawcolliderset_coSetActiveCollisionTypes: _J,
        rawcolliderset_coSetActiveEvents: OJ,
        rawcolliderset_coSetActiveHooks: xJ,
        rawcolliderset_coSetCollisionGroups: TJ,
        rawcolliderset_coSetContactForceEventThreshold: vJ,
        rawcolliderset_coSetContactSkin: eJ,
        rawcolliderset_coSetDensity: PJ,
        rawcolliderset_coSetEnabled: oJ,
        rawcolliderset_coSetFriction: LJ,
        rawcolliderset_coSetFrictionCombineRule: uJ,
        rawcolliderset_coSetHalfExtents: bF,
        rawcolliderset_coSetHalfHeight: ZF,
        rawcolliderset_coSetMass: WJ,
        rawcolliderset_coSetMassProperties: jJ,
        rawcolliderset_coSetRadius: OF,
        rawcolliderset_coSetRestitution: qJ,
        rawcolliderset_coSetRestitutionCombineRule: mJ,
        rawcolliderset_coSetRotation: LF,
        rawcolliderset_coSetRotationWrtParent: fF,
        rawcolliderset_coSetRoundRadius: PF,
        rawcolliderset_coSetSensor: YJ,
        rawcolliderset_coSetShape: ZJ,
        rawcolliderset_coSetSolverGroups: bJ,
        rawcolliderset_coSetTranslation: YF,
        rawcolliderset_coSetTranslationWrtParent: qF,
        rawcolliderset_coSetVoxel: VF,
        rawcolliderset_coShapeType: HF,
        rawcolliderset_coSolverGroups: cJ,
        rawcolliderset_coTranslation: JF,
        rawcolliderset_coTranslationWrtParent: pF,
        rawcolliderset_coTriMeshFlags: IJ,
        rawcolliderset_coVertices: $F,
        rawcolliderset_coVolume: hJ,
        rawcolliderset_coVoxelData: WF,
        rawcolliderset_coVoxelSize: jF,
        rawcolliderset_contains: $J,
        rawcolliderset_createCollider: A0,
        rawcolliderset_forEachColliderHandle: g0,
        rawcolliderset_isHandleValid: Tp,
        rawcolliderset_len: zJ,
        rawcolliderset_new: XJ,
        rawcolliderset_remove: I0,
        rawcollidershapecasthit_colliderHandle: sd,
        rawcollidershapecasthit_normal1: $p,
        rawcollidershapecasthit_normal2: Ad,
        rawcollidershapecasthit_time_of_impact: NR,
        rawcollidershapecasthit_witness1: FR,
        rawcollidershapecasthit_witness2: JR,
        rawcontactforceevent_collider1: Sd,
        rawcontactforceevent_collider2: XR,
        rawcontactforceevent_max_force_direction: Ap,
        rawcontactforceevent_max_force_magnitude: Ip,
        rawcontactforceevent_total_force: zR,
        rawcontactforceevent_total_force_magnitude: $R,
        rawcontactmanifold_contact_dist: y0,
        rawcontactmanifold_contact_fid1: M0,
        rawcontactmanifold_contact_fid2: K0,
        rawcontactmanifold_contact_impulse: U0,
        rawcontactmanifold_contact_local_p1: G0,
        rawcontactmanifold_contact_local_p2: k0,
        rawcontactmanifold_contact_tangent_impulse_x: N0,
        rawcontactmanifold_contact_tangent_impulse_y: F0,
        rawcontactmanifold_local_n1: h0,
        rawcontactmanifold_local_n2: w0,
        rawcontactmanifold_normal: r0,
        rawcontactmanifold_num_contacts: l0,
        rawcontactmanifold_num_solver_contacts: J0,
        rawcontactmanifold_solver_contact_dist: p0,
        rawcontactmanifold_solver_contact_friction: d0,
        rawcontactmanifold_solver_contact_point: R0,
        rawcontactmanifold_solver_contact_restitution: Y0,
        rawcontactmanifold_solver_contact_tangent_velocity: q0,
        rawcontactmanifold_subshape1: c0,
        rawcontactmanifold_subshape2: S0,
        rawcontactpair_collider1: s0,
        rawcontactpair_collider2: a0,
        rawcontactpair_contactManifold: n0,
        rawcontactpair_numContactManifolds: D0,
        rawdebugrenderpipeline_colors: PR,
        rawdebugrenderpipeline_new: ZR,
        rawdebugrenderpipeline_render: WR,
        rawdebugrenderpipeline_vertices: vR,
        rawdeserializedworld_takeBodies: qp,
        rawdeserializedworld_takeBroadPhase: dp,
        rawdeserializedworld_takeColliders: Lp,
        rawdeserializedworld_takeGravity: Jp,
        rawdeserializedworld_takeImpulseJoints: fp,
        rawdeserializedworld_takeIntegrationParameters: Rp,
        rawdeserializedworld_takeIslandManager: pp,
        rawdeserializedworld_takeMultibodyJoints: up,
        rawdeserializedworld_takeNarrowPhase: Yp,
        rawdynamicraycastvehiclecontroller_add_wheel: TM,
        rawdynamicraycastvehiclecontroller_chassis: LM,
        rawdynamicraycastvehiclecontroller_current_vehicle_speed: qM,
        rawdynamicraycastvehiclecontroller_index_forward_axis: HM,
        rawdynamicraycastvehiclecontroller_index_up_axis: fM,
        rawdynamicraycastvehiclecontroller_new: YM,
        rawdynamicraycastvehiclecontroller_num_wheels: bM,
        rawdynamicraycastvehiclecontroller_set_index_forward_axis: mM,
        rawdynamicraycastvehiclecontroller_set_index_up_axis: uM,
        rawdynamicraycastvehiclecontroller_set_wheel_axle_cs: nK,
        rawdynamicraycastvehiclecontroller_set_wheel_brake: EK,
        rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs: _M,
        rawdynamicraycastvehiclecontroller_set_wheel_direction_cs: aK,
        rawdynamicraycastvehiclecontroller_set_wheel_engine_force: eK,
        rawdynamicraycastvehiclecontroller_set_wheel_friction_slip: hK,
        rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force: BK,
        rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel: WM,
        rawdynamicraycastvehiclecontroller_set_wheel_radius: VM,
        rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness: cK,
        rawdynamicraycastvehiclecontroller_set_wheel_steering: oK,
        rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression: AK,
        rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation: gK,
        rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length: vM,
        rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness: zM,
        rawdynamicraycastvehiclecontroller_update_vehicle: xM,
        rawdynamicraycastvehiclecontroller_wheel_axle_cs: DK,
        rawdynamicraycastvehiclecontroller_wheel_brake: QK,
        rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs: OM,
        rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws: yK,
        rawdynamicraycastvehiclecontroller_wheel_contact_point_ws: MK,
        rawdynamicraycastvehiclecontroller_wheel_direction_cs: sK,
        rawdynamicraycastvehiclecontroller_wheel_engine_force: tK,
        rawdynamicraycastvehiclecontroller_wheel_forward_impulse: lK,
        rawdynamicraycastvehiclecontroller_wheel_friction_slip: rK,
        rawdynamicraycastvehiclecontroller_wheel_ground_object: FK,
        rawdynamicraycastvehiclecontroller_wheel_hard_point_ws: UK,
        rawdynamicraycastvehiclecontroller_wheel_is_in_contact: NK,
        rawdynamicraycastvehiclecontroller_wheel_max_suspension_force: CK,
        rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel: PM,
        rawdynamicraycastvehiclecontroller_wheel_radius: jM,
        rawdynamicraycastvehiclecontroller_wheel_rotation: SK,
        rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness: wK,
        rawdynamicraycastvehiclecontroller_wheel_side_impulse: GK,
        rawdynamicraycastvehiclecontroller_wheel_steering: iK,
        rawdynamicraycastvehiclecontroller_wheel_suspension_compression: $M,
        rawdynamicraycastvehiclecontroller_wheel_suspension_force: kK,
        rawdynamicraycastvehiclecontroller_wheel_suspension_length: KK,
        rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation: IK,
        rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length: ZM,
        rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness: XM,
        raweventqueue_clear: Qp,
        raweventqueue_drainCollisionEvents: Cp,
        raweventqueue_drainContactForceEvents: Bp,
        raweventqueue_new: gp,
        rawgenericjoint_fixed: JU,
        rawgenericjoint_generic: MU,
        rawgenericjoint_prismatic: FU,
        rawgenericjoint_revolute: RU,
        rawgenericjoint_rope: UU,
        rawgenericjoint_spherical: NU,
        rawgenericjoint_spring: KU,
        rawimpulsejointset_contains: AU,
        rawimpulsejointset_createJoint: XK,
        rawimpulsejointset_forEachJointAttachedToRigidBody: gU,
        rawimpulsejointset_forEachJointHandle: IU,
        rawimpulsejointset_jointAnchor1: LK,
        rawimpulsejointset_jointAnchor2: fK,
        rawimpulsejointset_jointBodyHandle1: pK,
        rawimpulsejointset_jointBodyHandle2: dK,
        rawimpulsejointset_jointConfigureMotor: WK,
        rawimpulsejointset_jointConfigureMotorModel: ZK,
        rawimpulsejointset_jointConfigureMotorPosition: PK,
        rawimpulsejointset_jointConfigureMotorVelocity: vK,
        rawimpulsejointset_jointContactsEnabled: mK,
        rawimpulsejointset_jointFrameX1: YK,
        rawimpulsejointset_jointFrameX2: qK,
        rawimpulsejointset_jointLimitsEnabled: bK,
        rawimpulsejointset_jointLimitsMax: OK,
        rawimpulsejointset_jointLimitsMin: xK,
        rawimpulsejointset_jointSetAnchor1: uK,
        rawimpulsejointset_jointSetAnchor2: HK,
        rawimpulsejointset_jointSetContactsEnabled: TK,
        rawimpulsejointset_jointSetLimits: _K,
        rawimpulsejointset_jointType: RK,
        rawimpulsejointset_len: $K,
        rawimpulsejointset_new: VK,
        rawimpulsejointset_remove: zK,
        rawintegrationparameters_contact_erp: EU,
        rawintegrationparameters_dt: QU,
        rawintegrationparameters_lengthUnit: ld,
        rawintegrationparameters_maxCcdSubsteps: sU,
        rawintegrationparameters_minIslandSize: eU,
        rawintegrationparameters_new: BU,
        rawintegrationparameters_normalizedAllowedLinearError: iU,
        rawintegrationparameters_normalizedPredictionDistance: oU,
        rawintegrationparameters_numInternalPgsIterations: gd,
        rawintegrationparameters_numSolverIterations: tU,
        rawintegrationparameters_set_contact_natural_frequency: DU,
        rawintegrationparameters_set_dt: aU,
        rawintegrationparameters_set_lengthUnit: SU,
        rawintegrationparameters_set_maxCcdSubsteps: cU,
        rawintegrationparameters_set_minIslandSize: wU,
        rawintegrationparameters_set_normalizedAllowedLinearError: nU,
        rawintegrationparameters_set_normalizedPredictionDistance: rU,
        rawintegrationparameters_set_numInternalPgsIterations: Op,
        rawintegrationparameters_set_numSolverIterations: hU,
        rawislandmanager_forEachActiveRigidBodyHandle: kU,
        rawislandmanager_new: GU,
        rawkinematiccharactercontroller_autostepEnabled: jy,
        rawkinematiccharactercontroller_autostepIncludesDynamicBodies: Wy,
        rawkinematiccharactercontroller_autostepMaxHeight: vy,
        rawkinematiccharactercontroller_autostepMinWidth: Py,
        rawkinematiccharactercontroller_computeColliderMovement: EM,
        rawkinematiccharactercontroller_computedCollision: eM,
        rawkinematiccharactercontroller_computedGrounded: oM,
        rawkinematiccharactercontroller_computedMovement: iM,
        rawkinematiccharactercontroller_disableAutostep: Xy,
        rawkinematiccharactercontroller_disableSnapToGround: BM,
        rawkinematiccharactercontroller_enableAutostep: Vy,
        rawkinematiccharactercontroller_enableSnapToGround: CM,
        rawkinematiccharactercontroller_maxSlopeClimbAngle: zy,
        rawkinematiccharactercontroller_minSlopeSlideAngle: AM,
        rawkinematiccharactercontroller_new: Hy,
        rawkinematiccharactercontroller_normalNudgeFactor: Ty,
        rawkinematiccharactercontroller_numComputedCollisions: tM,
        rawkinematiccharactercontroller_offset: xy,
        rawkinematiccharactercontroller_setMaxSlopeClimbAngle: $y,
        rawkinematiccharactercontroller_setMinSlopeSlideAngle: IM,
        rawkinematiccharactercontroller_setNormalNudgeFactor: by,
        rawkinematiccharactercontroller_setOffset: Oy,
        rawkinematiccharactercontroller_setSlideEnabled: Zy,
        rawkinematiccharactercontroller_setUp: my,
        rawkinematiccharactercontroller_slideEnabled: _y,
        rawkinematiccharactercontroller_snapToGroundDistance: gM,
        rawkinematiccharactercontroller_snapToGroundEnabled: QM,
        rawkinematiccharactercontroller_up: vp,
        rawmultibodyjointset_contains: ZU,
        rawmultibodyjointset_createJoint: OU,
        rawmultibodyjointset_forEachJointAttachedToRigidBody: PU,
        rawmultibodyjointset_forEachJointHandle: vU,
        rawmultibodyjointset_jointAnchor1: qU,
        rawmultibodyjointset_jointAnchor2: LU,
        rawmultibodyjointset_jointContactsEnabled: fU,
        rawmultibodyjointset_jointFrameX1: dU,
        rawmultibodyjointset_jointFrameX2: YU,
        rawmultibodyjointset_jointLimitsEnabled: HU,
        rawmultibodyjointset_jointLimitsMax: TU,
        rawmultibodyjointset_jointLimitsMin: mU,
        rawmultibodyjointset_jointSetContactsEnabled: uU,
        rawmultibodyjointset_jointType: pU,
        rawmultibodyjointset_new: xU,
        rawmultibodyjointset_remove: _U,
        rawnarrowphase_contact_pair: i0,
        rawnarrowphase_contact_pairs_with: E0,
        rawnarrowphase_intersection_pair: t0,
        rawnarrowphase_intersection_pairs_with: o0,
        rawnarrowphase_new: Q0,
        rawphysicspipeline_is_profiler_enabled: tp,
        rawphysicspipeline_new: ip,
        rawphysicspipeline_set_profiler_enabled: op,
        rawphysicspipeline_step: Up,
        rawphysicspipeline_stepWithEvents: Np,
        rawphysicspipeline_timing_broad_phase: ap,
        rawphysicspipeline_timing_ccd: Sp,
        rawphysicspipeline_timing_ccd_broad_phase: Gp,
        rawphysicspipeline_timing_ccd_narrow_phase: kp,
        rawphysicspipeline_timing_ccd_solver: yp,
        rawphysicspipeline_timing_ccd_toi_computation: lp,
        rawphysicspipeline_timing_collision_detection: sp,
        rawphysicspipeline_timing_island_construction: Mp,
        rawphysicspipeline_timing_narrow_phase: Dp,
        rawphysicspipeline_timing_solver: np,
        rawphysicspipeline_timing_step: ep,
        rawphysicspipeline_timing_user_changes: Kp,
        rawphysicspipeline_timing_velocity_assembly: rp,
        rawphysicspipeline_timing_velocity_resolution: hp,
        rawphysicspipeline_timing_velocity_update: wp,
        rawphysicspipeline_timing_velocity_writeback: cp,
        rawpidcontroller_angular_correction: pM,
        rawpidcontroller_apply_angular_correction: JM,
        rawpidcontroller_apply_linear_correction: FM,
        rawpidcontroller_linear_correction: RM,
        rawpidcontroller_new: kM,
        rawpidcontroller_reset_integrals: NM,
        rawpidcontroller_set_axes_mask: UM,
        rawpidcontroller_set_kd: KM,
        rawpidcontroller_set_ki: MM,
        rawpidcontroller_set_kp: yM,
        rawpointcolliderprojection_colliderHandle: m0,
        rawpointcolliderprojection_featureId: O0,
        rawpointcolliderprojection_featureType: x0,
        rawpointcolliderprojection_isInside: b0,
        rawpointcolliderprojection_point: T0,
        rawpointprojection_isInside: u0,
        rawpointprojection_point: f0,
        rawraycolliderhit_colliderHandle: od,
        rawraycolliderhit_timeOfImpact: ad,
        rawraycolliderintersection_colliderHandle: Qd,
        rawraycolliderintersection_featureId: xp,
        rawraycolliderintersection_featureType: id,
        rawraycolliderintersection_normal: Xp,
        rawraycolliderintersection_time_of_impact: td,
        rawrayintersection_featureId: bp,
        rawrayintersection_featureType: Bd,
        rawrayintersection_normal: Vp,
        rawrayintersection_time_of_impact: Ed,
        rawrigidbodyset_contains: nF,
        rawrigidbodyset_createRigidBody: sF,
        rawrigidbodyset_forEachRigidBodyHandle: rF,
        rawrigidbodyset_len: DF,
        rawrigidbodyset_new: eF,
        rawrigidbodyset_propagateModifiedBodyPositionsToColliders: hF,
        rawrigidbodyset_rbAddForce: XN,
        rawrigidbodyset_rbAddForceAtPoint: IF,
        rawrigidbodyset_rbAddTorque: $N,
        rawrigidbodyset_rbAdditionalSolverIterations: CF,
        rawrigidbodyset_rbAngularDamping: xN,
        rawrigidbodyset_rbAngvel: sN,
        rawrigidbodyset_rbApplyImpulse: zN,
        rawrigidbodyset_rbApplyImpulseAtPoint: gF,
        rawrigidbodyset_rbApplyTorqueImpulse: AF,
        rawrigidbodyset_rbBodyType: fN,
        rawrigidbodyset_rbCollider: LN,
        rawrigidbodyset_rbDominanceGroup: wN,
        rawrigidbodyset_rbEffectiveAngularInertia: RN,
        rawrigidbodyset_rbEffectiveInvMass: yN,
        rawrigidbodyset_rbEffectiveWorldInvInertia: JN,
        rawrigidbodyset_rbEnableCcd: SN,
        rawrigidbodyset_rbGravityScale: PN,
        rawrigidbodyset_rbInvMass: kN,
        rawrigidbodyset_rbInvPrincipalInertia: UN,
        rawrigidbodyset_rbIsCcdEnabled: dN,
        rawrigidbodyset_rbIsDynamic: TN,
        rawrigidbodyset_rbIsEnabled: vN,
        rawrigidbodyset_rbIsFixed: HN,
        rawrigidbodyset_rbIsKinematic: mN,
        rawrigidbodyset_rbIsMoving: zU,
        rawrigidbodyset_rbIsSleeping: XU,
        rawrigidbodyset_rbLinearDamping: bN,
        rawrigidbodyset_rbLinvel: eN,
        rawrigidbodyset_rbLocalCom: MN,
        rawrigidbodyset_rbLockRotations: rN,
        rawrigidbodyset_rbLockTranslations: DN,
        rawrigidbodyset_rbMass: GN,
        rawrigidbodyset_rbNextRotation: AN,
        rawrigidbodyset_rbNextTranslation: $U,
        rawrigidbodyset_rbNumColliders: qN,
        rawrigidbodyset_rbPrincipalInertia: FN,
        rawrigidbodyset_rbPrincipalInertiaLocalFrame: NN,
        rawrigidbodyset_rbRecomputeMassPropertiesFromColliders: iN,
        rawrigidbodyset_rbResetForces: jN,
        rawrigidbodyset_rbResetTorques: VN,
        rawrigidbodyset_rbRotation: jU,
        rawrigidbodyset_rbSetAdditionalMass: oN,
        rawrigidbodyset_rbSetAdditionalMassProperties: tN,
        rawrigidbodyset_rbSetAdditionalSolverIterations: BF,
        rawrigidbodyset_rbSetAngularDamping: _N,
        rawrigidbodyset_rbSetAngvel: BN,
        rawrigidbodyset_rbSetBodyType: uN,
        rawrigidbodyset_rbSetDominanceGroup: cN,
        rawrigidbodyset_rbSetEnabled: ZN,
        rawrigidbodyset_rbSetEnabledRotations: hN,
        rawrigidbodyset_rbSetEnabledTranslations: nN,
        rawrigidbodyset_rbSetGravityScale: WN,
        rawrigidbodyset_rbSetLinearDamping: ON,
        rawrigidbodyset_rbSetLinvel: CN,
        rawrigidbodyset_rbSetNextKinematicRotation: EN,
        rawrigidbodyset_rbSetNextKinematicTranslation: QN,
        rawrigidbodyset_rbSetRotation: gN,
        rawrigidbodyset_rbSetSoftCcdPrediction: lN,
        rawrigidbodyset_rbSetTranslation: IN,
        rawrigidbodyset_rbSetUserData: EF,
        rawrigidbodyset_rbSleep: VU,
        rawrigidbodyset_rbSoftCcdPrediction: YN,
        rawrigidbodyset_rbTranslation: WU,
        rawrigidbodyset_rbUserData: QF,
        rawrigidbodyset_rbUserForce: iF,
        rawrigidbodyset_rbUserTorque: oF,
        rawrigidbodyset_rbVelocityAtPoint: aN,
        rawrigidbodyset_rbWakeUp: pN,
        rawrigidbodyset_rbWorldCom: KN,
        rawrigidbodyset_remove: aF,
        rawrotation_identity: pR,
        rawrotation_new: RR,
        rawrotation_w: dR,
        rawrotation_x: Dd,
        rawrotation_y: nd,
        rawrotation_z: rd,
        rawsdpmatrix3_elements: OR,
        rawserializationpipeline_deserializeAll: mp,
        rawserializationpipeline_new: Fd,
        rawserializationpipeline_serializeAll: Hp,
        rawshape_ball: j0,
        rawshape_capsule: X0,
        rawshape_castRay: lR,
        rawshape_castRayAndGetNormal: GR,
        rawshape_castShape: nR,
        rawshape_cone: AR,
        rawshape_contactShape: hR,
        rawshape_containsPoint: wR,
        rawshape_convexHull: eR,
        rawshape_convexMesh: aR,
        rawshape_cuboid: P0,
        rawshape_cylinder: z0,
        rawshape_halfspace: V0,
        rawshape_heightfield: ER,
        rawshape_intersectsRay: SR,
        rawshape_intersectsShape: rR,
        rawshape_polyline: BR,
        rawshape_projectPoint: cR,
        rawshape_roundCone: IR,
        rawshape_roundConvexHull: sR,
        rawshape_roundConvexMesh: DR,
        rawshape_roundCuboid: W0,
        rawshape_roundCylinder: $0,
        rawshape_roundTriangle: tR,
        rawshape_segment: iR,
        rawshape_triangle: oR,
        rawshape_trimesh: QR,
        rawshape_voxels: gR,
        rawshape_voxelsFromPoints: CR,
        rawshapecasthit_normal1: MR,
        rawshapecasthit_normal2: KR,
        rawshapecasthit_time_of_impact: ed,
        rawshapecasthit_witness1: yR,
        rawshapecasthit_witness2: Id,
        rawshapecontact_distance: Cd,
        rawshapecontact_normal1: zp,
        rawshapecontact_normal2: Pp,
        rawshapecontact_point1: Wp,
        rawshapecontact_point2: jp,
        rawvector_new: qR,
        rawvector_set_x: _p,
        rawvector_set_y: LR,
        rawvector_set_z: fR,
        rawvector_x: hd,
        rawvector_xyz: uR,
        rawvector_xzy: TR,
        rawvector_y: wd,
        rawvector_yxz: HR,
        rawvector_yzx: bR,
        rawvector_z: cd,
        rawvector_zero: YR,
        rawvector_zxy: mR,
        rawvector_zyx: xR,
        reserve_memory: Zp,
        version: fy
      }, Symbol.toStringTag, {
        value: "Module"
      }));
      xk(Yd);
      class Qn {
        constructor(A, I, g) {
          this.x = A, this.y = I, this.z = g;
        }
      }
      class f {
        static new(A, I, g) {
          return new Qn(A, I, g);
        }
        static intoRaw(A) {
          return new L(A.x, A.y, A.z);
        }
        static zeros() {
          return f.new(0, 0, 0);
        }
        static fromRaw(A) {
          if (!A) return null;
          let I = f.new(A.x, A.y, A.z);
          return A.free(), I;
        }
        static copy(A, I) {
          A.x = I.x, A.y = I.y, A.z = I.z;
        }
      }
      class wt {
        constructor(A, I, g, B) {
          this.x = A, this.y = I, this.z = g, this.w = B;
        }
      }
      class xA {
        static identity() {
          return new wt(0, 0, 0, 1);
        }
        static fromRaw(A) {
          if (!A) return null;
          let I = new wt(A.x, A.y, A.z, A.w);
          return A.free(), I;
        }
        static intoRaw(A) {
          return new PA(A.x, A.y, A.z, A.w);
        }
        static copy(A, I) {
          A.x = I.x, A.y = I.y, A.z = I.z, A.w = I.w;
        }
      }
      class En {
        get m11() {
          return this.elements[0];
        }
        get m12() {
          return this.elements[1];
        }
        get m21() {
          return this.m12;
        }
        get m13() {
          return this.elements[2];
        }
        get m31() {
          return this.m13;
        }
        get m22() {
          return this.elements[3];
        }
        get m23() {
          return this.elements[4];
        }
        get m32() {
          return this.m23;
        }
        get m33() {
          return this.elements[5];
        }
        constructor(A) {
          this.elements = A;
        }
      }
      class ct {
        static fromRaw(A) {
          const I = new En(A.elements());
          return A.free(), I;
        }
      }
      var Fg;
      (function(C) {
        C[C.Dynamic = 0] = "Dynamic", C[C.Fixed = 1] = "Fixed", C[C.KinematicPositionBased = 2] = "KinematicPositionBased", C[C.KinematicVelocityBased = 3] = "KinematicVelocityBased";
      })(Fg || (Fg = {}));
      class St {
        constructor(A, I, g) {
          this.rawSet = A, this.colliderSet = I, this.handle = g;
        }
        finalizeDeserialization(A) {
          this.colliderSet = A;
        }
        isValid() {
          return this.rawSet.contains(this.handle);
        }
        lockTranslations(A, I) {
          return this.rawSet.rbLockTranslations(this.handle, A, I);
        }
        lockRotations(A, I) {
          return this.rawSet.rbLockRotations(this.handle, A, I);
        }
        setEnabledTranslations(A, I, g, B) {
          return this.rawSet.rbSetEnabledTranslations(this.handle, A, I, g, B);
        }
        restrictTranslations(A, I, g, B) {
          this.setEnabledTranslations(A, I, g, B);
        }
        setEnabledRotations(A, I, g, B) {
          return this.rawSet.rbSetEnabledRotations(this.handle, A, I, g, B);
        }
        restrictRotations(A, I, g, B) {
          this.setEnabledRotations(A, I, g, B);
        }
        dominanceGroup() {
          return this.rawSet.rbDominanceGroup(this.handle);
        }
        setDominanceGroup(A) {
          this.rawSet.rbSetDominanceGroup(this.handle, A);
        }
        additionalSolverIterations() {
          return this.rawSet.rbAdditionalSolverIterations(this.handle);
        }
        setAdditionalSolverIterations(A) {
          this.rawSet.rbSetAdditionalSolverIterations(this.handle, A);
        }
        enableCcd(A) {
          this.rawSet.rbEnableCcd(this.handle, A);
        }
        setSoftCcdPrediction(A) {
          this.rawSet.rbSetSoftCcdPrediction(this.handle, A);
        }
        softCcdPrediction() {
          return this.rawSet.rbSoftCcdPrediction(this.handle);
        }
        translation() {
          let A = this.rawSet.rbTranslation(this.handle);
          return f.fromRaw(A);
        }
        rotation() {
          let A = this.rawSet.rbRotation(this.handle);
          return xA.fromRaw(A);
        }
        nextTranslation() {
          let A = this.rawSet.rbNextTranslation(this.handle);
          return f.fromRaw(A);
        }
        nextRotation() {
          let A = this.rawSet.rbNextRotation(this.handle);
          return xA.fromRaw(A);
        }
        setTranslation(A, I) {
          this.rawSet.rbSetTranslation(this.handle, A.x, A.y, A.z, I);
        }
        setLinvel(A, I) {
          let g = f.intoRaw(A);
          this.rawSet.rbSetLinvel(this.handle, g, I), g.free();
        }
        gravityScale() {
          return this.rawSet.rbGravityScale(this.handle);
        }
        setGravityScale(A, I) {
          this.rawSet.rbSetGravityScale(this.handle, A, I);
        }
        setRotation(A, I) {
          this.rawSet.rbSetRotation(this.handle, A.x, A.y, A.z, A.w, I);
        }
        setAngvel(A, I) {
          let g = f.intoRaw(A);
          this.rawSet.rbSetAngvel(this.handle, g, I), g.free();
        }
        setNextKinematicTranslation(A) {
          this.rawSet.rbSetNextKinematicTranslation(this.handle, A.x, A.y, A.z);
        }
        setNextKinematicRotation(A) {
          this.rawSet.rbSetNextKinematicRotation(this.handle, A.x, A.y, A.z, A.w);
        }
        linvel() {
          return f.fromRaw(this.rawSet.rbLinvel(this.handle));
        }
        velocityAtPoint(A) {
          const I = f.intoRaw(A);
          let g = f.fromRaw(this.rawSet.rbVelocityAtPoint(this.handle, I));
          return I.free(), g;
        }
        angvel() {
          return f.fromRaw(this.rawSet.rbAngvel(this.handle));
        }
        mass() {
          return this.rawSet.rbMass(this.handle);
        }
        effectiveInvMass() {
          return f.fromRaw(this.rawSet.rbEffectiveInvMass(this.handle));
        }
        invMass() {
          return this.rawSet.rbInvMass(this.handle);
        }
        localCom() {
          return f.fromRaw(this.rawSet.rbLocalCom(this.handle));
        }
        worldCom() {
          return f.fromRaw(this.rawSet.rbWorldCom(this.handle));
        }
        invPrincipalInertia() {
          return f.fromRaw(this.rawSet.rbInvPrincipalInertia(this.handle));
        }
        principalInertia() {
          return f.fromRaw(this.rawSet.rbPrincipalInertia(this.handle));
        }
        principalInertiaLocalFrame() {
          return xA.fromRaw(this.rawSet.rbPrincipalInertiaLocalFrame(this.handle));
        }
        effectiveWorldInvInertia() {
          return ct.fromRaw(this.rawSet.rbEffectiveWorldInvInertia(this.handle));
        }
        effectiveAngularInertia() {
          return ct.fromRaw(this.rawSet.rbEffectiveAngularInertia(this.handle));
        }
        sleep() {
          this.rawSet.rbSleep(this.handle);
        }
        wakeUp() {
          this.rawSet.rbWakeUp(this.handle);
        }
        isCcdEnabled() {
          return this.rawSet.rbIsCcdEnabled(this.handle);
        }
        numColliders() {
          return this.rawSet.rbNumColliders(this.handle);
        }
        collider(A) {
          return this.colliderSet.get(this.rawSet.rbCollider(this.handle, A));
        }
        setEnabled(A) {
          this.rawSet.rbSetEnabled(this.handle, A);
        }
        isEnabled() {
          return this.rawSet.rbIsEnabled(this.handle);
        }
        bodyType() {
          return this.rawSet.rbBodyType(this.handle);
        }
        setBodyType(A, I) {
          return this.rawSet.rbSetBodyType(this.handle, A, I);
        }
        isSleeping() {
          return this.rawSet.rbIsSleeping(this.handle);
        }
        isMoving() {
          return this.rawSet.rbIsMoving(this.handle);
        }
        isFixed() {
          return this.rawSet.rbIsFixed(this.handle);
        }
        isKinematic() {
          return this.rawSet.rbIsKinematic(this.handle);
        }
        isDynamic() {
          return this.rawSet.rbIsDynamic(this.handle);
        }
        linearDamping() {
          return this.rawSet.rbLinearDamping(this.handle);
        }
        angularDamping() {
          return this.rawSet.rbAngularDamping(this.handle);
        }
        setLinearDamping(A) {
          this.rawSet.rbSetLinearDamping(this.handle, A);
        }
        recomputeMassPropertiesFromColliders() {
          this.rawSet.rbRecomputeMassPropertiesFromColliders(this.handle, this.colliderSet.raw);
        }
        setAdditionalMass(A, I) {
          this.rawSet.rbSetAdditionalMass(this.handle, A, I);
        }
        setAdditionalMassProperties(A, I, g, B, Q) {
          let E = f.intoRaw(I), i = f.intoRaw(g), o = xA.intoRaw(B);
          this.rawSet.rbSetAdditionalMassProperties(this.handle, A, E, i, o, Q), E.free(), i.free(), o.free();
        }
        setAngularDamping(A) {
          this.rawSet.rbSetAngularDamping(this.handle, A);
        }
        resetForces(A) {
          this.rawSet.rbResetForces(this.handle, A);
        }
        resetTorques(A) {
          this.rawSet.rbResetTorques(this.handle, A);
        }
        addForce(A, I) {
          const g = f.intoRaw(A);
          this.rawSet.rbAddForce(this.handle, g, I), g.free();
        }
        applyImpulse(A, I) {
          const g = f.intoRaw(A);
          this.rawSet.rbApplyImpulse(this.handle, g, I), g.free();
        }
        addTorque(A, I) {
          const g = f.intoRaw(A);
          this.rawSet.rbAddTorque(this.handle, g, I), g.free();
        }
        applyTorqueImpulse(A, I) {
          const g = f.intoRaw(A);
          this.rawSet.rbApplyTorqueImpulse(this.handle, g, I), g.free();
        }
        addForceAtPoint(A, I, g) {
          const B = f.intoRaw(A), Q = f.intoRaw(I);
          this.rawSet.rbAddForceAtPoint(this.handle, B, Q, g), B.free(), Q.free();
        }
        applyImpulseAtPoint(A, I, g) {
          const B = f.intoRaw(A), Q = f.intoRaw(I);
          this.rawSet.rbApplyImpulseAtPoint(this.handle, B, Q, g), B.free(), Q.free();
        }
        userForce() {
          return f.fromRaw(this.rawSet.rbUserForce(this.handle));
        }
        userTorque() {
          return f.fromRaw(this.rawSet.rbUserTorque(this.handle));
        }
      }
      class bg {
        constructor(A) {
          this.enabled = true, this.status = A, this.translation = f.zeros(), this.rotation = xA.identity(), this.gravityScale = 1, this.linvel = f.zeros(), this.mass = 0, this.massOnly = false, this.centerOfMass = f.zeros(), this.translationsEnabledX = true, this.translationsEnabledY = true, this.angvel = f.zeros(), this.principalAngularInertia = f.zeros(), this.angularInertiaLocalFrame = xA.identity(), this.translationsEnabledZ = true, this.rotationsEnabledX = true, this.rotationsEnabledY = true, this.rotationsEnabledZ = true, this.linearDamping = 0, this.angularDamping = 0, this.canSleep = true, this.sleeping = false, this.ccdEnabled = false, this.softCcdPrediction = 0, this.dominanceGroup = 0, this.additionalSolverIterations = 0;
        }
        static dynamic() {
          return new bg(Fg.Dynamic);
        }
        static kinematicPositionBased() {
          return new bg(Fg.KinematicPositionBased);
        }
        static kinematicVelocityBased() {
          return new bg(Fg.KinematicVelocityBased);
        }
        static fixed() {
          return new bg(Fg.Fixed);
        }
        static newDynamic() {
          return new bg(Fg.Dynamic);
        }
        static newKinematicPositionBased() {
          return new bg(Fg.KinematicPositionBased);
        }
        static newKinematicVelocityBased() {
          return new bg(Fg.KinematicVelocityBased);
        }
        static newStatic() {
          return new bg(Fg.Fixed);
        }
        setDominanceGroup(A) {
          return this.dominanceGroup = A, this;
        }
        setAdditionalSolverIterations(A) {
          return this.additionalSolverIterations = A, this;
        }
        setEnabled(A) {
          return this.enabled = A, this;
        }
        setTranslation(A, I, g) {
          if (typeof A != "number" || typeof I != "number" || typeof g != "number") throw TypeError("The translation components must be numbers.");
          return this.translation = {
            x: A,
            y: I,
            z: g
          }, this;
        }
        setRotation(A) {
          return xA.copy(this.rotation, A), this;
        }
        setGravityScale(A) {
          return this.gravityScale = A, this;
        }
        setAdditionalMass(A) {
          return this.mass = A, this.massOnly = true, this;
        }
        setLinvel(A, I, g) {
          if (typeof A != "number" || typeof I != "number" || typeof g != "number") throw TypeError("The linvel components must be numbers.");
          return this.linvel = {
            x: A,
            y: I,
            z: g
          }, this;
        }
        setAngvel(A) {
          return f.copy(this.angvel, A), this;
        }
        setAdditionalMassProperties(A, I, g, B) {
          return this.mass = A, f.copy(this.centerOfMass, I), f.copy(this.principalAngularInertia, g), xA.copy(this.angularInertiaLocalFrame, B), this.massOnly = false, this;
        }
        enabledTranslations(A, I, g) {
          return this.translationsEnabledX = A, this.translationsEnabledY = I, this.translationsEnabledZ = g, this;
        }
        restrictTranslations(A, I, g) {
          return this.enabledTranslations(A, I, g);
        }
        lockTranslations() {
          return this.enabledTranslations(false, false, false);
        }
        enabledRotations(A, I, g) {
          return this.rotationsEnabledX = A, this.rotationsEnabledY = I, this.rotationsEnabledZ = g, this;
        }
        restrictRotations(A, I, g) {
          return this.enabledRotations(A, I, g);
        }
        lockRotations() {
          return this.restrictRotations(false, false, false);
        }
        setLinearDamping(A) {
          return this.linearDamping = A, this;
        }
        setAngularDamping(A) {
          return this.angularDamping = A, this;
        }
        setCanSleep(A) {
          return this.canSleep = A, this;
        }
        setSleeping(A) {
          return this.sleeping = A, this;
        }
        setCcdEnabled(A) {
          return this.ccdEnabled = A, this;
        }
        setSoftCcdPrediction(A) {
          return this.softCcdPrediction = A, this;
        }
        setUserData(A) {
          return this.userData = A, this;
        }
      }
      class oi {
        constructor() {
          this.fconv = new Float64Array(1), this.uconv = new Uint32Array(this.fconv.buffer), this.data = new Array(), this.size = 0;
        }
        set(A, I) {
          let g = this.index(A);
          for (; this.data.length <= g; ) this.data.push(null);
          this.data[g] == null && (this.size += 1), this.data[g] = I;
        }
        len() {
          return this.size;
        }
        delete(A) {
          let I = this.index(A);
          I < this.data.length && (this.data[I] != null && (this.size -= 1), this.data[I] = null);
        }
        clear() {
          this.data = new Array();
        }
        get(A) {
          let I = this.index(A);
          return I < this.data.length ? this.data[I] : null;
        }
        forEach(A) {
          for (const I of this.data) I != null && A(I);
        }
        getAll() {
          return this.data.filter((A) => A != null);
        }
        index(A) {
          return this.fconv[0] = A, this.uconv[0];
        }
      }
      class on {
        free() {
          this.raw && this.raw.free(), this.raw = void 0, this.map && this.map.clear(), this.map = void 0;
        }
        constructor(A) {
          this.raw = A || new hI(), this.map = new oi(), A && A.forEachRigidBodyHandle((I) => {
            this.map.set(I, new St(A, null, I));
          });
        }
        finalizeDeserialization(A) {
          this.map.forEach((I) => I.finalizeDeserialization(A));
        }
        createRigidBody(A, I) {
          let g = f.intoRaw(I.translation), B = xA.intoRaw(I.rotation), Q = f.intoRaw(I.linvel), E = f.intoRaw(I.centerOfMass), i = f.intoRaw(I.angvel), o = f.intoRaw(I.principalAngularInertia), t = xA.intoRaw(I.angularInertiaLocalFrame), e = this.raw.createRigidBody(I.enabled, g, B, I.gravityScale, I.mass, I.massOnly, E, Q, i, o, t, I.translationsEnabledX, I.translationsEnabledY, I.translationsEnabledZ, I.rotationsEnabledX, I.rotationsEnabledY, I.rotationsEnabledZ, I.linearDamping, I.angularDamping, I.status, I.canSleep, I.sleeping, I.softCcdPrediction, I.ccdEnabled, I.dominanceGroup, I.additionalSolverIterations);
          g.free(), B.free(), Q.free(), E.free(), i.free(), o.free(), t.free();
          const s = new St(this.raw, A, e);
          return s.userData = I.userData, this.map.set(e, s), s;
        }
        remove(A, I, g, B, Q) {
          for (let E = 0; E < this.raw.rbNumColliders(A); E += 1) g.unmap(this.raw.rbCollider(A, E));
          B.forEachJointHandleAttachedToRigidBody(A, (E) => B.unmap(E)), Q.forEachJointHandleAttachedToRigidBody(A, (E) => Q.unmap(E)), this.raw.remove(A, I.raw, g.raw, B.raw, Q.raw), this.map.delete(A);
        }
        len() {
          return this.map.len();
        }
        contains(A) {
          return this.get(A) != null;
        }
        get(A) {
          return this.map.get(A);
        }
        forEach(A) {
          this.map.forEach(A);
        }
        forEachActiveRigidBody(A, I) {
          A.forEachActiveRigidBodyHandle((g) => {
            I(this.get(g));
          });
        }
        getAll() {
          return this.map.getAll();
        }
      }
      class tn {
        constructor(A) {
          this.raw = A || new CB();
        }
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        get dt() {
          return this.raw.dt;
        }
        get contact_erp() {
          return this.raw.contact_erp;
        }
        get lengthUnit() {
          return this.raw.lengthUnit;
        }
        get normalizedAllowedLinearError() {
          return this.raw.normalizedAllowedLinearError;
        }
        get normalizedPredictionDistance() {
          return this.raw.normalizedPredictionDistance;
        }
        get numSolverIterations() {
          return this.raw.numSolverIterations;
        }
        get numInternalPgsIterations() {
          return this.raw.numInternalPgsIterations;
        }
        get minIslandSize() {
          return this.raw.minIslandSize;
        }
        get maxCcdSubsteps() {
          return this.raw.maxCcdSubsteps;
        }
        set dt(A) {
          this.raw.dt = A;
        }
        set contact_natural_frequency(A) {
          this.raw.contact_natural_frequency = A;
        }
        set lengthUnit(A) {
          this.raw.lengthUnit = A;
        }
        set normalizedAllowedLinearError(A) {
          this.raw.normalizedAllowedLinearError = A;
        }
        set normalizedPredictionDistance(A) {
          this.raw.normalizedPredictionDistance = A;
        }
        set numSolverIterations(A) {
          this.raw.numSolverIterations = A;
        }
        set numInternalPgsIterations(A) {
          this.raw.numInternalPgsIterations = A;
        }
        set minIslandSize(A) {
          this.raw.minIslandSize = A;
        }
        set maxCcdSubsteps(A) {
          this.raw.maxCcdSubsteps = A;
        }
      }
      var vI;
      (function(C) {
        C[C.Revolute = 0] = "Revolute", C[C.Fixed = 1] = "Fixed", C[C.Prismatic = 2] = "Prismatic", C[C.Rope = 3] = "Rope", C[C.Spring = 4] = "Spring", C[C.Spherical = 5] = "Spherical", C[C.Generic = 6] = "Generic";
      })(vI || (vI = {}));
      var lt;
      (function(C) {
        C[C.AccelerationBased = 0] = "AccelerationBased", C[C.ForceBased = 1] = "ForceBased";
      })(lt || (lt = {}));
      var Gt;
      (function(C) {
        C[C.LinX = 1] = "LinX", C[C.LinY = 2] = "LinY", C[C.LinZ = 4] = "LinZ", C[C.AngX = 8] = "AngX", C[C.AngY = 16] = "AngY", C[C.AngZ = 32] = "AngZ";
      })(Gt || (Gt = {}));
      class Lg {
        constructor(A, I, g) {
          this.rawSet = A, this.bodySet = I, this.handle = g;
        }
        static newTyped(A, I, g) {
          switch (A.jointType(g)) {
            case Jg.Revolute:
              return new nn(A, I, g);
            case Jg.Prismatic:
              return new Dn(A, I, g);
            case Jg.Fixed:
              return new en(A, I, g);
            case Jg.Spring:
              return new an(A, I, g);
            case Jg.Rope:
              return new sn(A, I, g);
            case Jg.Spherical:
              return new hn(A, I, g);
            case Jg.Generic:
              return new rn(A, I, g);
            default:
              return new Lg(A, I, g);
          }
        }
        finalizeDeserialization(A) {
          this.bodySet = A;
        }
        isValid() {
          return this.rawSet.contains(this.handle);
        }
        body1() {
          return this.bodySet.get(this.rawSet.jointBodyHandle1(this.handle));
        }
        body2() {
          return this.bodySet.get(this.rawSet.jointBodyHandle2(this.handle));
        }
        type() {
          return this.rawSet.jointType(this.handle);
        }
        frameX1() {
          return xA.fromRaw(this.rawSet.jointFrameX1(this.handle));
        }
        frameX2() {
          return xA.fromRaw(this.rawSet.jointFrameX2(this.handle));
        }
        anchor1() {
          return f.fromRaw(this.rawSet.jointAnchor1(this.handle));
        }
        anchor2() {
          return f.fromRaw(this.rawSet.jointAnchor2(this.handle));
        }
        setAnchor1(A) {
          const I = f.intoRaw(A);
          this.rawSet.jointSetAnchor1(this.handle, I), I.free();
        }
        setAnchor2(A) {
          const I = f.intoRaw(A);
          this.rawSet.jointSetAnchor2(this.handle, I), I.free();
        }
        setContactsEnabled(A) {
          this.rawSet.jointSetContactsEnabled(this.handle, A);
        }
        contactsEnabled() {
          return this.rawSet.jointContactsEnabled(this.handle);
        }
      }
      class Ge extends Lg {
        limitsEnabled() {
          return this.rawSet.jointLimitsEnabled(this.handle, this.rawAxis());
        }
        limitsMin() {
          return this.rawSet.jointLimitsMin(this.handle, this.rawAxis());
        }
        limitsMax() {
          return this.rawSet.jointLimitsMax(this.handle, this.rawAxis());
        }
        setLimits(A, I) {
          this.rawSet.jointSetLimits(this.handle, this.rawAxis(), A, I);
        }
        configureMotorModel(A) {
          this.rawSet.jointConfigureMotorModel(this.handle, this.rawAxis(), A);
        }
        configureMotorVelocity(A, I) {
          this.rawSet.jointConfigureMotorVelocity(this.handle, this.rawAxis(), A, I);
        }
        configureMotorPosition(A, I, g) {
          this.rawSet.jointConfigureMotorPosition(this.handle, this.rawAxis(), A, I, g);
        }
        configureMotor(A, I, g, B) {
          this.rawSet.jointConfigureMotor(this.handle, this.rawAxis(), A, I, g, B);
        }
      }
      class en extends Lg {
      }
      class sn extends Lg {
      }
      class an extends Lg {
      }
      class Dn extends Ge {
        rawAxis() {
          return gi.LinX;
        }
      }
      class nn extends Ge {
        rawAxis() {
          return gi.AngX;
        }
      }
      class rn extends Lg {
      }
      class hn extends Lg {
      }
      class eC {
        constructor() {
        }
        static fixed(A, I, g, B) {
          let Q = new eC();
          return Q.anchor1 = A, Q.anchor2 = g, Q.frame1 = I, Q.frame2 = B, Q.jointType = vI.Fixed, Q;
        }
        static spring(A, I, g, B, Q) {
          let E = new eC();
          return E.anchor1 = B, E.anchor2 = Q, E.length = A, E.stiffness = I, E.damping = g, E.jointType = vI.Spring, E;
        }
        static rope(A, I, g) {
          let B = new eC();
          return B.anchor1 = I, B.anchor2 = g, B.length = A, B.jointType = vI.Rope, B;
        }
        static generic(A, I, g, B) {
          let Q = new eC();
          return Q.anchor1 = A, Q.anchor2 = I, Q.axis = g, Q.axesMask = B, Q.jointType = vI.Generic, Q;
        }
        static spherical(A, I) {
          let g = new eC();
          return g.anchor1 = A, g.anchor2 = I, g.jointType = vI.Spherical, g;
        }
        static prismatic(A, I, g) {
          let B = new eC();
          return B.anchor1 = A, B.anchor2 = I, B.axis = g, B.jointType = vI.Prismatic, B;
        }
        static revolute(A, I, g) {
          let B = new eC();
          return B.anchor1 = A, B.anchor2 = I, B.axis = g, B.jointType = vI.Revolute, B;
        }
        intoRaw() {
          let A = f.intoRaw(this.anchor1), I = f.intoRaw(this.anchor2), g, B, Q = false, E = 0, i = 0;
          switch (this.jointType) {
            case vI.Fixed:
              let o = xA.intoRaw(this.frame1), t = xA.intoRaw(this.frame2);
              B = OI.fixed(A, o, I, t), o.free(), t.free();
              break;
            case vI.Spring:
              B = OI.spring(this.length, this.stiffness, this.damping, A, I);
              break;
            case vI.Rope:
              B = OI.rope(this.length, A, I);
              break;
            case vI.Prismatic:
              g = f.intoRaw(this.axis), this.limitsEnabled && (Q = true, E = this.limits[0], i = this.limits[1]), B = OI.prismatic(A, I, g, Q, E, i), g.free();
              break;
            case vI.Generic:
              g = f.intoRaw(this.axis);
              let e = this.axesMask;
              B = OI.generic(A, I, g, e);
              break;
            case vI.Spherical:
              B = OI.spherical(A, I);
              break;
            case vI.Revolute:
              g = f.intoRaw(this.axis), B = OI.revolute(A, I, g), g.free();
              break;
          }
          return A.free(), I.free(), B;
        }
      }
      class wn {
        free() {
          this.raw && this.raw.free(), this.raw = void 0, this.map && this.map.clear(), this.map = void 0;
        }
        constructor(A) {
          this.raw = A || new cC(), this.map = new oi(), A && A.forEachJointHandle((I) => {
            this.map.set(I, Lg.newTyped(A, null, I));
          });
        }
        finalizeDeserialization(A) {
          this.map.forEach((I) => I.finalizeDeserialization(A));
        }
        createJoint(A, I, g, B, Q) {
          const E = I.intoRaw(), i = this.raw.createJoint(E, g, B, Q);
          E.free();
          let o = Lg.newTyped(this.raw, A, i);
          return this.map.set(i, o), o;
        }
        remove(A, I) {
          this.raw.remove(A, I), this.unmap(A);
        }
        forEachJointHandleAttachedToRigidBody(A, I) {
          this.raw.forEachJointAttachedToRigidBody(A, I);
        }
        unmap(A) {
          this.map.delete(A);
        }
        len() {
          return this.map.len();
        }
        contains(A) {
          return this.get(A) != null;
        }
        get(A) {
          return this.map.get(A);
        }
        forEach(A) {
          this.map.forEach(A);
        }
        getAll() {
          return this.map.getAll();
        }
      }
      class qC {
        constructor(A, I) {
          this.rawSet = A, this.handle = I;
        }
        static newTyped(A, I) {
          switch (A.jointType(I)) {
            case Jg.Revolute:
              return new ln(A, I);
            case Jg.Prismatic:
              return new Sn(A, I);
            case Jg.Fixed:
              return new cn(A, I);
            case Jg.Spherical:
              return new Gn(A, I);
            default:
              return new qC(A, I);
          }
        }
        isValid() {
          return this.rawSet.contains(this.handle);
        }
        setContactsEnabled(A) {
          this.rawSet.jointSetContactsEnabled(this.handle, A);
        }
        contactsEnabled() {
          return this.rawSet.jointContactsEnabled(this.handle);
        }
      }
      class ke extends qC {
      }
      class cn extends qC {
      }
      class Sn extends ke {
        rawAxis() {
          return gi.LinX;
        }
      }
      class ln extends ke {
        rawAxis() {
          return gi.AngX;
        }
      }
      class Gn extends qC {
      }
      class kn {
        free() {
          this.raw && this.raw.free(), this.raw = void 0, this.map && this.map.clear(), this.map = void 0;
        }
        constructor(A) {
          this.raw = A || new lC(), this.map = new oi(), A && A.forEachJointHandle((I) => {
            this.map.set(I, qC.newTyped(this.raw, I));
          });
        }
        createJoint(A, I, g, B) {
          const Q = A.intoRaw(), E = this.raw.createJoint(Q, I, g, B);
          Q.free();
          let i = qC.newTyped(this.raw, E);
          return this.map.set(E, i), i;
        }
        remove(A, I) {
          this.raw.remove(A, I), this.map.delete(A);
        }
        unmap(A) {
          this.map.delete(A);
        }
        len() {
          return this.map.len();
        }
        contains(A) {
          return this.get(A) != null;
        }
        get(A) {
          return this.map.get(A);
        }
        forEach(A) {
          this.map.forEach(A);
        }
        forEachJointHandleAttachedToRigidBody(A, I) {
          this.raw.forEachJointAttachedToRigidBody(A, I);
        }
        getAll() {
          return this.map.getAll();
        }
      }
      var dQ;
      (function(C) {
        C[C.Average = 0] = "Average", C[C.Min = 1] = "Min", C[C.Multiply = 2] = "Multiply", C[C.Max = 3] = "Max";
      })(dQ || (dQ = {}));
      class yn {
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        constructor(A) {
          this.raw = A || new ht();
        }
      }
      class Mn {
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        constructor(A) {
          this.raw = A || new SC();
        }
        forEachActiveRigidBodyHandle(A) {
          this.raw.forEachActiveRigidBodyHandle(A);
        }
      }
      var OB;
      (function(C) {
        C[C.Vertex = 0] = "Vertex", C[C.Edge = 1] = "Edge", C[C.Face = 2] = "Face", C[C.Unknown = 3] = "Unknown";
      })(OB || (OB = {}));
      class qd {
        constructor(A, I) {
          this.origin = A, this.dir = I;
        }
        pointAt(A) {
          return {
            x: this.origin.x + this.dir.x * A,
            y: this.origin.y + this.dir.y * A,
            z: this.origin.z + this.dir.z * A
          };
        }
      }
      class _Q {
        constructor(A, I, g, B) {
          this.featureType = OB.Unknown, this.featureId = void 0, this.timeOfImpact = A, this.normal = I, B !== void 0 && (this.featureId = B), g !== void 0 && (this.featureType = g);
        }
        static fromRaw(A) {
          if (!A) return null;
          const I = new _Q(A.time_of_impact(), f.fromRaw(A.normal()), A.featureType(), A.featureId());
          return A.free(), I;
        }
      }
      class YQ {
        constructor(A, I, g, B, Q) {
          this.featureType = OB.Unknown, this.featureId = void 0, this.collider = A, this.timeOfImpact = I, this.normal = g, Q !== void 0 && (this.featureId = Q), B !== void 0 && (this.featureType = B);
        }
        static fromRaw(A, I) {
          if (!I) return null;
          const g = new YQ(A.get(I.colliderHandle()), I.time_of_impact(), f.fromRaw(I.normal()), I.featureType(), I.featureId());
          return I.free(), g;
        }
      }
      class ti {
        constructor(A, I) {
          this.collider = A, this.timeOfImpact = I;
        }
        static fromRaw(A, I) {
          if (!I) return null;
          const g = new ti(A.get(I.colliderHandle()), I.timeOfImpact());
          return I.free(), g;
        }
      }
      class ZQ {
        constructor(A, I) {
          this.point = A, this.isInside = I;
        }
        static fromRaw(A) {
          if (!A) return null;
          const I = new ZQ(f.fromRaw(A.point()), A.isInside());
          return A.free(), I;
        }
      }
      class qQ {
        constructor(A, I, g, B, Q) {
          this.featureType = OB.Unknown, this.featureId = void 0, this.collider = A, this.point = I, this.isInside = g, Q !== void 0 && (this.featureId = Q), B !== void 0 && (this.featureType = B);
        }
        static fromRaw(A, I) {
          if (!I) return null;
          const g = new qQ(A.get(I.colliderHandle()), f.fromRaw(I.point()), I.isInside(), I.featureType(), I.featureId());
          return I.free(), g;
        }
      }
      class XB {
        constructor(A, I, g, B, Q) {
          this.time_of_impact = A, this.witness1 = I, this.witness2 = g, this.normal1 = B, this.normal2 = Q;
        }
        static fromRaw(A, I) {
          if (!I) return null;
          const g = new XB(I.time_of_impact(), f.fromRaw(I.witness1()), f.fromRaw(I.witness2()), f.fromRaw(I.normal1()), f.fromRaw(I.normal2()));
          return I.free(), g;
        }
      }
      class vQ extends XB {
        constructor(A, I, g, B, Q, E) {
          super(I, g, B, Q, E), this.collider = A;
        }
        static fromRaw(A, I) {
          if (!I) return null;
          const g = new vQ(A.get(I.colliderHandle()), I.time_of_impact(), f.fromRaw(I.witness1()), f.fromRaw(I.witness2()), f.fromRaw(I.normal1()), f.fromRaw(I.normal2()));
          return I.free(), g;
        }
      }
      class Kn {
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        constructor(A) {
          this.raw = A || new wC();
        }
        castRay(A, I, g, B, Q, E, i, o, t, e, s) {
          let a = f.intoRaw(B.origin), r = f.intoRaw(B.dir), c = ti.fromRaw(g, this.raw.castRay(A.raw, I.raw, g.raw, a, r, Q, E, i, o, t, e, s));
          return a.free(), r.free(), c;
        }
        castRayAndGetNormal(A, I, g, B, Q, E, i, o, t, e, s) {
          let a = f.intoRaw(B.origin), r = f.intoRaw(B.dir), c = YQ.fromRaw(g, this.raw.castRayAndGetNormal(A.raw, I.raw, g.raw, a, r, Q, E, i, o, t, e, s));
          return a.free(), r.free(), c;
        }
        intersectionsWithRay(A, I, g, B, Q, E, i, o, t, e, s, a) {
          let r = f.intoRaw(B.origin), c = f.intoRaw(B.dir), S = (h) => i(YQ.fromRaw(g, h));
          this.raw.intersectionsWithRay(A.raw, I.raw, g.raw, r, c, Q, E, S, o, t, e, s, a), r.free(), c.free();
        }
        intersectionWithShape(A, I, g, B, Q, E, i, o, t, e, s) {
          let a = f.intoRaw(B), r = xA.intoRaw(Q), c = E.intoRaw(), S = this.raw.intersectionWithShape(A.raw, I.raw, g.raw, a, r, c, i, o, t, e, s);
          return a.free(), r.free(), c.free(), S;
        }
        projectPoint(A, I, g, B, Q, E, i, o, t, e) {
          let s = f.intoRaw(B), a = qQ.fromRaw(g, this.raw.projectPoint(A.raw, I.raw, g.raw, s, Q, E, i, o, t, e));
          return s.free(), a;
        }
        projectPointAndGetFeature(A, I, g, B, Q, E, i, o, t) {
          let e = f.intoRaw(B), s = qQ.fromRaw(g, this.raw.projectPointAndGetFeature(A.raw, I.raw, g.raw, e, Q, E, i, o, t));
          return e.free(), s;
        }
        intersectionsWithPoint(A, I, g, B, Q, E, i, o, t, e) {
          let s = f.intoRaw(B);
          this.raw.intersectionsWithPoint(A.raw, I.raw, g.raw, s, Q, E, i, o, t, e), s.free();
        }
        castShape(A, I, g, B, Q, E, i, o, t, e, s, a, r, c, S) {
          let h = f.intoRaw(B), D = xA.intoRaw(Q), U = f.intoRaw(E), M = i.intoRaw(), k = vQ.fromRaw(g, this.raw.castShape(A.raw, I.raw, g.raw, h, D, U, M, o, t, e, s, a, r, c, S));
          return h.free(), D.free(), U.free(), M.free(), k;
        }
        intersectionsWithShape(A, I, g, B, Q, E, i, o, t, e, s, a) {
          let r = f.intoRaw(B), c = xA.intoRaw(Q), S = E.intoRaw();
          this.raw.intersectionsWithShape(A.raw, I.raw, g.raw, r, c, S, i, o, t, e, s, a), r.free(), c.free(), S.free();
        }
        collidersWithAabbIntersectingAabb(A, I, g, B, Q, E) {
          let i = f.intoRaw(B), o = f.intoRaw(Q);
          this.raw.collidersWithAabbIntersectingAabb(A.raw, I.raw, g.raw, i, o, E), i.free(), o.free();
        }
      }
      class Un {
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        constructor(A) {
          this.raw = A || new LI(), this.tempManifold = new Nn(null);
        }
        contactPairsWith(A, I) {
          this.raw.contact_pairs_with(A, I);
        }
        intersectionPairsWith(A, I) {
          this.raw.intersection_pairs_with(A, I);
        }
        contactPair(A, I, g) {
          const B = this.raw.contact_pair(A, I);
          if (B) {
            const Q = B.collider1() != A;
            let E;
            for (E = 0; E < B.numContactManifolds(); ++E) this.tempManifold.raw = B.contactManifold(E), this.tempManifold.raw && g(this.tempManifold, Q), this.tempManifold.free();
            B.free();
          }
        }
        intersectionPair(A, I) {
          return this.raw.intersection_pair(A, I);
        }
      }
      class Nn {
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        constructor(A) {
          this.raw = A;
        }
        normal() {
          return f.fromRaw(this.raw.normal());
        }
        localNormal1() {
          return f.fromRaw(this.raw.local_n1());
        }
        localNormal2() {
          return f.fromRaw(this.raw.local_n2());
        }
        subshape1() {
          return this.raw.subshape1();
        }
        subshape2() {
          return this.raw.subshape2();
        }
        numContacts() {
          return this.raw.num_contacts();
        }
        localContactPoint1(A) {
          return f.fromRaw(this.raw.contact_local_p1(A));
        }
        localContactPoint2(A) {
          return f.fromRaw(this.raw.contact_local_p2(A));
        }
        contactDist(A) {
          return this.raw.contact_dist(A);
        }
        contactFid1(A) {
          return this.raw.contact_fid1(A);
        }
        contactFid2(A) {
          return this.raw.contact_fid2(A);
        }
        contactImpulse(A) {
          return this.raw.contact_impulse(A);
        }
        contactTangentImpulseX(A) {
          return this.raw.contact_tangent_impulse_x(A);
        }
        contactTangentImpulseY(A) {
          return this.raw.contact_tangent_impulse_y(A);
        }
        numSolverContacts() {
          return this.raw.num_solver_contacts();
        }
        solverContactPoint(A) {
          return f.fromRaw(this.raw.solver_contact_point(A));
        }
        solverContactDist(A) {
          return this.raw.solver_contact_dist(A);
        }
        solverContactFriction(A) {
          return this.raw.solver_contact_friction(A);
        }
        solverContactRestitution(A) {
          return this.raw.solver_contact_restitution(A);
        }
        solverContactTangentVelocity(A) {
          return f.fromRaw(this.raw.solver_contact_tangent_velocity(A));
        }
      }
      class _B {
        constructor(A, I, g, B, Q) {
          this.distance = A, this.point1 = I, this.point2 = g, this.normal1 = B, this.normal2 = Q;
        }
        static fromRaw(A) {
          if (!A) return null;
          const I = new _B(A.distance(), f.fromRaw(A.point1()), f.fromRaw(A.point2()), f.fromRaw(A.normal1()), f.fromRaw(A.normal2()));
          return A.free(), I;
        }
      }
      class fI {
        static fromRaw(A, I) {
          const g = A.coShapeType(I);
          let B, Q, E, i, o, t, e;
          switch (g) {
            case xI.Ball:
              return new ye(A.coRadius(I));
            case xI.Cuboid:
              return B = A.coHalfExtents(I), new Me(B.x, B.y, B.z);
            case xI.RoundCuboid:
              return B = A.coHalfExtents(I), Q = A.coRoundRadius(I), new Ke(B.x, B.y, B.z, Q);
            case xI.Capsule:
              return o = A.coHalfHeight(I), t = A.coRadius(I), new Ue(o, t);
            case xI.Segment:
              return E = A.coVertices(I), new Ne(f.new(E[0], E[1], E[2]), f.new(E[3], E[4], E[5]));
            case xI.Polyline:
              return E = A.coVertices(I), i = A.coIndices(I), new Re(E, i);
            case xI.Triangle:
              return E = A.coVertices(I), new Fe(f.new(E[0], E[1], E[2]), f.new(E[3], E[4], E[5]), f.new(E[6], E[7], E[8]));
            case xI.RoundTriangle:
              return E = A.coVertices(I), Q = A.coRoundRadius(I), new Je(f.new(E[0], E[1], E[2]), f.new(E[3], E[4], E[5]), f.new(E[6], E[7], E[8]), Q);
            case xI.HalfSpace:
              return e = f.fromRaw(A.coHalfspaceNormal(I)), new Fn(e);
            case xI.Voxels:
              const s = A.coVoxelData(I), a = A.coVoxelSize(I);
              return new pe(s, a);
            case xI.TriMesh:
              E = A.coVertices(I), i = A.coIndices(I);
              const r = A.coTriMeshFlags(I);
              return new de(E, i, r);
            case xI.HeightField:
              const c = A.coHeightfieldScale(I), S = A.coHeightfieldHeights(I), h = A.coHeightfieldNRows(I), D = A.coHeightfieldNCols(I), U = A.coHeightFieldFlags(I);
              return new Ye(h, D, S, c, U);
            case xI.ConvexPolyhedron:
              return E = A.coVertices(I), i = A.coIndices(I), new OE(E, i);
            case xI.RoundConvexPolyhedron:
              return E = A.coVertices(I), i = A.coIndices(I), Q = A.coRoundRadius(I), new _E(E, i, Q);
            case xI.Cylinder:
              return o = A.coHalfHeight(I), t = A.coRadius(I), new qe(o, t);
            case xI.RoundCylinder:
              return o = A.coHalfHeight(I), t = A.coRadius(I), Q = A.coRoundRadius(I), new Le(o, t, Q);
            case xI.Cone:
              return o = A.coHalfHeight(I), t = A.coRadius(I), new fe(o, t);
            case xI.RoundCone:
              return o = A.coHalfHeight(I), t = A.coRadius(I), Q = A.coRoundRadius(I), new ue(o, t, Q);
            default:
              throw new Error("unknown shape type: " + g);
          }
        }
        castShape(A, I, g, B, Q, E, i, o, t, e) {
          let s = f.intoRaw(A), a = xA.intoRaw(I), r = f.intoRaw(g), c = f.intoRaw(Q), S = xA.intoRaw(E), h = f.intoRaw(i), D = this.intoRaw(), U = B.intoRaw(), M = XB.fromRaw(null, D.castShape(s, a, r, U, c, S, h, o, t, e));
          return s.free(), a.free(), r.free(), c.free(), S.free(), h.free(), D.free(), U.free(), M;
        }
        intersectsShape(A, I, g, B, Q) {
          let E = f.intoRaw(A), i = xA.intoRaw(I), o = f.intoRaw(B), t = xA.intoRaw(Q), e = this.intoRaw(), s = g.intoRaw(), a = e.intersectsShape(E, i, s, o, t);
          return E.free(), i.free(), o.free(), t.free(), e.free(), s.free(), a;
        }
        contactShape(A, I, g, B, Q, E) {
          let i = f.intoRaw(A), o = xA.intoRaw(I), t = f.intoRaw(B), e = xA.intoRaw(Q), s = this.intoRaw(), a = g.intoRaw(), r = _B.fromRaw(s.contactShape(i, o, a, t, e, E));
          return i.free(), o.free(), t.free(), e.free(), s.free(), a.free(), r;
        }
        containsPoint(A, I, g) {
          let B = f.intoRaw(A), Q = xA.intoRaw(I), E = f.intoRaw(g), i = this.intoRaw(), o = i.containsPoint(B, Q, E);
          return B.free(), Q.free(), E.free(), i.free(), o;
        }
        projectPoint(A, I, g, B) {
          let Q = f.intoRaw(A), E = xA.intoRaw(I), i = f.intoRaw(g), o = this.intoRaw(), t = ZQ.fromRaw(o.projectPoint(Q, E, i, B));
          return Q.free(), E.free(), i.free(), o.free(), t;
        }
        intersectsRay(A, I, g, B) {
          let Q = f.intoRaw(I), E = xA.intoRaw(g), i = f.intoRaw(A.origin), o = f.intoRaw(A.dir), t = this.intoRaw(), e = t.intersectsRay(Q, E, i, o, B);
          return Q.free(), E.free(), i.free(), o.free(), t.free(), e;
        }
        castRay(A, I, g, B, Q) {
          let E = f.intoRaw(I), i = xA.intoRaw(g), o = f.intoRaw(A.origin), t = f.intoRaw(A.dir), e = this.intoRaw(), s = e.castRay(E, i, o, t, B, Q);
          return E.free(), i.free(), o.free(), t.free(), e.free(), s;
        }
        castRayAndGetNormal(A, I, g, B, Q) {
          let E = f.intoRaw(I), i = xA.intoRaw(g), o = f.intoRaw(A.origin), t = f.intoRaw(A.dir), e = this.intoRaw(), s = _Q.fromRaw(e.castRayAndGetNormal(E, i, o, t, B, Q));
          return E.free(), i.free(), o.free(), t.free(), e.free(), s;
        }
      }
      var dI;
      (function(C) {
        C[C.Ball = 0] = "Ball", C[C.Cuboid = 1] = "Cuboid", C[C.Capsule = 2] = "Capsule", C[C.Segment = 3] = "Segment", C[C.Polyline = 4] = "Polyline", C[C.Triangle = 5] = "Triangle", C[C.TriMesh = 6] = "TriMesh", C[C.HeightField = 7] = "HeightField", C[C.ConvexPolyhedron = 9] = "ConvexPolyhedron", C[C.Cylinder = 10] = "Cylinder", C[C.Cone = 11] = "Cone", C[C.RoundCuboid = 12] = "RoundCuboid", C[C.RoundTriangle = 13] = "RoundTriangle", C[C.RoundCylinder = 14] = "RoundCylinder", C[C.RoundCone = 15] = "RoundCone", C[C.RoundConvexPolyhedron = 16] = "RoundConvexPolyhedron", C[C.HalfSpace = 17] = "HalfSpace", C[C.Voxels = 18] = "Voxels";
      })(dI || (dI = {}));
      var kt;
      (function(C) {
        C[C.FIX_INTERNAL_EDGES = 1] = "FIX_INTERNAL_EDGES";
      })(kt || (kt = {}));
      var yt;
      (function(C) {
        C[C.DELETE_BAD_TOPOLOGY_TRIANGLES = 4] = "DELETE_BAD_TOPOLOGY_TRIANGLES", C[C.ORIENTED = 8] = "ORIENTED", C[C.MERGE_DUPLICATE_VERTICES = 16] = "MERGE_DUPLICATE_VERTICES", C[C.DELETE_DEGENERATE_TRIANGLES = 32] = "DELETE_DEGENERATE_TRIANGLES", C[C.DELETE_DUPLICATE_TRIANGLES = 64] = "DELETE_DUPLICATE_TRIANGLES", C[C.FIX_INTERNAL_EDGES = 144] = "FIX_INTERNAL_EDGES";
      })(yt || (yt = {}));
      class ye extends fI {
        constructor(A) {
          super(), this.type = dI.Ball, this.radius = A;
        }
        intoRaw() {
          return FA.ball(this.radius);
        }
      }
      class Fn extends fI {
        constructor(A) {
          super(), this.type = dI.HalfSpace, this.normal = A;
        }
        intoRaw() {
          let A = f.intoRaw(this.normal), I = FA.halfspace(A);
          return A.free(), I;
        }
      }
      class Me extends fI {
        constructor(A, I, g) {
          super(), this.type = dI.Cuboid, this.halfExtents = f.new(A, I, g);
        }
        intoRaw() {
          return FA.cuboid(this.halfExtents.x, this.halfExtents.y, this.halfExtents.z);
        }
      }
      class Ke extends fI {
        constructor(A, I, g, B) {
          super(), this.type = dI.RoundCuboid, this.halfExtents = f.new(A, I, g), this.borderRadius = B;
        }
        intoRaw() {
          return FA.roundCuboid(this.halfExtents.x, this.halfExtents.y, this.halfExtents.z, this.borderRadius);
        }
      }
      class Ue extends fI {
        constructor(A, I) {
          super(), this.type = dI.Capsule, this.halfHeight = A, this.radius = I;
        }
        intoRaw() {
          return FA.capsule(this.halfHeight, this.radius);
        }
      }
      class Ne extends fI {
        constructor(A, I) {
          super(), this.type = dI.Segment, this.a = A, this.b = I;
        }
        intoRaw() {
          let A = f.intoRaw(this.a), I = f.intoRaw(this.b), g = FA.segment(A, I);
          return A.free(), I.free(), g;
        }
      }
      class Fe extends fI {
        constructor(A, I, g) {
          super(), this.type = dI.Triangle, this.a = A, this.b = I, this.c = g;
        }
        intoRaw() {
          let A = f.intoRaw(this.a), I = f.intoRaw(this.b), g = f.intoRaw(this.c), B = FA.triangle(A, I, g);
          return A.free(), I.free(), g.free(), B;
        }
      }
      class Je extends fI {
        constructor(A, I, g, B) {
          super(), this.type = dI.RoundTriangle, this.a = A, this.b = I, this.c = g, this.borderRadius = B;
        }
        intoRaw() {
          let A = f.intoRaw(this.a), I = f.intoRaw(this.b), g = f.intoRaw(this.c), B = FA.roundTriangle(A, I, g, this.borderRadius);
          return A.free(), I.free(), g.free(), B;
        }
      }
      class Re extends fI {
        constructor(A, I) {
          super(), this.type = dI.Polyline, this.vertices = A, this.indices = I ?? new Uint32Array(0);
        }
        intoRaw() {
          return FA.polyline(this.vertices, this.indices);
        }
      }
      class pe extends fI {
        constructor(A, I) {
          super(), this.type = dI.Voxels, this.data = A, this.voxelSize = I;
        }
        intoRaw() {
          let A = f.intoRaw(this.voxelSize), I;
          return this.data instanceof Int32Array ? I = FA.voxels(A, this.data) : I = FA.voxelsFromPoints(A, this.data), A.free(), I;
        }
      }
      class de extends fI {
        constructor(A, I, g) {
          super(), this.type = dI.TriMesh, this.vertices = A, this.indices = I, this.flags = g;
        }
        intoRaw() {
          return FA.trimesh(this.vertices, this.indices, this.flags);
        }
      }
      class OE extends fI {
        constructor(A, I) {
          super(), this.type = dI.ConvexPolyhedron, this.vertices = A, this.indices = I;
        }
        intoRaw() {
          return this.indices ? FA.convexMesh(this.vertices, this.indices) : FA.convexHull(this.vertices);
        }
      }
      class _E extends fI {
        constructor(A, I, g) {
          super(), this.type = dI.RoundConvexPolyhedron, this.vertices = A, this.indices = I, this.borderRadius = g;
        }
        intoRaw() {
          return this.indices ? FA.roundConvexMesh(this.vertices, this.indices, this.borderRadius) : FA.roundConvexHull(this.vertices, this.borderRadius);
        }
      }
      class Ye extends fI {
        constructor(A, I, g, B, Q) {
          super(), this.type = dI.HeightField, this.nrows = A, this.ncols = I, this.heights = g, this.scale = B, this.flags = Q;
        }
        intoRaw() {
          let A = f.intoRaw(this.scale), I = FA.heightfield(this.nrows, this.ncols, this.heights, A, this.flags);
          return A.free(), I;
        }
      }
      class qe extends fI {
        constructor(A, I) {
          super(), this.type = dI.Cylinder, this.halfHeight = A, this.radius = I;
        }
        intoRaw() {
          return FA.cylinder(this.halfHeight, this.radius);
        }
      }
      class Le extends fI {
        constructor(A, I, g) {
          super(), this.type = dI.RoundCylinder, this.borderRadius = g, this.halfHeight = A, this.radius = I;
        }
        intoRaw() {
          return FA.roundCylinder(this.halfHeight, this.radius, this.borderRadius);
        }
      }
      class fe extends fI {
        constructor(A, I) {
          super(), this.type = dI.Cone, this.halfHeight = A, this.radius = I;
        }
        intoRaw() {
          return FA.cone(this.halfHeight, this.radius);
        }
      }
      class ue extends fI {
        constructor(A, I, g) {
          super(), this.type = dI.RoundCone, this.halfHeight = A, this.radius = I, this.borderRadius = g;
        }
        intoRaw() {
          return FA.roundCone(this.halfHeight, this.radius, this.borderRadius);
        }
      }
      class Jn {
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        constructor(A) {
          this.raw = A || new Ay();
        }
        step(A, I, g, B, Q, E, i, o, t, e, s, a) {
          let r = f.intoRaw(A);
          s ? this.raw.stepWithEvents(r, I.raw, g.raw, B.raw, Q.raw, E.raw, i.raw, o.raw, t.raw, e.raw, s.raw, a, a ? a.filterContactPair : null, a ? a.filterIntersectionPair : null) : this.raw.step(r, I.raw, g.raw, B.raw, Q.raw, E.raw, i.raw, o.raw, t.raw, e.raw), r.free();
        }
      }
      class Mt {
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        constructor(A) {
          this.raw = A || new gy();
        }
        serializeAll(A, I, g, B, Q, E, i, o, t) {
          let e = f.intoRaw(A);
          const s = this.raw.serializeAll(e, I.raw, g.raw, B.raw, Q.raw, E.raw, i.raw, o.raw, t.raw);
          return e.free(), s;
        }
        deserializeAll(A) {
          return fn.fromRaw(this.raw.deserializeAll(A));
        }
      }
      class Rn {
        constructor(A, I) {
          this.vertices = A, this.colors = I;
        }
      }
      class pn {
        free() {
          this.raw && this.raw.free(), this.raw = void 0, this.vertices = void 0, this.colors = void 0;
        }
        constructor(A) {
          this.raw = A || new Xk();
        }
        render(A, I, g, B, Q, E, i) {
          this.raw.render(A.raw, I.raw, g.raw, B.raw, Q.raw, E, I.castClosure(i)), this.vertices = this.raw.vertices(), this.colors = this.raw.colors();
        }
      }
      class dn {
      }
      class Yn {
        constructor(A, I, g, B, Q, E) {
          this.params = I, this.bodies = Q, this.colliders = E, this.broadPhase = g, this.narrowPhase = B, this.raw = new $k(A), this.rawCharacterCollision = new Cn(), this._applyImpulsesToDynamicBodies = false, this._characterMass = null;
        }
        free() {
          this.raw && (this.raw.free(), this.rawCharacterCollision.free()), this.raw = void 0, this.rawCharacterCollision = void 0;
        }
        up() {
          return this.raw.up();
        }
        setUp(A) {
          let I = f.intoRaw(A);
          return this.raw.setUp(I);
        }
        applyImpulsesToDynamicBodies() {
          return this._applyImpulsesToDynamicBodies;
        }
        setApplyImpulsesToDynamicBodies(A) {
          this._applyImpulsesToDynamicBodies = A;
        }
        characterMass() {
          return this._characterMass;
        }
        setCharacterMass(A) {
          this._characterMass = A;
        }
        offset() {
          return this.raw.offset();
        }
        setOffset(A) {
          this.raw.setOffset(A);
        }
        normalNudgeFactor() {
          return this.raw.normalNudgeFactor();
        }
        setNormalNudgeFactor(A) {
          this.raw.setNormalNudgeFactor(A);
        }
        slideEnabled() {
          return this.raw.slideEnabled();
        }
        setSlideEnabled(A) {
          this.raw.setSlideEnabled(A);
        }
        autostepMaxHeight() {
          return this.raw.autostepMaxHeight();
        }
        autostepMinWidth() {
          return this.raw.autostepMinWidth();
        }
        autostepIncludesDynamicBodies() {
          return this.raw.autostepIncludesDynamicBodies();
        }
        autostepEnabled() {
          return this.raw.autostepEnabled();
        }
        enableAutostep(A, I, g) {
          this.raw.enableAutostep(A, I, g);
        }
        disableAutostep() {
          return this.raw.disableAutostep();
        }
        maxSlopeClimbAngle() {
          return this.raw.maxSlopeClimbAngle();
        }
        setMaxSlopeClimbAngle(A) {
          this.raw.setMaxSlopeClimbAngle(A);
        }
        minSlopeSlideAngle() {
          return this.raw.minSlopeSlideAngle();
        }
        setMinSlopeSlideAngle(A) {
          this.raw.setMinSlopeSlideAngle(A);
        }
        snapToGroundDistance() {
          return this.raw.snapToGroundDistance();
        }
        enableSnapToGround(A) {
          this.raw.enableSnapToGround(A);
        }
        disableSnapToGround() {
          this.raw.disableSnapToGround();
        }
        snapToGroundEnabled() {
          return this.raw.snapToGroundEnabled();
        }
        computeColliderMovement(A, I, g, B, Q) {
          let E = f.intoRaw(I);
          this.raw.computeColliderMovement(this.params.dt, this.broadPhase.raw, this.narrowPhase.raw, this.bodies.raw, this.colliders.raw, A.handle, E, this._applyImpulsesToDynamicBodies, this._characterMass, g, B, this.colliders.castClosure(Q)), E.free();
        }
        computedMovement() {
          return f.fromRaw(this.raw.computedMovement());
        }
        computedGrounded() {
          return this.raw.computedGrounded();
        }
        numComputedCollisions() {
          return this.raw.numComputedCollisions();
        }
        computedCollision(A, I) {
          if (this.raw.computedCollision(A, this.rawCharacterCollision)) {
            let g = this.rawCharacterCollision;
            return I = I ?? new dn(), I.translationDeltaApplied = f.fromRaw(g.translationDeltaApplied()), I.translationDeltaRemaining = f.fromRaw(g.translationDeltaRemaining()), I.toi = g.toi(), I.witness1 = f.fromRaw(g.worldWitness1()), I.witness2 = f.fromRaw(g.worldWitness2()), I.normal1 = f.fromRaw(g.worldNormal1()), I.normal2 = f.fromRaw(g.worldNormal2()), I.collider = this.colliders.get(g.handle()), I;
          } else return null;
        }
      }
      var Kt;
      (function(C) {
        C[C.None = 0] = "None", C[C.LinX = 1] = "LinX", C[C.LinY = 2] = "LinY", C[C.LinZ = 4] = "LinZ", C[C.AngX = 8] = "AngX", C[C.AngY = 16] = "AngY", C[C.AngZ = 32] = "AngZ", C[C.AllLin = 7] = "AllLin", C[C.AllAng = 56] = "AllAng", C[C.All = 63] = "All";
      })(Kt || (Kt = {}));
      class qn {
        constructor(A, I, g, B, Q, E) {
          this.params = A, this.bodies = I, this.raw = new Iy(g, B, Q, E);
        }
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        setKp(A, I) {
          this.raw.set_kp(A, I);
        }
        setKi(A, I) {
          this.raw.set_kp(A, I);
        }
        setKd(A, I) {
          this.raw.set_kp(A, I);
        }
        setAxes(A) {
          this.raw.set_axes_mask(A);
        }
        resetIntegrals() {
          this.raw.reset_integrals();
        }
        applyLinearCorrection(A, I, g) {
          let B = f.intoRaw(I), Q = f.intoRaw(g);
          this.raw.apply_linear_correction(this.params.dt, this.bodies.raw, A.handle, B, Q), B.free(), Q.free();
        }
        applyAngularCorrection(A, I, g) {
          let B = xA.intoRaw(I), Q = f.intoRaw(g);
          this.raw.apply_angular_correction(this.params.dt, this.bodies.raw, A.handle, B, Q), B.free(), Q.free();
        }
        linearCorrection(A, I, g) {
          let B = f.intoRaw(I), Q = f.intoRaw(g), E = this.raw.linear_correction(this.params.dt, this.bodies.raw, A.handle, B, Q);
          return B.free(), Q.free(), f.fromRaw(E);
        }
        angularCorrection(A, I, g) {
          let B = xA.intoRaw(I), Q = f.intoRaw(g), E = this.raw.angular_correction(this.params.dt, this.bodies.raw, A.handle, B, Q);
          return B.free(), Q.free(), f.fromRaw(E);
        }
      }
      class Ln {
        constructor(A, I, g, B, Q) {
          this.raw = new zk(A.handle), this.broadPhase = I, this.narrowPhase = g, this.bodies = B, this.colliders = Q, this._chassis = A;
        }
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        updateVehicle(A, I, g, B) {
          this.raw.update_vehicle(A, this.broadPhase.raw, this.narrowPhase.raw, this.bodies.raw, this.colliders.raw, I, g, this.colliders.castClosure(B));
        }
        currentVehicleSpeed() {
          return this.raw.current_vehicle_speed();
        }
        chassis() {
          return this._chassis;
        }
        get indexUpAxis() {
          return this.raw.index_up_axis();
        }
        set indexUpAxis(A) {
          this.raw.set_index_up_axis(A);
        }
        get indexForwardAxis() {
          return this.raw.index_forward_axis();
        }
        set setIndexForwardAxis(A) {
          this.raw.set_index_forward_axis(A);
        }
        addWheel(A, I, g, B, Q) {
          let E = f.intoRaw(A), i = f.intoRaw(I), o = f.intoRaw(g);
          this.raw.add_wheel(E, i, o, B, Q), E.free(), i.free(), o.free();
        }
        numWheels() {
          return this.raw.num_wheels();
        }
        wheelChassisConnectionPointCs(A) {
          return f.fromRaw(this.raw.wheel_chassis_connection_point_cs(A));
        }
        setWheelChassisConnectionPointCs(A, I) {
          let g = f.intoRaw(I);
          this.raw.set_wheel_chassis_connection_point_cs(A, g), g.free();
        }
        wheelSuspensionRestLength(A) {
          return this.raw.wheel_suspension_rest_length(A);
        }
        setWheelSuspensionRestLength(A, I) {
          this.raw.set_wheel_suspension_rest_length(A, I);
        }
        wheelMaxSuspensionTravel(A) {
          return this.raw.wheel_max_suspension_travel(A);
        }
        setWheelMaxSuspensionTravel(A, I) {
          this.raw.set_wheel_max_suspension_travel(A, I);
        }
        wheelRadius(A) {
          return this.raw.wheel_radius(A);
        }
        setWheelRadius(A, I) {
          this.raw.set_wheel_radius(A, I);
        }
        wheelSuspensionStiffness(A) {
          return this.raw.wheel_suspension_stiffness(A);
        }
        setWheelSuspensionStiffness(A, I) {
          this.raw.set_wheel_suspension_stiffness(A, I);
        }
        wheelSuspensionCompression(A) {
          return this.raw.wheel_suspension_compression(A);
        }
        setWheelSuspensionCompression(A, I) {
          this.raw.set_wheel_suspension_compression(A, I);
        }
        wheelSuspensionRelaxation(A) {
          return this.raw.wheel_suspension_relaxation(A);
        }
        setWheelSuspensionRelaxation(A, I) {
          this.raw.set_wheel_suspension_relaxation(A, I);
        }
        wheelMaxSuspensionForce(A) {
          return this.raw.wheel_max_suspension_force(A);
        }
        setWheelMaxSuspensionForce(A, I) {
          this.raw.set_wheel_max_suspension_force(A, I);
        }
        wheelBrake(A) {
          return this.raw.wheel_brake(A);
        }
        setWheelBrake(A, I) {
          this.raw.set_wheel_brake(A, I);
        }
        wheelSteering(A) {
          return this.raw.wheel_steering(A);
        }
        setWheelSteering(A, I) {
          this.raw.set_wheel_steering(A, I);
        }
        wheelEngineForce(A) {
          return this.raw.wheel_engine_force(A);
        }
        setWheelEngineForce(A, I) {
          this.raw.set_wheel_engine_force(A, I);
        }
        wheelDirectionCs(A) {
          return f.fromRaw(this.raw.wheel_direction_cs(A));
        }
        setWheelDirectionCs(A, I) {
          let g = f.intoRaw(I);
          this.raw.set_wheel_direction_cs(A, g), g.free();
        }
        wheelAxleCs(A) {
          return f.fromRaw(this.raw.wheel_axle_cs(A));
        }
        setWheelAxleCs(A, I) {
          let g = f.intoRaw(I);
          this.raw.set_wheel_axle_cs(A, g), g.free();
        }
        wheelFrictionSlip(A) {
          return this.raw.wheel_friction_slip(A);
        }
        setWheelFrictionSlip(A, I) {
          this.raw.set_wheel_friction_slip(A, I);
        }
        wheelSideFrictionStiffness(A) {
          return this.raw.wheel_side_friction_stiffness(A);
        }
        setWheelSideFrictionStiffness(A, I) {
          this.raw.set_wheel_side_friction_stiffness(A, I);
        }
        wheelRotation(A) {
          return this.raw.wheel_rotation(A);
        }
        wheelForwardImpulse(A) {
          return this.raw.wheel_forward_impulse(A);
        }
        wheelSideImpulse(A) {
          return this.raw.wheel_side_impulse(A);
        }
        wheelSuspensionForce(A) {
          return this.raw.wheel_suspension_force(A);
        }
        wheelContactNormal(A) {
          return f.fromRaw(this.raw.wheel_contact_normal_ws(A));
        }
        wheelContactPoint(A) {
          return f.fromRaw(this.raw.wheel_contact_point_ws(A));
        }
        wheelSuspensionLength(A) {
          return this.raw.wheel_suspension_length(A);
        }
        wheelHardPoint(A) {
          return f.fromRaw(this.raw.wheel_hard_point_ws(A));
        }
        wheelIsInContact(A) {
          return this.raw.wheel_is_in_contact(A);
        }
        wheelGroundObject(A) {
          return this.colliders.get(this.raw.wheel_ground_object(A));
        }
      }
      let fn = class un {
        free() {
          this.integrationParameters.free(), this.islands.free(), this.broadPhase.free(), this.narrowPhase.free(), this.bodies.free(), this.colliders.free(), this.impulseJoints.free(), this.multibodyJoints.free(), this.ccdSolver.free(), this.physicsPipeline.free(), this.serializationPipeline.free(), this.debugRenderPipeline.free(), this.characterControllers.forEach((A) => A.free()), this.pidControllers.forEach((A) => A.free()), this.vehicleControllers.forEach((A) => A.free()), this.integrationParameters = void 0, this.islands = void 0, this.broadPhase = void 0, this.narrowPhase = void 0, this.bodies = void 0, this.colliders = void 0, this.ccdSolver = void 0, this.impulseJoints = void 0, this.multibodyJoints = void 0, this.physicsPipeline = void 0, this.serializationPipeline = void 0, this.debugRenderPipeline = void 0, this.characterControllers = void 0, this.pidControllers = void 0, this.vehicleControllers = void 0;
        }
        constructor(A, I, g, B, Q, E, i, o, t, e, s, a, r) {
          this.gravity = A, this.integrationParameters = new tn(I), this.islands = new Mn(g), this.broadPhase = new Kn(B), this.narrowPhase = new Un(Q), this.bodies = new on(E), this.colliders = new mn(i), this.impulseJoints = new wn(o), this.multibodyJoints = new kn(t), this.ccdSolver = new yn(e), this.physicsPipeline = new Jn(s), this.serializationPipeline = new Mt(a), this.debugRenderPipeline = new pn(r), this.characterControllers = /* @__PURE__ */ new Set(), this.pidControllers = /* @__PURE__ */ new Set(), this.vehicleControllers = /* @__PURE__ */ new Set(), this.impulseJoints.finalizeDeserialization(this.bodies), this.bodies.finalizeDeserialization(this.colliders), this.colliders.finalizeDeserialization(this.bodies);
        }
        static fromRaw(A) {
          return A ? new un(f.fromRaw(A.takeGravity()), A.takeIntegrationParameters(), A.takeIslandManager(), A.takeBroadPhase(), A.takeNarrowPhase(), A.takeBodies(), A.takeColliders(), A.takeImpulseJoints(), A.takeMultibodyJoints()) : null;
        }
        takeSnapshot() {
          return this.serializationPipeline.serializeAll(this.gravity, this.integrationParameters, this.islands, this.broadPhase, this.narrowPhase, this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints);
        }
        static restoreSnapshot(A) {
          return new Mt().deserializeAll(A);
        }
        debugRender(A, I) {
          return this.debugRenderPipeline.render(this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints, this.narrowPhase, A, I), new Rn(this.debugRenderPipeline.vertices, this.debugRenderPipeline.colors);
        }
        step(A, I) {
          this.physicsPipeline.step(this.gravity, this.integrationParameters, this.islands, this.broadPhase, this.narrowPhase, this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints, this.ccdSolver, A, I);
        }
        propagateModifiedBodyPositionsToColliders() {
          this.bodies.raw.propagateModifiedBodyPositionsToColliders(this.colliders.raw);
        }
        get timestep() {
          return this.integrationParameters.dt;
        }
        set timestep(A) {
          this.integrationParameters.dt = A;
        }
        get lengthUnit() {
          return this.integrationParameters.lengthUnit;
        }
        set lengthUnit(A) {
          this.integrationParameters.lengthUnit = A;
        }
        get numSolverIterations() {
          return this.integrationParameters.numSolverIterations;
        }
        set numSolverIterations(A) {
          this.integrationParameters.numSolverIterations = A;
        }
        get numInternalPgsIterations() {
          return this.integrationParameters.numInternalPgsIterations;
        }
        set numInternalPgsIterations(A) {
          this.integrationParameters.numInternalPgsIterations = A;
        }
        get maxCcdSubsteps() {
          return this.integrationParameters.maxCcdSubsteps;
        }
        set maxCcdSubsteps(A) {
          this.integrationParameters.maxCcdSubsteps = A;
        }
        createRigidBody(A) {
          return this.bodies.createRigidBody(this.colliders, A);
        }
        createCharacterController(A) {
          let I = new Yn(A, this.integrationParameters, this.broadPhase, this.narrowPhase, this.bodies, this.colliders);
          return this.characterControllers.add(I), I;
        }
        removeCharacterController(A) {
          this.characterControllers.delete(A), A.free();
        }
        createPidController(A, I, g, B) {
          let Q = new qn(this.integrationParameters, this.bodies, A, I, g, B);
          return this.pidControllers.add(Q), Q;
        }
        removePidController(A) {
          this.pidControllers.delete(A), A.free();
        }
        createVehicleController(A) {
          let I = new Ln(A, this.broadPhase, this.narrowPhase, this.bodies, this.colliders);
          return this.vehicleControllers.add(I), I;
        }
        removeVehicleController(A) {
          this.vehicleControllers.delete(A), A.free();
        }
        createCollider(A, I) {
          let g = I ? I.handle : void 0;
          return this.colliders.createCollider(this.bodies, A, g);
        }
        createImpulseJoint(A, I, g, B) {
          return this.impulseJoints.createJoint(this.bodies, A, I.handle, g.handle, B);
        }
        createMultibodyJoint(A, I, g, B) {
          return this.multibodyJoints.createJoint(A, I.handle, g.handle, B);
        }
        getRigidBody(A) {
          return this.bodies.get(A);
        }
        getCollider(A) {
          return this.colliders.get(A);
        }
        getImpulseJoint(A) {
          return this.impulseJoints.get(A);
        }
        getMultibodyJoint(A) {
          return this.multibodyJoints.get(A);
        }
        removeRigidBody(A) {
          this.bodies && this.bodies.remove(A.handle, this.islands, this.colliders, this.impulseJoints, this.multibodyJoints);
        }
        removeCollider(A, I) {
          this.colliders && this.colliders.remove(A.handle, this.islands, this.bodies, I);
        }
        removeImpulseJoint(A, I) {
          this.impulseJoints && this.impulseJoints.remove(A.handle, I);
        }
        removeMultibodyJoint(A, I) {
          this.impulseJoints && this.multibodyJoints.remove(A.handle, I);
        }
        forEachCollider(A) {
          this.colliders.forEach(A);
        }
        forEachRigidBody(A) {
          this.bodies.forEach(A);
        }
        forEachActiveRigidBody(A) {
          this.bodies.forEachActiveRigidBody(this.islands, A);
        }
        castRay(A, I, g, B, Q, E, i, o) {
          return this.broadPhase.castRay(this.narrowPhase, this.bodies, this.colliders, A, I, g, B, Q, E ? E.handle : null, i ? i.handle : null, this.colliders.castClosure(o));
        }
        castRayAndGetNormal(A, I, g, B, Q, E, i, o) {
          return this.broadPhase.castRayAndGetNormal(this.narrowPhase, this.bodies, this.colliders, A, I, g, B, Q, E ? E.handle : null, i ? i.handle : null, this.colliders.castClosure(o));
        }
        intersectionsWithRay(A, I, g, B, Q, E, i, o, t) {
          this.broadPhase.intersectionsWithRay(this.narrowPhase, this.bodies, this.colliders, A, I, g, B, Q, E, i ? i.handle : null, o ? o.handle : null, this.colliders.castClosure(t));
        }
        intersectionWithShape(A, I, g, B, Q, E, i, o) {
          let t = this.broadPhase.intersectionWithShape(this.narrowPhase, this.bodies, this.colliders, A, I, g, B, Q, E ? E.handle : null, i ? i.handle : null, this.colliders.castClosure(o));
          return t != null ? this.colliders.get(t) : null;
        }
        projectPoint(A, I, g, B, Q, E, i) {
          return this.broadPhase.projectPoint(this.narrowPhase, this.bodies, this.colliders, A, I, g, B, Q ? Q.handle : null, E ? E.handle : null, this.colliders.castClosure(i));
        }
        projectPointAndGetFeature(A, I, g, B, Q, E) {
          return this.broadPhase.projectPointAndGetFeature(this.narrowPhase, this.bodies, this.colliders, A, I, g, B ? B.handle : null, Q ? Q.handle : null, this.colliders.castClosure(E));
        }
        intersectionsWithPoint(A, I, g, B, Q, E, i) {
          this.broadPhase.intersectionsWithPoint(this.narrowPhase, this.bodies, this.colliders, A, this.colliders.castClosure(I), g, B, Q ? Q.handle : null, E ? E.handle : null, this.colliders.castClosure(i));
        }
        castShape(A, I, g, B, Q, E, i, o, t, e, s, a) {
          return this.broadPhase.castShape(this.narrowPhase, this.bodies, this.colliders, A, I, g, B, Q, E, i, o, t, e ? e.handle : null, s ? s.handle : null, this.colliders.castClosure(a));
        }
        intersectionsWithShape(A, I, g, B, Q, E, i, o, t) {
          this.broadPhase.intersectionsWithShape(this.narrowPhase, this.bodies, this.colliders, A, I, g, this.colliders.castClosure(B), Q, E, i ? i.handle : null, o ? o.handle : null, this.colliders.castClosure(t));
        }
        collidersWithAabbIntersectingAabb(A, I, g) {
          this.broadPhase.collidersWithAabbIntersectingAabb(this.narrowPhase, this.bodies, this.colliders, A, I, this.colliders.castClosure(g));
        }
        contactPairsWith(A, I) {
          this.narrowPhase.contactPairsWith(A.handle, this.colliders.castClosure(I));
        }
        intersectionPairsWith(A, I) {
          this.narrowPhase.intersectionPairsWith(A.handle, this.colliders.castClosure(I));
        }
        contactPair(A, I, g) {
          this.narrowPhase.contactPair(A.handle, I.handle, g);
        }
        intersectionPair(A, I) {
          return this.narrowPhase.intersectionPair(A.handle, I.handle);
        }
        set profilerEnabled(A) {
          this.physicsPipeline.raw.set_profiler_enabled(A);
        }
        get profilerEnabled() {
          return this.physicsPipeline.raw.is_profiler_enabled();
        }
        timingStep() {
          return this.physicsPipeline.raw.timing_step();
        }
        timingCollisionDetection() {
          return this.physicsPipeline.raw.timing_collision_detection();
        }
        timingBroadPhase() {
          return this.physicsPipeline.raw.timing_broad_phase();
        }
        timingNarrowPhase() {
          return this.physicsPipeline.raw.timing_narrow_phase();
        }
        timingSolver() {
          return this.physicsPipeline.raw.timing_solver();
        }
        timingVelocityAssembly() {
          return this.physicsPipeline.raw.timing_velocity_assembly();
        }
        timingVelocityResolution() {
          return this.physicsPipeline.raw.timing_velocity_resolution();
        }
        timingVelocityUpdate() {
          return this.physicsPipeline.raw.timing_velocity_update();
        }
        timingVelocityWriteback() {
          return this.physicsPipeline.raw.timing_velocity_writeback();
        }
        timingCcd() {
          return this.physicsPipeline.raw.timing_ccd();
        }
        timingCcdToiComputation() {
          return this.physicsPipeline.raw.timing_ccd_toi_computation();
        }
        timingCcdBroadPhase() {
          return this.physicsPipeline.raw.timing_ccd_broad_phase();
        }
        timingCcdNarrowPhase() {
          return this.physicsPipeline.raw.timing_ccd_narrow_phase();
        }
        timingCcdSolver() {
          return this.physicsPipeline.raw.timing_ccd_solver();
        }
        timingIslandConstruction() {
          return this.physicsPipeline.raw.timing_island_construction();
        }
        timingUserChanges() {
          return this.physicsPipeline.raw.timing_user_changes();
        }
      };
      var ZE;
      (function(C) {
        C[C.NONE = 0] = "NONE", C[C.COLLISION_EVENTS = 1] = "COLLISION_EVENTS", C[C.CONTACT_FORCE_EVENTS = 2] = "CONTACT_FORCE_EVENTS";
      })(ZE || (ZE = {}));
      class Hn {
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        collider1() {
          return this.raw.collider1();
        }
        collider2() {
          return this.raw.collider2();
        }
        totalForce() {
          return f.fromRaw(this.raw.total_force());
        }
        totalForceMagnitude() {
          return this.raw.total_force_magnitude();
        }
        maxForceDirection() {
          return f.fromRaw(this.raw.max_force_direction());
        }
        maxForceMagnitude() {
          return this.raw.max_force_magnitude();
        }
      }
      class Ld {
        constructor(A, I) {
          this.raw = I || new Bn(A);
        }
        free() {
          this.raw && this.raw.free(), this.raw = void 0;
        }
        drainCollisionEvents(A) {
          this.raw.drainCollisionEvents(A);
        }
        drainContactForceEvents(A) {
          let I = new Hn();
          this.raw.drainContactForceEvents((g) => {
            I.raw = g, A(I), I.free();
          });
        }
        clear() {
          this.raw.clear();
        }
      }
      var vE;
      (function(C) {
        C[C.NONE = 0] = "NONE", C[C.FILTER_CONTACT_PAIRS = 1] = "FILTER_CONTACT_PAIRS", C[C.FILTER_INTERSECTION_PAIRS = 2] = "FILTER_INTERSECTION_PAIRS";
      })(vE || (vE = {}));
      var Ut;
      (function(C) {
        C[C.EMPTY = 0] = "EMPTY", C[C.COMPUTE_IMPULSE = 1] = "COMPUTE_IMPULSE";
      })(Ut || (Ut = {}));
      var Nt;
      (function(C) {
        C[C.EXCLUDE_FIXED = 1] = "EXCLUDE_FIXED", C[C.EXCLUDE_KINEMATIC = 2] = "EXCLUDE_KINEMATIC", C[C.EXCLUDE_DYNAMIC = 4] = "EXCLUDE_DYNAMIC", C[C.EXCLUDE_SENSORS = 8] = "EXCLUDE_SENSORS", C[C.EXCLUDE_SOLIDS = 16] = "EXCLUDE_SOLIDS", C[C.ONLY_DYNAMIC = 3] = "ONLY_DYNAMIC", C[C.ONLY_KINEMATIC = 5] = "ONLY_KINEMATIC", C[C.ONLY_FIXED = 6] = "ONLY_FIXED";
      })(Nt || (Nt = {}));
      var PE;
      (function(C) {
        C[C.DYNAMIC_DYNAMIC = 1] = "DYNAMIC_DYNAMIC", C[C.DYNAMIC_KINEMATIC = 12] = "DYNAMIC_KINEMATIC", C[C.DYNAMIC_FIXED = 2] = "DYNAMIC_FIXED", C[C.KINEMATIC_KINEMATIC = 52224] = "KINEMATIC_KINEMATIC", C[C.KINEMATIC_FIXED = 8704] = "KINEMATIC_FIXED", C[C.FIXED_FIXED = 32] = "FIXED_FIXED", C[C.DEFAULT = 15] = "DEFAULT", C[C.ALL = 60943] = "ALL";
      })(PE || (PE = {}));
      class Ft {
        constructor(A, I, g, B) {
          this.colliderSet = A, this.handle = I, this._parent = g, this._shape = B;
        }
        finalizeDeserialization(A) {
          this.handle != null && (this._parent = A.get(this.colliderSet.raw.coParent(this.handle)));
        }
        ensureShapeIsCached() {
          this._shape || (this._shape = fI.fromRaw(this.colliderSet.raw, this.handle));
        }
        get shape() {
          return this.ensureShapeIsCached(), this._shape;
        }
        clearShapeCache() {
          this._shape = null;
        }
        isValid() {
          return this.colliderSet.raw.contains(this.handle);
        }
        translation() {
          return f.fromRaw(this.colliderSet.raw.coTranslation(this.handle));
        }
        translationWrtParent() {
          return f.fromRaw(this.colliderSet.raw.coTranslationWrtParent(this.handle));
        }
        rotation() {
          return xA.fromRaw(this.colliderSet.raw.coRotation(this.handle));
        }
        rotationWrtParent() {
          return xA.fromRaw(this.colliderSet.raw.coRotationWrtParent(this.handle));
        }
        isSensor() {
          return this.colliderSet.raw.coIsSensor(this.handle);
        }
        setSensor(A) {
          this.colliderSet.raw.coSetSensor(this.handle, A);
        }
        setShape(A) {
          let I = A.intoRaw();
          this.colliderSet.raw.coSetShape(this.handle, I), I.free(), this._shape = A;
        }
        setEnabled(A) {
          this.colliderSet.raw.coSetEnabled(this.handle, A);
        }
        isEnabled() {
          return this.colliderSet.raw.coIsEnabled(this.handle);
        }
        setRestitution(A) {
          this.colliderSet.raw.coSetRestitution(this.handle, A);
        }
        setFriction(A) {
          this.colliderSet.raw.coSetFriction(this.handle, A);
        }
        frictionCombineRule() {
          return this.colliderSet.raw.coFrictionCombineRule(this.handle);
        }
        setFrictionCombineRule(A) {
          this.colliderSet.raw.coSetFrictionCombineRule(this.handle, A);
        }
        restitutionCombineRule() {
          return this.colliderSet.raw.coRestitutionCombineRule(this.handle);
        }
        setRestitutionCombineRule(A) {
          this.colliderSet.raw.coSetRestitutionCombineRule(this.handle, A);
        }
        setCollisionGroups(A) {
          this.colliderSet.raw.coSetCollisionGroups(this.handle, A);
        }
        setSolverGroups(A) {
          this.colliderSet.raw.coSetSolverGroups(this.handle, A);
        }
        contactSkin() {
          return this.colliderSet.raw.coContactSkin(this.handle);
        }
        setContactSkin(A) {
          return this.colliderSet.raw.coSetContactSkin(this.handle, A);
        }
        activeHooks() {
          return this.colliderSet.raw.coActiveHooks(this.handle);
        }
        setActiveHooks(A) {
          this.colliderSet.raw.coSetActiveHooks(this.handle, A);
        }
        activeEvents() {
          return this.colliderSet.raw.coActiveEvents(this.handle);
        }
        setActiveEvents(A) {
          this.colliderSet.raw.coSetActiveEvents(this.handle, A);
        }
        activeCollisionTypes() {
          return this.colliderSet.raw.coActiveCollisionTypes(this.handle);
        }
        setContactForceEventThreshold(A) {
          return this.colliderSet.raw.coSetContactForceEventThreshold(this.handle, A);
        }
        contactForceEventThreshold() {
          return this.colliderSet.raw.coContactForceEventThreshold(this.handle);
        }
        setActiveCollisionTypes(A) {
          this.colliderSet.raw.coSetActiveCollisionTypes(this.handle, A);
        }
        setDensity(A) {
          this.colliderSet.raw.coSetDensity(this.handle, A);
        }
        setMass(A) {
          this.colliderSet.raw.coSetMass(this.handle, A);
        }
        setMassProperties(A, I, g, B) {
          let Q = f.intoRaw(I), E = f.intoRaw(g), i = xA.intoRaw(B);
          this.colliderSet.raw.coSetMassProperties(this.handle, A, Q, E, i), Q.free(), E.free(), i.free();
        }
        setTranslation(A) {
          this.colliderSet.raw.coSetTranslation(this.handle, A.x, A.y, A.z);
        }
        setTranslationWrtParent(A) {
          this.colliderSet.raw.coSetTranslationWrtParent(this.handle, A.x, A.y, A.z);
        }
        setRotation(A) {
          this.colliderSet.raw.coSetRotation(this.handle, A.x, A.y, A.z, A.w);
        }
        setRotationWrtParent(A) {
          this.colliderSet.raw.coSetRotationWrtParent(this.handle, A.x, A.y, A.z, A.w);
        }
        shapeType() {
          return this.colliderSet.raw.coShapeType(this.handle);
        }
        halfExtents() {
          return f.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle));
        }
        setHalfExtents(A) {
          const I = f.intoRaw(A);
          this.colliderSet.raw.coSetHalfExtents(this.handle, I);
        }
        radius() {
          return this.colliderSet.raw.coRadius(this.handle);
        }
        setRadius(A) {
          this.colliderSet.raw.coSetRadius(this.handle, A);
        }
        roundRadius() {
          return this.colliderSet.raw.coRoundRadius(this.handle);
        }
        setRoundRadius(A) {
          this.colliderSet.raw.coSetRoundRadius(this.handle, A);
        }
        halfHeight() {
          return this.colliderSet.raw.coHalfHeight(this.handle);
        }
        setHalfHeight(A) {
          this.colliderSet.raw.coSetHalfHeight(this.handle, A);
        }
        setVoxel(A, I, g, B) {
          this.colliderSet.raw.coSetVoxel(this.handle, A, I, g, B), this._shape = null;
        }
        propagateVoxelChange(A, I, g, B, Q, E, i) {
          this.colliderSet.raw.coPropagateVoxelChange(this.handle, A.handle, I, g, B, Q, E, i), this._shape = null;
        }
        combineVoxelStates(A, I, g, B) {
          this.colliderSet.raw.coCombineVoxelStates(this.handle, A.handle, I, g, B), this._shape = null;
        }
        vertices() {
          return this.colliderSet.raw.coVertices(this.handle);
        }
        indices() {
          return this.colliderSet.raw.coIndices(this.handle);
        }
        heightfieldHeights() {
          return this.colliderSet.raw.coHeightfieldHeights(this.handle);
        }
        heightfieldScale() {
          let A = this.colliderSet.raw.coHeightfieldScale(this.handle);
          return f.fromRaw(A);
        }
        heightfieldNRows() {
          return this.colliderSet.raw.coHeightfieldNRows(this.handle);
        }
        heightfieldNCols() {
          return this.colliderSet.raw.coHeightfieldNCols(this.handle);
        }
        parent() {
          return this._parent;
        }
        friction() {
          return this.colliderSet.raw.coFriction(this.handle);
        }
        restitution() {
          return this.colliderSet.raw.coRestitution(this.handle);
        }
        density() {
          return this.colliderSet.raw.coDensity(this.handle);
        }
        mass() {
          return this.colliderSet.raw.coMass(this.handle);
        }
        volume() {
          return this.colliderSet.raw.coVolume(this.handle);
        }
        collisionGroups() {
          return this.colliderSet.raw.coCollisionGroups(this.handle);
        }
        solverGroups() {
          return this.colliderSet.raw.coSolverGroups(this.handle);
        }
        containsPoint(A) {
          let I = f.intoRaw(A), g = this.colliderSet.raw.coContainsPoint(this.handle, I);
          return I.free(), g;
        }
        projectPoint(A, I) {
          let g = f.intoRaw(A), B = ZQ.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle, g, I));
          return g.free(), B;
        }
        intersectsRay(A, I) {
          let g = f.intoRaw(A.origin), B = f.intoRaw(A.dir), Q = this.colliderSet.raw.coIntersectsRay(this.handle, g, B, I);
          return g.free(), B.free(), Q;
        }
        castShape(A, I, g, B, Q, E, i, o) {
          let t = f.intoRaw(A), e = f.intoRaw(g), s = xA.intoRaw(B), a = f.intoRaw(Q), r = I.intoRaw(), c = XB.fromRaw(this.colliderSet, this.colliderSet.raw.coCastShape(this.handle, t, r, e, s, a, E, i, o));
          return t.free(), e.free(), s.free(), a.free(), r.free(), c;
        }
        castCollider(A, I, g, B, Q, E) {
          let i = f.intoRaw(A), o = f.intoRaw(g), t = vQ.fromRaw(this.colliderSet, this.colliderSet.raw.coCastCollider(this.handle, i, I.handle, o, B, Q, E));
          return i.free(), o.free(), t;
        }
        intersectsShape(A, I, g) {
          let B = f.intoRaw(I), Q = xA.intoRaw(g), E = A.intoRaw(), i = this.colliderSet.raw.coIntersectsShape(this.handle, E, B, Q);
          return B.free(), Q.free(), E.free(), i;
        }
        contactShape(A, I, g, B) {
          let Q = f.intoRaw(I), E = xA.intoRaw(g), i = A.intoRaw(), o = _B.fromRaw(this.colliderSet.raw.coContactShape(this.handle, i, Q, E, B));
          return Q.free(), E.free(), i.free(), o;
        }
        contactCollider(A, I) {
          return _B.fromRaw(this.colliderSet.raw.coContactCollider(this.handle, A.handle, I));
        }
        castRay(A, I, g) {
          let B = f.intoRaw(A.origin), Q = f.intoRaw(A.dir), E = this.colliderSet.raw.coCastRay(this.handle, B, Q, I, g);
          return B.free(), Q.free(), E;
        }
        castRayAndGetNormal(A, I, g) {
          let B = f.intoRaw(A.origin), Q = f.intoRaw(A.dir), E = _Q.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle, B, Q, I, g));
          return B.free(), Q.free(), E;
        }
      }
      var zC;
      (function(C) {
        C[C.Density = 0] = "Density", C[C.Mass = 1] = "Mass", C[C.MassProps = 2] = "MassProps";
      })(zC || (zC = {}));
      class RI {
        constructor(A) {
          this.enabled = true, this.shape = A, this.massPropsMode = zC.Density, this.density = 1, this.friction = 0.5, this.restitution = 0, this.rotation = xA.identity(), this.translation = f.zeros(), this.isSensor = false, this.collisionGroups = 4294967295, this.solverGroups = 4294967295, this.frictionCombineRule = dQ.Average, this.restitutionCombineRule = dQ.Average, this.activeCollisionTypes = PE.DEFAULT, this.activeEvents = ZE.NONE, this.activeHooks = vE.NONE, this.mass = 0, this.centerOfMass = f.zeros(), this.contactForceEventThreshold = 0, this.contactSkin = 0, this.principalAngularInertia = f.zeros(), this.angularInertiaLocalFrame = xA.identity();
        }
        static ball(A) {
          const I = new ye(A);
          return new RI(I);
        }
        static capsule(A, I) {
          const g = new Ue(A, I);
          return new RI(g);
        }
        static segment(A, I) {
          const g = new Ne(A, I);
          return new RI(g);
        }
        static triangle(A, I, g) {
          const B = new Fe(A, I, g);
          return new RI(B);
        }
        static roundTriangle(A, I, g, B) {
          const Q = new Je(A, I, g, B);
          return new RI(Q);
        }
        static polyline(A, I) {
          const g = new Re(A, I);
          return new RI(g);
        }
        static voxels(A, I) {
          const g = new pe(A, I);
          return new RI(g);
        }
        static trimesh(A, I, g) {
          const B = new de(A, I, g);
          return new RI(B);
        }
        static cuboid(A, I, g) {
          const B = new Me(A, I, g);
          return new RI(B);
        }
        static roundCuboid(A, I, g, B) {
          const Q = new Ke(A, I, g, B);
          return new RI(Q);
        }
        static heightfield(A, I, g, B, Q) {
          const E = new Ye(A, I, g, B, Q);
          return new RI(E);
        }
        static cylinder(A, I) {
          const g = new qe(A, I);
          return new RI(g);
        }
        static roundCylinder(A, I, g) {
          const B = new Le(A, I, g);
          return new RI(B);
        }
        static cone(A, I) {
          const g = new fe(A, I);
          return new RI(g);
        }
        static roundCone(A, I, g) {
          const B = new ue(A, I, g);
          return new RI(B);
        }
        static convexHull(A) {
          const I = new OE(A, null);
          return new RI(I);
        }
        static convexMesh(A, I) {
          const g = new OE(A, I);
          return new RI(g);
        }
        static roundConvexHull(A, I) {
          const g = new _E(A, null, I);
          return new RI(g);
        }
        static roundConvexMesh(A, I, g) {
          const B = new _E(A, I, g);
          return new RI(B);
        }
        setTranslation(A, I, g) {
          if (typeof A != "number" || typeof I != "number" || typeof g != "number") throw TypeError("The translation components must be numbers.");
          return this.translation = {
            x: A,
            y: I,
            z: g
          }, this;
        }
        setRotation(A) {
          return xA.copy(this.rotation, A), this;
        }
        setSensor(A) {
          return this.isSensor = A, this;
        }
        setEnabled(A) {
          return this.enabled = A, this;
        }
        setContactSkin(A) {
          return this.contactSkin = A, this;
        }
        setDensity(A) {
          return this.massPropsMode = zC.Density, this.density = A, this;
        }
        setMass(A) {
          return this.massPropsMode = zC.Mass, this.mass = A, this;
        }
        setMassProperties(A, I, g, B) {
          return this.massPropsMode = zC.MassProps, this.mass = A, f.copy(this.centerOfMass, I), f.copy(this.principalAngularInertia, g), xA.copy(this.angularInertiaLocalFrame, B), this;
        }
        setRestitution(A) {
          return this.restitution = A, this;
        }
        setFriction(A) {
          return this.friction = A, this;
        }
        setFrictionCombineRule(A) {
          return this.frictionCombineRule = A, this;
        }
        setRestitutionCombineRule(A) {
          return this.restitutionCombineRule = A, this;
        }
        setCollisionGroups(A) {
          return this.collisionGroups = A, this;
        }
        setSolverGroups(A) {
          return this.solverGroups = A, this;
        }
        setActiveHooks(A) {
          return this.activeHooks = A, this;
        }
        setActiveEvents(A) {
          return this.activeEvents = A, this;
        }
        setActiveCollisionTypes(A) {
          return this.activeCollisionTypes = A, this;
        }
        setContactForceEventThreshold(A) {
          return this.contactForceEventThreshold = A, this;
        }
      }
      class mn {
        free() {
          this.raw && this.raw.free(), this.raw = void 0, this.map && this.map.clear(), this.map = void 0;
        }
        constructor(A) {
          this.raw = A || new KI(), this.map = new oi(), A && A.forEachColliderHandle((I) => {
            this.map.set(I, new Ft(this, I, null));
          });
        }
        castClosure(A) {
          return (I) => {
            if (A) return A(this.get(I));
          };
        }
        finalizeDeserialization(A) {
          this.map.forEach((I) => I.finalizeDeserialization(A));
        }
        createCollider(A, I, g) {
          let B = g != null && g != null;
          if (B && isNaN(g)) throw Error("Cannot create a collider with a parent rigid-body handle that is not a number.");
          let Q = I.shape.intoRaw(), E = f.intoRaw(I.translation), i = xA.intoRaw(I.rotation), o = f.intoRaw(I.centerOfMass), t = f.intoRaw(I.principalAngularInertia), e = xA.intoRaw(I.angularInertiaLocalFrame), s = this.raw.createCollider(I.enabled, Q, E, i, I.massPropsMode, I.mass, o, t, e, I.density, I.friction, I.restitution, I.frictionCombineRule, I.restitutionCombineRule, I.isSensor, I.collisionGroups, I.solverGroups, I.activeCollisionTypes, I.activeHooks, I.activeEvents, I.contactForceEventThreshold, I.contactSkin, B, B ? g : 0, A.raw);
          Q.free(), E.free(), i.free(), o.free(), t.free(), e.free();
          let a = B ? A.get(g) : null, r = new Ft(this, s, a, I.shape);
          return this.map.set(s, r), r;
        }
        remove(A, I, g, B) {
          this.raw.remove(A, I.raw, g.raw, B), this.unmap(A);
        }
        unmap(A) {
          this.map.delete(A);
        }
        get(A) {
          return this.map.get(A);
        }
        len() {
          return this.map.len();
        }
        contains(A) {
          return this.get(A) != null;
        }
        forEach(A) {
          this.map.forEach(A);
        }
        getAll() {
          return this.map.getAll();
        }
      }
      function fd() {
        return vk();
      }
      function ud(C) {
        Pk(C);
      }
      const $I = Object.freeze(Object.defineProperty({
        __proto__: null,
        get ActiveCollisionTypes() {
          return PE;
        },
        get ActiveEvents() {
          return ZE;
        },
        get ActiveHooks() {
          return vE;
        },
        Ball: ye,
        BroadPhase: Kn,
        CCDSolver: yn,
        Capsule: Ue,
        CharacterCollision: dn,
        get CoefficientCombineRule() {
          return dQ;
        },
        Collider: Ft,
        ColliderDesc: RI,
        ColliderSet: mn,
        ColliderShapeCastHit: vQ,
        Cone: fe,
        ConvexPolyhedron: OE,
        Cuboid: Me,
        Cylinder: qe,
        DebugRenderBuffers: Rn,
        DebugRenderPipeline: pn,
        DynamicRayCastVehicleController: Ln,
        EventQueue: Ld,
        get FeatureType() {
          return OB;
        },
        FixedImpulseJoint: en,
        FixedMultibodyJoint: cn,
        GenericImpulseJoint: rn,
        HalfSpace: Fn,
        get HeightFieldFlags() {
          return kt;
        },
        Heightfield: Ye,
        ImpulseJoint: Lg,
        ImpulseJointSet: wn,
        IntegrationParameters: tn,
        IslandManager: Mn,
        get JointAxesMask() {
          return Gt;
        },
        JointData: eC,
        get JointType() {
          return vI;
        },
        KinematicCharacterController: Yn,
        get MassPropsMode() {
          return zC;
        },
        get MotorModel() {
          return lt;
        },
        MultibodyJoint: qC,
        MultibodyJointSet: kn,
        NarrowPhase: Un,
        PhysicsPipeline: Jn,
        get PidAxesMask() {
          return Kt;
        },
        PidController: qn,
        PointColliderProjection: qQ,
        PointProjection: ZQ,
        Polyline: Re,
        PrismaticImpulseJoint: Dn,
        PrismaticMultibodyJoint: Sn,
        Quaternion: wt,
        get QueryFilterFlags() {
          return Nt;
        },
        Ray: qd,
        RayColliderHit: ti,
        RayColliderIntersection: YQ,
        RayIntersection: _Q,
        RevoluteImpulseJoint: nn,
        RevoluteMultibodyJoint: ln,
        RigidBody: St,
        RigidBodyDesc: bg,
        RigidBodySet: on,
        get RigidBodyType() {
          return Fg;
        },
        RopeImpulseJoint: sn,
        RotationOps: xA,
        RoundCone: ue,
        RoundConvexPolyhedron: _E,
        RoundCuboid: Ke,
        RoundCylinder: Le,
        RoundTriangle: Je,
        SdpMatrix3: En,
        SdpMatrix3Ops: ct,
        Segment: Ne,
        SerializationPipeline: Mt,
        Shape: fI,
        ShapeCastHit: XB,
        ShapeContact: _B,
        get ShapeType() {
          return dI;
        },
        get SolverFlags() {
          return Ut;
        },
        SphericalImpulseJoint: hn,
        SphericalMultibodyJoint: Gn,
        SpringImpulseJoint: an,
        TempContactForceEvent: Hn,
        TempContactManifold: Nn,
        TriMesh: de,
        get TriMeshFlags() {
          return yt;
        },
        Triangle: Fe,
        UnitImpulseJoint: Ge,
        UnitMultibodyJoint: ke,
        Vector3: Qn,
        VectorOps: f,
        Voxels: pe,
        World: fn,
        reserveMemory: ud,
        version: fd
      }, Symbol.toStringTag, {
        value: "Module"
      })), to = new uA();
      class ei {
        constructor(A) {
          A = A || {}, this.zNear = A.webGL === true ? -1 : 0, this.vertices = {
            near: [
              new J(),
              new J(),
              new J(),
              new J()
            ],
            far: [
              new J(),
              new J(),
              new J(),
              new J()
            ]
          }, A.projectionMatrix !== void 0 && this.setFromProjectionMatrix(A.projectionMatrix, A.maxFar || 1e4);
        }
        setFromProjectionMatrix(A, I) {
          const g = this.zNear, B = A.elements[11] === 0;
          return to.copy(A).invert(), this.vertices.near[0].set(1, 1, g), this.vertices.near[1].set(1, -1, g), this.vertices.near[2].set(-1, -1, g), this.vertices.near[3].set(-1, 1, g), this.vertices.near.forEach(function(Q) {
            Q.applyMatrix4(to);
          }), this.vertices.far[0].set(1, 1, 1), this.vertices.far[1].set(1, -1, 1), this.vertices.far[2].set(-1, -1, 1), this.vertices.far[3].set(-1, 1, 1), this.vertices.far.forEach(function(Q) {
            Q.applyMatrix4(to);
            const E = Math.abs(Q.z);
            B ? Q.z *= Math.min(I / E, 1) : Q.multiplyScalar(Math.min(I / E, 1));
          }), this.vertices;
        }
        split(A, I) {
          for (; A.length > I.length; ) I.push(new ei());
          I.length = A.length;
          for (let g = 0; g < A.length; g++) {
            const B = I[g];
            if (g === 0) for (let Q = 0; Q < 4; Q++) B.vertices.near[Q].copy(this.vertices.near[Q]);
            else for (let Q = 0; Q < 4; Q++) B.vertices.near[Q].lerpVectors(this.vertices.near[Q], this.vertices.far[Q], A[g - 1]);
            if (g === A.length - 1) for (let Q = 0; Q < 4; Q++) B.vertices.far[Q].copy(this.vertices.far[Q]);
            else for (let Q = 0; Q < 4; Q++) B.vertices.far[Q].lerpVectors(this.vertices.near[Q], this.vertices.far[Q], A[g]);
          }
        }
        toSpace(A, I) {
          for (let g = 0; g < 4; g++) I.vertices.near[g].copy(this.vertices.near[g]).applyMatrix4(A), I.vertices.far[g].copy(this.vertices.far[g]).applyMatrix4(A);
        }
      }
      const _a = {
        lights_fragment_begin: `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );

vec3 geometryClearcoatNormal = vec3( 0.0 );

#ifdef USE_CLEARCOAT

	geometryClearcoatNormal = clearcoatNormal;

#endif

#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		// Iridescence F0 approximation
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif

IncidentLight directLight;

#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )

	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {

		pointLight = pointLights[ i ];

		getPointLightInfo( pointLight, geometryPosition, directLight );

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;

		#endif

		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )

	SpotLight spotLight;
 	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;

	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {

		spotLight = spotLights[ i ];

		getSpotLightInfo( spotLight, geometryPosition, directLight );

  		// spot lights are ordered [shadows with maps, shadows without maps, maps without shadows, none]
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;

		#endif

		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct ) && defined( USE_CSM ) && defined( CSM_CASCADES )

	DirectionalLight directionalLight;
	float linearDepth = (vViewPosition.z) / (shadowFar - cameraNear);
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif

	#if defined( USE_SHADOWMAP ) && defined( CSM_FADE )
		vec2 cascade;
		float cascadeCenter;
		float closestEdge;
		float margin;
		float csmx;
		float csmy;

		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {

			directionalLight = directionalLights[ i ];
			getDirectionalLightInfo( directionalLight, directLight );

			#if ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
				// NOTE: Depth gets larger away from the camera.
				// cascade.x is closer, cascade.y is further
				cascade = CSM_cascades[ i ];
				cascadeCenter = ( cascade.x + cascade.y ) / 2.0;
				closestEdge = linearDepth < cascadeCenter ? cascade.x : cascade.y;
				margin = 0.25 * pow( closestEdge, 2.0 );
				csmx = cascade.x - margin / 2.0;
				csmy = cascade.y + margin / 2.0;
				if( linearDepth >= csmx && ( linearDepth < csmy || UNROLLED_LOOP_INDEX == CSM_CASCADES - 1 ) ) {

					float dist = min( linearDepth - csmx, csmy - linearDepth );
					float ratio = clamp( dist / margin, 0.0, 1.0 );

					vec3 prevColor = directLight.color;
					directionalLightShadow = directionalLightShadows[ i ];
					directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;

					bool shouldFadeLastCascade = UNROLLED_LOOP_INDEX == CSM_CASCADES - 1 && linearDepth > cascadeCenter;
					directLight.color = mix( prevColor, directLight.color, shouldFadeLastCascade ? ratio : 1.0 );

					ReflectedLight prevLight = reflectedLight;
					RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

					bool shouldBlend = UNROLLED_LOOP_INDEX != CSM_CASCADES - 1 || UNROLLED_LOOP_INDEX == CSM_CASCADES - 1 && linearDepth < cascadeCenter;
					float blendRatio = shouldBlend ? ratio : 1.0;

					reflectedLight.directDiffuse = mix( prevLight.directDiffuse, reflectedLight.directDiffuse, blendRatio );
					reflectedLight.directSpecular = mix( prevLight.directSpecular, reflectedLight.directSpecular, blendRatio );
					reflectedLight.indirectDiffuse = mix( prevLight.indirectDiffuse, reflectedLight.indirectDiffuse, blendRatio );
					reflectedLight.indirectSpecular = mix( prevLight.indirectSpecular, reflectedLight.indirectSpecular, blendRatio );

				}
			#endif

		}
		#pragma unroll_loop_end
	#elif defined (USE_SHADOWMAP)

		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {

			directionalLight = directionalLights[ i ];
			getDirectionalLightInfo( directionalLight, directLight );

			#if ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )

				directionalLightShadow = directionalLightShadows[ i ];
				if(linearDepth >= CSM_cascades[UNROLLED_LOOP_INDEX].x && linearDepth < CSM_cascades[UNROLLED_LOOP_INDEX].y) directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;

				if(linearDepth >= CSM_cascades[UNROLLED_LOOP_INDEX].x && (linearDepth < CSM_cascades[UNROLLED_LOOP_INDEX].y || UNROLLED_LOOP_INDEX == CSM_CASCADES - 1)) RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

			#endif

		}
		#pragma unroll_loop_end

	#elif ( NUM_DIR_LIGHT_SHADOWS > 0 )
		// note: no loop here - all CSM lights are in fact one light only
		getDirectionalLightInfo( directionalLights[0], directLight );
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	#endif

	#if ( NUM_DIR_LIGHTS > NUM_DIR_LIGHT_SHADOWS)
		// compute the lights not casting shadows (if any)

		#pragma unroll_loop_start
		for ( int i = NUM_DIR_LIGHT_SHADOWS; i < NUM_DIR_LIGHTS; i ++ ) {

			directionalLight = directionalLights[ i ];

			getDirectionalLightInfo( directionalLight, directLight );

			RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

		}
		#pragma unroll_loop_end

	#endif

#endif


#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct ) && !defined( USE_CSM ) && !defined( CSM_CASCADES )

	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {

		directionalLight = directionalLights[ i ];

		getDirectionalLightInfo( directionalLight, directLight );

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif

		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )

	RectAreaLight rectAreaLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {

		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if defined( RE_IndirectDiffuse )

	vec3 iblIrradiance = vec3( 0.0 );

	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );

	#if defined( USE_LIGHT_PROBES )

		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );

	#endif

	#if ( NUM_HEMI_LIGHTS > 0 )

		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {

			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );

		}
		#pragma unroll_loop_end

	#endif

#endif

#if defined( RE_IndirectSpecular )

	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );

#endif
`,
        lights_pars_begin: `
#if defined( USE_CSM ) && defined( CSM_CASCADES )
uniform vec2 CSM_cascades[CSM_CASCADES];
uniform float cameraNear;
uniform float shadowFar;
#endif
	` + bA.lights_pars_begin
      }, Za = new uA(), eo = new ei({
        webGL: true
      }), oC = new J(), eQ = new Xg(), so = [], ao = [], Do = new uA(), va = new uA(), Hd = new J(0, 1, 0);
      class md {
        constructor(A) {
          this.camera = A.camera, this.parent = A.parent, this.cascades = A.cascades || 3, this.maxFar = A.maxFar || 1e5, this.mode = A.mode || "practical", this.shadowMapSize = A.shadowMapSize || 2048, this.shadowBias = A.shadowBias || 1e-6, this.lightDirection = A.lightDirection || new J(1, -1, 1).normalize(), this.lightIntensity = A.lightIntensity || 3, this.lightNear = A.lightNear || 1, this.lightFar = A.lightFar || 2e3, this.lightMargin = A.lightMargin || 200, this.customSplitsCallback = A.customSplitsCallback, this.fade = false, this.mainFrustum = new ei({
            webGL: true
          }), this.frustums = [], this.breaks = [], this.lights = [], this.shaders = /* @__PURE__ */ new Map(), this._createLights(), this.updateFrustums(), this._injectInclude();
        }
        _createLights() {
          for (let A = 0; A < this.cascades; A++) {
            const I = new WD(16777215, this.lightIntensity);
            I.castShadow = true, I.shadow.mapSize.width = this.shadowMapSize, I.shadow.mapSize.height = this.shadowMapSize, I.shadow.camera.near = this.lightNear, I.shadow.camera.far = this.lightFar, I.shadow.bias = this.shadowBias, this.parent.add(I), this.parent.add(I.target), this.lights.push(I);
          }
        }
        _initCascades() {
          const A = this.camera;
          A.updateProjectionMatrix(), this.mainFrustum.setFromProjectionMatrix(A.projectionMatrix, this.maxFar), this.mainFrustum.split(this.breaks, this.frustums);
        }
        _updateShadowBounds() {
          const A = this.frustums;
          for (let I = 0; I < A.length; I++) {
            const B = this.lights[I].shadow.camera, Q = this.frustums[I], E = Q.vertices.near, i = Q.vertices.far, o = i[0];
            let t;
            o.distanceTo(i[2]) > o.distanceTo(E[2]) ? t = i[2] : t = E[2];
            let e = o.distanceTo(t);
            if (this.fade) {
              const s = this.camera, a = Math.max(s.far, this.maxFar), r = Q.vertices.far[0].z / (a - s.near), c = 0.25 * Math.pow(r, 2) * (a - s.near);
              e += c;
            }
            B.left = -e / 2, B.right = e / 2, B.top = e / 2, B.bottom = -e / 2, B.updateProjectionMatrix();
          }
        }
        _getBreaks() {
          const A = this.camera, I = Math.min(A.far, this.maxFar);
          switch (this.breaks.length = 0, this.mode) {
            case "uniform":
              g(this.cascades, A.near, I, this.breaks);
              break;
            case "logarithmic":
              B(this.cascades, A.near, I, this.breaks);
              break;
            case "practical":
              Q(this.cascades, A.near, I, 0.5, this.breaks);
              break;
            case "custom":
              this.customSplitsCallback === void 0 && console.error("CSM: Custom split scheme callback not defined."), this.customSplitsCallback(this.cascades, A.near, I, this.breaks);
              break;
          }
          function g(E, i, o, t) {
            for (let e = 1; e < E; e++) t.push((i + (o - i) * e / E) / o);
            t.push(1);
          }
          function B(E, i, o, t) {
            for (let e = 1; e < E; e++) t.push(i * (o / i) ** (e / E) / o);
            t.push(1);
          }
          function Q(E, i, o, t, e) {
            so.length = 0, ao.length = 0, B(E, i, o, ao), g(E, i, o, so);
            for (let s = 1; s < E; s++) e.push(_I.lerp(so[s - 1], ao[s - 1], t));
            e.push(1);
          }
        }
        update() {
          const A = this.camera, I = this.frustums;
          Do.lookAt(new J(), this.lightDirection, Hd), va.copy(Do).invert();
          for (let g = 0; g < I.length; g++) {
            const B = this.lights[g], Q = B.shadow.camera, E = (Q.right - Q.left) / this.shadowMapSize, i = (Q.top - Q.bottom) / this.shadowMapSize;
            Za.multiplyMatrices(va, A.matrixWorld), I[g].toSpace(Za, eo);
            const o = eo.vertices.near, t = eo.vertices.far;
            eQ.makeEmpty();
            for (let e = 0; e < 4; e++) eQ.expandByPoint(o[e]), eQ.expandByPoint(t[e]);
            eQ.getCenter(oC), oC.z = eQ.max.z + this.lightMargin, oC.x = Math.floor(oC.x / E) * E, oC.y = Math.floor(oC.y / i) * i, oC.applyMatrix4(Do), B.position.copy(oC), B.target.position.copy(oC), B.target.position.x += this.lightDirection.x, B.target.position.y += this.lightDirection.y, B.target.position.z += this.lightDirection.z;
          }
        }
        _injectInclude() {
          bA.lights_fragment_begin = _a.lights_fragment_begin, bA.lights_pars_begin = _a.lights_pars_begin;
        }
        setupMaterial(A) {
          A.defines = A.defines || {}, A.defines.USE_CSM = 1, A.defines.CSM_CASCADES = this.cascades, this.fade && (A.defines.CSM_FADE = "");
          const I = [], g = this, B = this.shaders;
          A.onBeforeCompile = function(Q) {
            const E = Math.min(g.camera.far, g.maxFar);
            g._getExtendedBreaks(I), Q.uniforms.CSM_cascades = {
              value: I
            }, Q.uniforms.cameraNear = {
              value: g.camera.near
            }, Q.uniforms.shadowFar = {
              value: E
            }, B.set(A, Q);
          }, B.set(A, null);
        }
        _updateUniforms() {
          const A = Math.min(this.camera.far, this.maxFar);
          this.shaders.forEach(function(g, B) {
            if (g !== null) {
              const Q = g.uniforms;
              this._getExtendedBreaks(Q.CSM_cascades.value), Q.cameraNear.value = this.camera.near, Q.shadowFar.value = A;
            }
            !this.fade && "CSM_FADE" in B.defines ? (delete B.defines.CSM_FADE, B.needsUpdate = true) : this.fade && !("CSM_FADE" in B.defines) && (B.defines.CSM_FADE = "", B.needsUpdate = true);
          }, this);
        }
        _getExtendedBreaks(A) {
          for (; A.length < this.breaks.length; ) A.push(new XA());
          A.length = this.breaks.length;
          for (let I = 0; I < this.cascades; I++) {
            const g = this.breaks[I], B = this.breaks[I - 1] || 0;
            A[I].x = B, A[I].y = g;
          }
        }
        updateFrustums() {
          this._getBreaks(), this._initCascades(), this._updateShadowBounds(), this._updateUniforms();
        }
        remove() {
          for (let A = 0; A < this.lights.length; A++) this.parent.remove(this.lights[A].target), this.parent.remove(this.lights[A]);
        }
        dispose() {
          const A = this.shaders;
          A.forEach(function(I, g) {
            delete g.onBeforeCompile, delete g.defines.USE_CSM, delete g.defines.CSM_CASCADES, delete g.defines.CSM_FADE, I !== null && (delete I.uniforms.CSM_cascades, delete I.uniforms.cameraNear, delete I.uniforms.shadowFar), g.needsUpdate = true;
          }), A.clear();
        }
      }
      const Pa = new J(), Td = new SI(), Wa = new J(), mg = new uA(), bd = new uA();
      class xd {
        constructor(A = {}) {
          const I = this;
          let g, B, Q, E;
          const i = {
            camera: {
              style: ""
            },
            objects: /* @__PURE__ */ new WeakMap()
          }, o = A.element !== void 0 ? A.element : document.createElement("div");
          o.style.overflow = "hidden", this.domElement = o;
          const t = document.createElement("div");
          t.style.transformOrigin = "0 0", t.style.pointerEvents = "none", o.appendChild(t);
          const e = document.createElement("div");
          e.style.transformStyle = "preserve-3d", t.appendChild(e), this.getSize = function() {
            return {
              width: g,
              height: B
            };
          }, this.render = function(h, D) {
            const U = D.projectionMatrix.elements[5] * E;
            D.view && D.view.enabled ? (t.style.transform = `translate( ${-D.view.offsetX * (g / D.view.width)}px, ${-D.view.offsetY * (B / D.view.height)}px )`, t.style.transform += `scale( ${D.view.fullWidth / D.view.width}, ${D.view.fullHeight / D.view.height} )`) : t.style.transform = "", h.matrixWorldAutoUpdate === true && h.updateMatrixWorld(), D.parent === null && D.matrixWorldAutoUpdate === true && D.updateMatrixWorld();
            let M, k;
            D.isOrthographicCamera && (M = -(D.right + D.left) / 2, k = (D.top + D.bottom) / 2);
            const p = D.view && D.view.enabled ? D.view.height / D.view.fullHeight : 1, R = D.isOrthographicCamera ? `scale( ${p} )scale(` + U + ")translate(" + s(M) + "px," + s(k) + "px)" + a(D.matrixWorldInverse) : `scale( ${p} )translateZ(` + U + "px)" + a(D.matrixWorldInverse), m = (D.isPerspectiveCamera ? "perspective(" + U + "px) " : "") + R + "translate(" + Q + "px," + E + "px)";
            i.camera.style !== m && (e.style.transform = m, i.camera.style = m), S(h, h, D);
          }, this.setSize = function(h, D) {
            g = h, B = D, Q = g / 2, E = B / 2, o.style.width = h + "px", o.style.height = D + "px", t.style.width = h + "px", t.style.height = D + "px", e.style.width = h + "px", e.style.height = D + "px";
          };
          function s(h) {
            return Math.abs(h) < 1e-10 ? 0 : h;
          }
          function a(h) {
            const D = h.elements;
            return "matrix3d(" + s(D[0]) + "," + s(-D[1]) + "," + s(D[2]) + "," + s(D[3]) + "," + s(D[4]) + "," + s(-D[5]) + "," + s(D[6]) + "," + s(D[7]) + "," + s(D[8]) + "," + s(-D[9]) + "," + s(D[10]) + "," + s(D[11]) + "," + s(D[12]) + "," + s(-D[13]) + "," + s(D[14]) + "," + s(D[15]) + ")";
          }
          function r(h) {
            const D = h.elements;
            return "translate(-50%,-50%)" + ("matrix3d(" + s(D[0]) + "," + s(D[1]) + "," + s(D[2]) + "," + s(D[3]) + "," + s(-D[4]) + "," + s(-D[5]) + "," + s(-D[6]) + "," + s(-D[7]) + "," + s(D[8]) + "," + s(D[9]) + "," + s(D[10]) + "," + s(D[11]) + "," + s(D[12]) + "," + s(D[13]) + "," + s(D[14]) + "," + s(D[15]) + ")");
          }
          function c(h) {
            h.isCSS3DObject && (h.element.style.display = "none");
            for (let D = 0, U = h.children.length; D < U; D++) c(h.children[D]);
          }
          function S(h, D, U, M) {
            if (h.visible === false) {
              c(h);
              return;
            }
            if (h.isCSS3DObject) {
              const k = h.layers.test(U.layers) === true, p = h.element;
              if (p.style.display = k === true ? "" : "none", k === true) {
                h.onBeforeRender(I, D, U);
                let R;
                h.isCSS3DSprite ? (mg.copy(U.matrixWorldInverse), mg.transpose(), h.rotation2D !== 0 && mg.multiply(bd.makeRotationZ(h.rotation2D)), h.matrixWorld.decompose(Pa, Td, Wa), mg.setPosition(Pa), mg.scale(Wa), mg.elements[3] = 0, mg.elements[7] = 0, mg.elements[11] = 0, mg.elements[15] = 1, R = r(mg)) : R = r(h.matrixWorld);
                const Y = i.objects.get(h);
                if (Y === void 0 || Y.style !== R) {
                  p.style.transform = R;
                  const m = {
                    style: R
                  };
                  i.objects.set(h, m);
                }
                p.parentNode !== e && e.appendChild(p), h.onAfterRender(I, D, U);
              }
            }
            for (let k = 0, p = h.children.length; k < p; k++) S(h.children[k], D, U);
          }
        }
      }
      class Od {
        static isWebGL2Available() {
          try {
            const A = document.createElement("canvas");
            return !!(window.WebGL2RenderingContext && A.getContext("webgl2"));
          } catch {
            return false;
          }
        }
        static isColorSpaceAvailable(A) {
          try {
            const I = document.createElement("canvas"), g = window.WebGL2RenderingContext && I.getContext("webgl2");
            return g.drawingBufferColorSpace = A, g.drawingBufferColorSpace === A;
          } catch {
            return false;
          }
        }
        static getWebGL2ErrorMessage() {
          return this._getErrorMessage(2);
        }
        static _getErrorMessage(A) {
          const I = {
            1: "WebGL",
            2: "WebGL 2"
          }, g = {
            1: window.WebGLRenderingContext,
            2: window.WebGL2RenderingContext
          };
          let B = 'Your $0 does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">$1</a>';
          const Q = document.createElement("div");
          return Q.id = "webglmessage", Q.style.fontFamily = "monospace", Q.style.fontSize = "13px", Q.style.fontWeight = "normal", Q.style.textAlign = "center", Q.style.background = "#fff", Q.style.color = "#000", Q.style.padding = "1.5em", Q.style.width = "400px", Q.style.margin = "5em auto 0", g[A] ? B = B.replace("$0", "graphics card") : B = B.replace("$0", "browser"), B = B.replace("$1", I[A]), Q.innerHTML = B, Q;
        }
      }
      function SQ(C) {
        return new J(C[0], C[1], C[2]);
      }
      function _d(C) {
        return [
          C.x,
          C.y,
          C.z
        ];
      }
      function Jt(C) {
        return new pI(_I.degToRad(C[0]), _I.degToRad(C[1]), _I.degToRad(C[2]), "YXZ");
      }
      function Zd(C) {
        const A = C.clone().reorder("YXZ");
        return [
          _I.radToDeg(A.x),
          _I.radToDeg(A.y),
          _I.radToDeg(A.z)
        ];
      }
      function vd(C) {
        return new SI().setFromEuler(Jt(C));
      }
      function Pd(C) {
        return Zd(new pI().setFromQuaternion(C));
      }
      function Wd(C) {
        return new SI(C[0], C[1], C[2], C[3]);
      }
      let Tn;
      function jd(C) {
        Tn = C, jI.sendMessage({
          type: "world.getServerVersion"
        });
      }
      function Vd(C) {
        const A = gA.getPosition(C), I = gA.getRotation(C);
        jI.sendMessage({
          type: "world.update",
          data: [
            C,
            {
              pose: {
                position: _d(A),
                rotation: Pd(I)
              }
            }
          ]
        });
      }
      function Xd(C) {
        switch (jI.parseType(C)[1]) {
          case "create":
            break;
          case "read":
            break;
          case "update":
            break;
          case "delete":
            break;
          case "getServerVersion":
            Tn(C.data);
            break;
          default:
            console.error(`World: unknown message: ${C}`);
            break;
        }
      }
      const si = {
        getServerVersion: jd,
        updateState: Vd,
        onMessage: Xd
      };
      class bn {
        constructor(A) {
          this.entityId = A;
        }
        setServerState(A) {
        }
        encodeState() {
          return [];
        }
        decodeState(A, I) {
          return I;
        }
        onPhysicsTick() {
        }
        onRenderTick() {
        }
      }
      const LQ = /* @__PURE__ */ new Map();
      function xn(C, A, I, g, B) {
        const Q = Vg.getTime() + 0.199, E = {
          entityId: A,
          localPosition: I,
          targetPosition: g,
          targetRotation: B,
          timeout: Q
        };
        LQ.set(C, E);
      }
      function He(C) {
        LQ.delete(C);
      }
      function zd() {
        const C = Vg.getTime();
        LQ.forEach((A, I) => {
          if (I >= 0 && C > A.timeout) He(I);
          else {
            const g = A.entityId, B = A.targetPosition, Q = A.targetRotation;
            gA.setPosition(g, B), gA.setRotation(g, Q), gA.setVelocity(g, new J()), gA.setAngularVelocity(g, new J());
          }
        });
      }
      let ja = 0, no = false;
      function $d() {
        const C = Vg.getTime();
        if (LQ.has(-1)) {
          if (no = true, C >= ja) {
            ja = C + 0.199;
            const A = LQ.get(-1), I = A.entityId, g = A.localPosition, B = A.targetPosition, Q = A.targetRotation;
            return [
              1,
              I,
              g.x,
              g.y,
              g.z,
              B.x,
              B.y,
              B.z,
              Q.x,
              Q.y,
              Q.z,
              Q.w
            ];
          }
        } else if (no) return no = false, [
          0
        ];
        return [];
      }
      function AY(C, A) {
        let I = 0;
        if (A[I++] !== 0) {
          const B = A[I++], Q = new J(A[I++], A[I++], A[I++]), E = new J(A[I++], A[I++], A[I++]), i = new SI(A[I++], A[I++], A[I++], A[I++]);
          xn(C, B, Q, E, i);
        } else He(C);
      }
      const zB = {
        grab: xn,
        release: He,
        update: zd,
        encodeState: $d,
        decodeState: AY
      };
      let $C, JC = false;
      async function IY() {
        if (navigator.mediaDevices?.getUserMedia) try {
          $C = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: false
          });
          const C = document.getElementById("microphoneDiv");
          C.style.display = "block";
          const A = document.getElementById("microphoneOn");
          A.onclick = Va;
          const I = document.getElementById("microphoneOff");
          I.onclick = Va, On(false);
        } catch (C) {
          console.error(`PeerAudio.init: error accessing microphone: ${C}`);
        }
      }
      function gY() {
        return JC;
      }
      function On(C) {
        JC != C && (JC = C, JC && $C.getAudioTracks()[0].applyConstraints({
          channelCount: 1
        }), fQ.getPeerConnections().forEach((B) => {
          JC ? _n(B) : Zn(B);
        }));
        const A = document.getElementById("microphoneOn");
        A.style.display = JC ? "inline-block" : "none";
        const I = document.getElementById("microphoneOff");
        I.style.display = JC ? "none" : "inline-block";
      }
      function Va() {
        On(!JC);
      }
      function _n(C) {
        $C !== void 0 && $C.getTracks().forEach((A) => {
          const I = [];
          A.kind === "audio" ? I.push({
            maxBitrate: 16e3
          }) : A.kind === "video" && I.push({
            maxBitrate: 5e5
          });
          const B = C.rtcPeerConnection.addTransceiver(A, {
            direction: "sendonly",
            sendEncodings: I,
            streams: [
              $C
            ]
          });
          C.transceivers.set(A.id, B);
        });
      }
      function Zn(C) {
        $C !== void 0 && $C.getTracks().forEach((A) => {
          const I = C.transceivers, g = I.get(A.id);
          I.delete(A.id), g.stop();
        });
      }
      function CY(C) {
        if (!(C.getVideoTracks().length > 0)) {
          const I = document.createElement("audio");
          I.autoplay = true, I.srcObject = C, document.body.appendChild(I), C.onremovetrack = () => {
            I.remove();
          };
        }
      }
      const ro = {
        init: IY,
        isStreaming: gY,
        startStream: _n,
        stopStream: Zn,
        receiveAudio: CY
      };
      class BY {
        constructor(A, I, g) {
          this.transceivers = /* @__PURE__ */ new Map(), this.peerConnectionId = A, this.isPrimary = I, typeof document < "u" ? this.rtcPeerConnection = new RTCPeerConnection({
            iceServers: g
          }) : this.rtcPeerConnection = new yr.RTCPeerConnection({
            iceServers: g
          }), this.rtcPeerConnection.onnegotiationneeded = (B) => this.onNegotationNeeded(B), this.rtcPeerConnection.onicecandidate = (B) => this.onICECandidate(B), this.rtcPeerConnection.ontrack = (B) => this.onTrack(B), this.makingOffer = false, this.ignoreOffer = false, this.isSettingRemoteAnswerPending = false, this.peerConnectionPhysics = new aY(A, this.rtcPeerConnection), ro.isStreaming() && setTimeout(() => {
            ro.startStream(this);
          }, 500);
        }
        close() {
          this.rtcPeerConnection.close();
        }
        sendLocalDescription() {
          jI.sendMessage({
            type: "peer.sendSDP",
            data: [
              this.peerConnectionId,
              this.rtcPeerConnection.localDescription
            ]
          });
        }
        async setLocalDescription() {
          const A = this.rtcPeerConnection;
          if (typeof document < "u") await A.setLocalDescription();
          else {
            let I;
            const g = A.signalingState;
            if (A.signalingState === "stable" || A.signalingState === "have-local-offer" || A.signalingState === "have-remote-pranswer") I = await A.createOffer();
            else if (A.signalingState === "have-remote-offer" || A.signalingState === "have-local-pranswer") I = await A.createAnswer();
            else {
              console.error(`PeerConnection.setLocalDescription: invalid state: ${A.signalingState}}`);
              return;
            }
            if (g !== "stable" && A.signalingState === "stable") return;
            await A.setLocalDescription(I);
          }
        }
        async onNegotationNeeded(A) {
          this.makingOffer = true;
          try {
            await this.setLocalDescription(), this.sendLocalDescription();
          } catch (I) {
            console.error(`PeerConnection.onNegotationNeeded: error: ${I}`);
          }
          this.makingOffer = false;
        }
        async setRemoteDescription(A) {
          try {
            const I = !this.isPrimary, g = !this.makingOffer && (this.rtcPeerConnection.signalingState === "stable" || this.isSettingRemoteAnswerPending), B = A.type === "offer" && !g;
            if (this.ignoreOffer = !I && B, this.ignoreOffer) return;
            this.isSettingRemoteAnswerPending = A.type === "answer", await this.rtcPeerConnection.setRemoteDescription(A);
            try {
              A.type === "offer" && (await this.setLocalDescription(), this.sendLocalDescription());
            } catch (Q) {
              console.error(`PeerConnection.setRemoteDescription 1: error ${Q}`);
            }
          } catch (I) {
            this.isSettingRemoteAnswerPending = false, console.error(`PeerConnection.setRemoteDescription 2: error ${I}`);
          }
        }
        sendICECandidate(A) {
          jI.sendMessage({
            type: "peer.sendICE",
            data: [
              this.peerConnectionId,
              A
            ]
          });
        }
        onICECandidate(A) {
          A.candidate && this.sendICECandidate(A.candidate);
        }
        async addICECandidate(A) {
          try {
            await this.rtcPeerConnection.addIceCandidate(A);
          } catch (I) {
            this.ignoreOffer || console.error(`PeerConnection.addICECandidate: error: ${I}`);
          }
        }
        onTrack(A) {
          const I = A.track, g = A.streams[0];
          I.kind === "audio" ? typeof document < "u" && ro.receiveAudio(g) : I.kind;
        }
      }
      let vn = [];
      const ZB = /* @__PURE__ */ new Map();
      function QY() {
        jI.sendMessage({
          type: "peer.getICEServers"
        });
      }
      function EY() {
        return ZB;
      }
      function iY(C) {
        const A = C[0], I = C[1];
        ZB.set(A, new BY(A, I, vn));
      }
      function oY(C) {
        const A = C[0], I = C[1], g = ZB.get(A);
        g !== void 0 && g.setRemoteDescription(I);
      }
      function tY(C) {
        const A = C[0], I = C[1], g = ZB.get(A);
        g !== void 0 && g.addICECandidate(I);
      }
      function eY(C) {
        const A = ZB.get(C);
        A !== void 0 && (A.close(), ZB.delete(C));
      }
      function sY(C) {
        switch (jI.parseType(C)[1]) {
          case "getICEServers":
            vn = C.data;
            break;
          case "open":
            iY(C.data);
            break;
          case "sendSDP":
            oY(C.data);
            break;
          case "sendICE":
            tY(C.data);
            break;
          case "close":
            eY(C.data);
            break;
          default:
            console.error(`Peer: unknown message: ${C}`);
            break;
        }
      }
      const fQ = {
        getICEServers: QY,
        getPeerConnections: EY,
        onMessage: sY
      }, uQ = /* @__PURE__ */ new Map();
      class aY {
        constructor(A, I) {
          this.peerConnectionId = A, this.physicsStateChannel = I.createDataChannel("state", {
            id: 0,
            negotiated: true,
            ordered: false,
            maxRetransmits: 0
          }), this.physicsStateChannel.onmessage = (g) => this.onPhysicsStateMessage(g), this.physicsGrabChannel = I.createDataChannel("grab", {
            id: 1,
            negotiated: true,
            ordered: true
          }), this.physicsGrabChannel.onmessage = (g) => this.onPhysicsGrabMessage(g);
        }
        sendPhysicsStateMessage(A) {
          this.physicsStateChannel.readyState === "open" && this.physicsStateChannel.send(A);
        }
        async onPhysicsStateMessage(A) {
          let I;
          A.data instanceof Blob ? I = await A.data.arrayBuffer() : I = A.data;
          const g = new Float32Array(I), B = Array.from(g);
          let Q = 0;
          for (; Q < g.length; ) {
            const E = B[Q++], i = NI.get(E);
            if (i === void 0) break;
            Q = i.decodeState(B, Q);
          }
        }
        sendPhysicsGrabMessage(A) {
          this.physicsGrabChannel.readyState === "open" && this.physicsGrabChannel.send(A);
        }
        async onPhysicsGrabMessage(A) {
          let I;
          A.data instanceof Blob ? I = await A.data.arrayBuffer() : I = A.data;
          const g = new Float32Array(I), B = Array.from(g);
          zB.decodeState(this.peerConnectionId, B);
        }
      }
      function DY(C) {
        return uQ.has(C);
      }
      function nY(C, A) {
        if (A) {
          const I = {
            position: gA.getPosition(C),
            rotation: gA.getRotation(C),
            updateTime: 0
          };
          uQ.set(C, I);
        } else uQ.delete(C);
      }
      function rY() {
        let C = [];
        if (uQ.forEach((A, I) => {
          const B = NI.get(I).encodeState();
          B.length && (C.push(I), C.push(...B));
        }), C.length > 0) {
          const A = new Float32Array(C);
          fQ.getPeerConnections().forEach((g) => {
            g.peerConnectionPhysics.sendPhysicsStateMessage(A.buffer);
          });
        }
        if (C = zB.encodeState(), C.length > 0) {
          const A = new Float32Array(C);
          fQ.getPeerConnections().forEach((g) => {
            g.peerConnectionPhysics.sendPhysicsGrabMessage(A.buffer);
          });
        }
        uQ.forEach((A, I) => {
          const g = gA.getPosition(I), B = gA.getRotation(I), Q = g.sub(A.position).length() > 0.01 && B.angleTo(A.rotation) > 5e-3, E = Vg.getTime();
          Q && E > A.updateTime && (A.position = g, A.rotation = B, A.updateTime = E + 30 + 30 * Math.random(), si.updateState(I));
        });
      }
      const WE = {
        isControlling: DY,
        setControl: nY,
        sendState: rY
      };
      let Pn, Wn = 0;
      function hY() {
        Pn = new xw();
      }
      function wY() {
        return Wn;
      }
      function jn() {
        NI.getPhysicsTickControllers().forEach((C) => {
          C.onPhysicsTick();
        }), zB.update(), gA.step(), Wn += gA.getTimeStep(), WE.sendState();
      }
      let ho = 0;
      function cY() {
        let C = Pn.getDelta();
        C > 0.1 && (C = 0.1), ho += C;
        const A = gA.getTimeStep();
        for (; ho >= A; ) jn(), ho -= A;
        gA.updateRenderer(), NI.getRenderTickControllers().forEach((I) => {
          I.onRenderTick();
        });
      }
      const Vg = {
        init: hY,
        getTime: wY,
        onPhysicsTick: jn,
        onRenderTick: cY
      };
      class me extends bn {
        constructor() {
          super(...arguments), this.updateTime = 0, this.updateVelocity = new J(), this.updateAngularVelocity = new J();
        }
        encodePassiveState() {
          const A = gA.getPosition(this.entityId), I = gA.getRotation(this.entityId), g = gA.getVelocity(this.entityId), B = gA.getAngularVelocity(this.entityId);
          return [
            A.x,
            A.y,
            A.z,
            I.x,
            I.y,
            I.z,
            I.w,
            g.x,
            g.y,
            g.z,
            B.x,
            B.y,
            B.z
          ];
        }
        decodePassiveState(A, I) {
          const g = new J(A[I++], A[I++], A[I++]), B = new SI(A[I++], A[I++], A[I++], A[I++]), Q = new J(A[I++], A[I++], A[I++]), E = new J(A[I++], A[I++], A[I++]);
          return gA.setPosition(this.entityId, g), gA.setRotation(this.entityId, B), gA.setVelocity(this.entityId, Q), gA.setAngularVelocity(this.entityId, E), I;
        }
        isMoving(A, I) {
          return A.length() > 0.01 || I.length() > 5e-3;
        }
        isStateUpdate() {
          const A = Vg.getTime(), I = gA.getVelocity(this.entityId), g = gA.getAngularVelocity(this.entityId), B = this.isMoving(I, g);
          B && (I.clone().sub(this.updateVelocity).length() > 0.2 * I.length() && (this.updateTime = A), g.clone().sub(this.updateAngularVelocity).length() > 0.2 * g.length() && (this.updateTime = A)), this.updateVelocity = I, this.updateAngularVelocity = g;
          const Q = A >= this.updateTime;
          return Q && (this.updateTime = A + (B ? 0.199 : 2 + Math.random() * 4)), Q;
        }
        encodeState() {
          return this.isStateUpdate() ? this.encodePassiveState() : [];
        }
        decodeState(A, I) {
          return this.decodePassiveState(A, I);
        }
      }
      const SY = Array(1024).fill(0).map((C, A) => Math.pow(A / 255 * 0.9478672986 + 0.0521327014, 2.4));
      class lY extends EB {
        constructor(A) {
          super(A), this.type = DC;
        }
        setDataType(A) {
          return this.type = A, this;
        }
        parse(A, I) {
          const g = {
            version: null,
            baseRenditionIsHDR: null,
            gainMapMin: null,
            gainMapMax: null,
            gamma: null,
            offsetSDR: null,
            offsetHDR: null,
            hdrCapacityMin: null,
            hdrCapacityMax: null
          }, B = new TextDecoder(), Q = new DataView(A);
          let E = 0;
          const i = [];
          for (; E < Q.byteLength; ) {
            const e = Q.getUint8(E);
            if (e === 255) {
              const s = Q.getUint8(E + 1);
              [
                216,
                224,
                225,
                226
              ].includes(s) ? (i.push({
                sectionType: s,
                section: [
                  e,
                  s
                ],
                sectionOffset: E + 2
              }), E += 2) : (i[i.length - 1].section.push(e, s), E += 2);
            } else i[i.length - 1].section.push(e), E++;
          }
          let o, t;
          for (let e = 0; e < i.length; e++) {
            const { sectionType: s, section: a, sectionOffset: r } = i[e];
            if (s !== 224) {
              if (s === 225) this._parseXMPMetadata(B.decode(new Uint8Array(a)), g);
              else if (s === 226) {
                const c = new DataView(new Uint8Array(a.slice(2)).buffer);
                if (c.getUint32(2, false) === 1297106432) {
                  const h = c.getUint32(6) === 1229531648, D = 60, U = c.getUint32(D, h), M = c.getUint32(D + 4, h), k = c.getUint32(D + 16, h), p = c.getUint32(D + 20, h) + r + 6;
                  o = new Uint8Array(Q.buffer, M, U), t = new Uint8Array(Q.buffer, p, k);
                }
              }
            }
          }
          if (!g.version) throw new Error("THREE.UltraHDRLoader: Not a valid UltraHDR image");
          if (o && t) this._applyGainmapToSDR(g, o, t, (e, s, a) => {
            I({
              width: s,
              height: a,
              data: e,
              format: ag,
              type: this.type
            });
          }, (e) => {
            throw new Error(e);
          });
          else throw new Error("THREE.UltraHDRLoader: Could not parse UltraHDR images");
        }
        load(A, I, g, B) {
          const Q = new Ce(this.type === DC ? new Uint16Array() : new Float32Array(), 0, 0, ag, this.type, Zt, Zg, Zg, sg, gh, 1, Ag);
          Q.generateMipmaps = true, Q.flipY = true;
          const E = new te(this.manager);
          return E.setResponseType("arraybuffer"), E.setRequestHeader(this.requestHeader), E.setPath(this.path), E.setWithCredentials(this.withCredentials), E.load(A, (i) => {
            try {
              this.parse(i, (o) => {
                Q.image = {
                  data: o.data,
                  width: o.width,
                  height: o.height
                }, Q.needsUpdate = true, I && I(Q, o);
              });
            } catch (o) {
              B && B(o), console.error(o);
            }
          }, g, B), Q;
        }
        _parseXMPMetadata(A, I) {
          const B = new DOMParser().parseFromString(A.substring(A.indexOf("<"), A.lastIndexOf(">") + 1), "text/xml"), [Q] = B.getElementsByTagName("Container:Directory");
          if (!Q) {
            const [E] = B.getElementsByTagName("rdf:Description");
            I.version = E.getAttribute("hdrgm:Version"), I.baseRenditionIsHDR = E.getAttribute("hdrgm:BaseRenditionIsHDR") === "True", I.gainMapMin = parseFloat(E.getAttribute("hdrgm:GainMapMin") || 0), I.gainMapMax = parseFloat(E.getAttribute("hdrgm:GainMapMax") || 1), I.gamma = parseFloat(E.getAttribute("hdrgm:Gamma") || 1), I.offsetSDR = parseFloat(E.getAttribute("hdrgm:OffsetSDR") / (1 / 64)), I.offsetHDR = parseFloat(E.getAttribute("hdrgm:OffsetHDR") / (1 / 64)), I.hdrCapacityMin = parseFloat(E.getAttribute("hdrgm:HDRCapacityMin") || 0), I.hdrCapacityMax = parseFloat(E.getAttribute("hdrgm:HDRCapacityMax") || 1);
          }
        }
        _srgbToLinear(A) {
          return A / 255 < 0.04045 ? A / 255 * 0.0773993808 : A < 1024 ? SY[~~A] : Math.pow(A / 255 * 0.9478672986 + 0.0521327014, 2.4);
        }
        _applyGainmapToSDR(A, I, g, B, Q) {
          const E = (i) => new Promise((o, t) => {
            const e = document.createElement("img");
            e.onload = () => {
              const s = {
                width: e.naturalWidth,
                height: e.naturalHeight,
                source: e
              };
              URL.revokeObjectURL(e.src), o(s);
            }, e.onerror = () => {
              URL.revokeObjectURL(e.src), t();
            }, e.src = URL.createObjectURL(new Blob([
              i
            ], {
              type: "image/jpeg"
            }));
          });
          Promise.all([
            E(I),
            E(g)
          ]).then(([i, o]) => {
            const t = i.width / i.height, e = o.width / o.height;
            if (t !== e) {
              Q("THREE.UltraHDRLoader Error: Aspect ratio mismatch between SDR and Gainmap images");
              return;
            }
            const s = document.createElement("canvas"), a = s.getContext("2d", {
              willReadFrequently: true,
              colorSpace: "srgb"
            });
            s.width = i.width, s.height = i.height, a.drawImage(o.source, 0, 0, o.width, o.height, 0, 0, i.width, i.height);
            const r = a.getImageData(0, 0, i.width, i.height, {
              colorSpace: "srgb"
            });
            a.drawImage(i.source, 0, 0);
            const c = a.getImageData(0, 0, i.width, i.height, {
              colorSpace: "srgb"
            });
            let S;
            this.type === DC ? S = new Uint16Array(c.data.length).fill(23544) : S = new Float32Array(c.data.length).fill(255);
            const h = Math.sqrt(Math.pow(1.8, A.hdrCapacityMax)), D = (Math.log2(h) - A.hdrCapacityMin) / (A.hdrCapacityMax - A.hdrCapacityMin), U = Math.min(Math.max(D, 0), 1), M = A.gamma === 1;
            for (let k = 0; k < c.data.length; k += 4) {
              const p = k / 4 % i.width, R = Math.floor(k / 4 / i.width);
              for (let Y = 0; Y < 3; Y++) {
                const m = c.data[k + Y], K = (R * i.width + p) * 4 + Y, y = r.data[K] / 255, q = M ? y : Math.pow(y, 1 / A.gamma), x = A.gainMapMin * (1 - q) + A.gainMapMax * q, Z = (m + A.offsetSDR) * (x * U === 0 ? 1 : Math.pow(2, x * U)) - A.offsetHDR, j = Math.min(Math.max(this._srgbToLinear(Z), 0), 65504);
                S[k + Y] = this.type === DC ? Vh.toHalfFloat(j) : j;
              }
            }
            B(S, i.width, i.height);
          }).catch(() => {
            throw new Error("THREE.UltraHDRLoader Error: Could not parse UltraHDR images");
          });
        }
      }
      async function Vn(C) {
        return C.endsWith(".jpgr") || C.endsWith(".jpegr") ? await new lY().loadAsync(C) : await new PD().loadAsync(C);
      }
      const Xa = new J(0, 1, 0), GY = new J(0, -1, 0), za = 2e-3, kY = 5 / 3.6, yY = 12 / 3.6, MY = 4, KY = 20, $a = 100, UY = 10, AD = 10, NY = 0.1;
      class FY extends me {
        constructor(A) {
          super(A), this.moveDirection = new J(), this.moveRun = false, this.headTargetRotation = new SI(), this.headRotationFilterAlpha = 0;
          const I = gA.getRotation(A);
          this.bodyTargetRotation = new pI(0, 0, 0, "YXZ").setFromQuaternion(I).y;
          const g = WI.get(A);
          g !== void 0 && (this.head = g.getObjectByName("Head"), this.face = g.getObjectByName("headMesh_1"), this.headRotationFilterAlpha = 1 - Math.exp(-gA.getTimeStep() / NY));
        }
        getHead() {
          return this.head;
        }
        getHeadTargetRotation() {
          return new pI(0, 0, 0, "YXZ").setFromQuaternion(this.headTargetRotation);
        }
        setHeadTargetRotation(A) {
          A.z = 0, this.headTargetRotation.setFromEuler(A);
        }
        moveForward(A) {
          this.moveDirection.z = -A;
        }
        moveRight(A) {
          this.moveDirection.x = A;
        }
        jump() {
          if (this.isGrounded()) {
            const A = new J(0, MY, 0);
            gA.applyVelocityChange(this.entityId, A);
          }
        }
        setRun(A) {
          this.moveRun = A;
        }
        rotateHead(A, I) {
          const g = this.getHeadTargetRotation();
          g.x = _I.clamp(g.x - za * I, _I.degToRad(-60), _I.degToRad(45)), g.y = _I.clamp(g.y - za * A, _I.degToRad(-80), _I.degToRad(80)), this.setHeadTargetRotation(g);
        }
        isGrounded() {
          const A = gA.getPosition(this.entityId), I = new J(A.x, A.y + 0.01, A.z);
          return gA.castRay(I, GY, 0.1, this.entityId) !== null;
        }
        controlBodyPosition() {
          if (this.moveDirection.length() > 0.01) {
            const B = new pI().setFromQuaternion(this.headTargetRotation, "YXZ");
            this.bodyTargetRotation += B.y, B.y = 0, this.headTargetRotation.setFromEuler(B);
          }
          const A = gA.getVelocity(this.entityId), I = this.moveDirection.clone().applyAxisAngle(Xa, this.bodyTargetRotation);
          I.multiplyScalar(this.moveRun ? yY : kY);
          const g = I.sub(A);
          if (g.length() > 0.01) {
            g.y = 0;
            const B = g.multiplyScalar(KY);
            B.length() > $a && B.normalize().multiplyScalar($a), gA.applyImpulse(this.entityId, B);
          }
        }
        controlBodyRotation() {
          const A = gA.getRotation(this.entityId), g = new SI().setFromAxisAngle(Xa, this.bodyTargetRotation).multiply(A.invert());
          g.w < 0 && (g.x = -g.x, g.y = -g.y, g.z = -g.z, g.w = -g.w);
          const B = 2 * Math.acos(_I.clamp(g.w, -1, 1));
          if (Math.abs(B) > 5e-3) {
            const Q = Math.sqrt(1 - g.w * g.w), i = new J().set(g.x / Q, g.y / Q, g.z / Q).multiplyScalar(UY * B), t = gA.getAngularVelocity(this.entityId).multiplyScalar(-0.5), e = i.add(t);
            e.length() > AD && e.normalize().multiplyScalar(AD), gA.applyAngularVelocityChange(this.entityId, e);
          }
        }
        isHeadMoving() {
          if (this.head === void 0) return false;
          const A = this.headTargetRotation.angleTo(this.head.quaternion);
          return Math.abs(A) > 5e-3;
        }
        controlHeadRotation() {
          this.isHeadMoving() && this.head.quaternion.slerp(this.headTargetRotation, this.headRotationFilterAlpha);
        }
        async setServerState(A) {
          const I = this.face, g = A.picture;
          if (I !== void 0 && g !== void 0 && g !== "") try {
            const B = I.material;
            B.color.setHex(16777215), B.map?.dispose();
            const Q = await Vn(g);
            B.map = Q;
          } catch (B) {
            console.error(`BodyController.setServerState: couldn't load "${g}", error: ${B}`);
          }
        }
        encodeBodyState() {
          const A = gA.getPosition(this.entityId), I = gA.getVelocity(this.entityId), g = this.getHeadTargetRotation();
          return [
            A.x,
            A.y,
            A.z,
            I.y,
            this.moveDirection.z,
            this.moveDirection.x,
            this.moveRun ? 1 : 0,
            this.bodyTargetRotation,
            g.x,
            g.y
          ];
        }
        decodeBodyState(A, I) {
          const g = new J(A[I++], A[I++], A[I++]);
          gA.setPosition(this.entityId, g);
          const B = gA.getVelocity(this.entityId);
          B.y = A[I++], gA.setVelocity(this.entityId, B), this.moveDirection.z = A[I++], this.moveDirection.x = A[I++], this.moveRun = A[I++] != 0, this.bodyTargetRotation = A[I++];
          const Q = this.getHeadTargetRotation();
          return Q.x = A[I++], Q.y = A[I++], this.setHeadTargetRotation(Q), I;
        }
        isMoving(A, I) {
          return super.isMoving(A, I) || this.isHeadMoving();
        }
        encodeState() {
          return this.isStateUpdate() ? this.encodeBodyState() : [];
        }
        decodeState(A, I) {
          return this.decodeBodyState(A, I);
        }
        onPhysicsTick() {
          super.onPhysicsTick(), this.controlBodyPosition(), this.controlBodyRotation(), this.controlHeadRotation();
        }
      }
      const wo = new J(0, 1, 0), JY = new J(0, -1, 0), RY = 5, ID = 0.2, pY = 0.02, dY = 15e-4, gD = 0.02;
      class YY extends me {
        constructor(A) {
          super(A), this.targetActive = false, this.targetBallId = -1, this.targetPosition = gA.getPosition(A), this.targetRotation = this.getRotation(gA.getRotation(A)), this.targetDribblerLevel = 0;
        }
        getRotation(A) {
          return new pI(0, 0, 0, "YXZ").setFromQuaternion(A).y;
        }
        getDeltaAngle(A, I) {
          const g = (I - A) % (2 * Math.PI);
          return g > Math.PI ? g - 2 * Math.PI : g <= -Math.PI ? g + 2 * Math.PI : g;
        }
        isGrounded() {
          const A = gA.getPosition(this.entityId), I = new J(A.x, A.y + 0.01, A.z);
          return gA.castRay(I, JY, 0.1, this.entityId) !== null;
        }
        isBallInDribbler() {
          if (this.targetBallId < 0) return false;
          const A = gA.getPosition(this.entityId), I = gA.getRotation(this.entityId), B = gA.getPosition(this.targetBallId).clone().sub(A).applyQuaternion(I.clone().invert());
          return B.x >= -0.04 && B.x <= 0.04 && B.y >= 0.01 && B.y <= 0.033 && B.z >= -0.105 && B.z <= -0.08;
        }
        isTargetActive() {
          if (!this.targetActive) return false;
          const A = gA.getRotation(this.entityId), I = wo.clone().applyQuaternion(A), g = Math.acos(wo.dot(I));
          return this.isGrounded() && g < _I.degToRad(30);
        }
        controlPosition() {
          const A = gA.getPosition(this.entityId), I = this.targetPosition.clone().sub(A);
          if (I.y = 0, I.length() > 5e-3) {
            const g = gA.getVelocity(this.entityId);
            g.y = 0;
            const B = I.multiplyScalar(RY), Q = g.multiplyScalar(-1.2), E = B.add(Q);
            E.length() > ID && E.normalize().multiplyScalar(ID), gA.applyImpulse(this.entityId, E);
          }
        }
        controlRotation() {
          const A = this.getRotation(gA.getRotation(this.entityId)), I = this.getDeltaAngle(this.targetRotation, A);
          if (Math.abs(I) > 1e-3) {
            const g = gA.getAngularVelocity(this.entityId).y, B = -I * pY - g * dY, Q = wo.clone().multiplyScalar(B);
            Q.length() > gD && Q.normalize().multiplyScalar(gD), gA.applyTorqueImpulse(this.entityId, Q);
          }
        }
        controlDribbler() {
          if (this.isBallInDribbler()) {
            const A = gA.getRotation(this.entityId), I = new J(0, 0, 1).applyQuaternion(A).multiplyScalar(0.01 * this.targetDribblerLevel);
            gA.applyImpulse(this.targetBallId, I);
          }
        }
        enableTarget(A) {
          this.targetActive = A, this.targetPosition = gA.getPosition(this.entityId), this.targetRotation = this.getRotation(gA.getRotation(this.entityId));
        }
        encodeBotState() {
          return [
            this.targetBallId,
            this.targetPosition.x,
            this.targetPosition.z,
            this.targetRotation,
            this.targetDribblerLevel
          ];
        }
        decodeBotState(A, I) {
          if (!this.isTargetActive()) {
            const g = new SI();
            gA.setRotation(this.entityId, g);
          }
          return this.targetBallId = A[I++], this.targetPosition.x = A[I++], this.targetPosition.z = A[I++], this.targetRotation = A[I++], this.targetDribblerLevel = A[I++], I;
        }
        encodeState() {
          if (this.isStateUpdate()) if (this.isTargetActive()) {
            const A = [
              1
            ];
            return A.push(...this.encodeBotState()), A;
          } else {
            const A = [
              0
            ];
            return A.push(...this.encodePassiveState()), A;
          }
          return [];
        }
        decodeState(A, I) {
          return this.targetActive = A[I++] !== 0, this.targetActive ? this.decodeBotState(A, I) : this.decodePassiveState(A, I);
        }
        onPhysicsTick() {
          super.onPhysicsTick(), this.isTargetActive() && (this.controlPosition(), this.controlRotation(), this.controlDribbler());
        }
      }
      const ai = /* @__PURE__ */ new Map();
      let Rt;
      const jE = /* @__PURE__ */ new Set(), qY = /* @__PURE__ */ new Set();
      function LY(C, A) {
        let I;
        switch (A.controller) {
          case "passive":
            I = new me(C);
            break;
          case "body":
            I = new FY(C), jE.add(I);
            break;
          case "user:edabot":
            I = new YY(C), jE.add(I);
            break;
          default:
            I = new bn(C);
            break;
        }
        A.state !== void 0 && I.setServerState(A.state), ai.set(C, I);
      }
      function Te(C) {
        return ai.get(C);
      }
      function fY(C, A) {
        const I = Te(C);
        I !== void 0 && I.setServerState(A);
      }
      function uY(C) {
        const A = Te(C);
        A !== void 0 && jE.delete(A), ai.delete(C);
      }
      function HY() {
        return Rt;
      }
      function mY(C) {
        C !== void 0 ? Rt = ai.get(C) : Rt = void 0;
      }
      function TY() {
        return jE;
      }
      function bY() {
        return qY;
      }
      const NI = {
        add: LY,
        get: Te,
        update: fY,
        remove: uY,
        getBodyController: HY,
        setBodyId: mY,
        getPhysicsTickControllers: TY,
        getRenderTickControllers: bY
      };
      function xY() {
        const C = WI.getCanvas();
        C.addEventListener("keydown", OY), C.addEventListener("keyup", _Y), C.addEventListener("mousedown", ZY), C.addEventListener("mousemove", vY), C.addEventListener("mouseup", PY), C.addEventListener("contextmenu", WY), C.addEventListener("blur", jY);
      }
      function OY(C) {
        if (C.repeat) return;
        const A = C.key.toLowerCase(), I = NI.getBodyController();
        switch (A) {
          case "w":
            I.moveForward(1);
            break;
          case "s":
            C.ctrlKey || I.moveForward(-1);
            break;
          case "a":
            I.moveRight(-1);
            break;
          case "d":
            I.moveRight(1);
            break;
          case " ":
            I.jump();
            break;
        }
        I.setRun(C.shiftKey);
      }
      function _Y(C) {
        const A = C.key.toLowerCase(), I = NI.getBodyController();
        switch (A) {
          case "w":
          case "s":
            I.moveForward(0);
            break;
          case "a":
          case "d":
            I.moveRight(0);
            break;
        }
        I.setRun(C.shiftKey);
      }
      function ZY(C) {
        C.button === 2 && WI.getCanvas().requestPointerLock();
      }
      function vY(C) {
        C.buttons & 2 && NI.getBodyController().rotateHead(C.movementX, C.movementY);
      }
      function PY(C) {
        C.button === 2 && document.exitPointerLock();
      }
      function WY(C) {
        C.preventDefault();
      }
      function jY() {
        const C = NI.getBodyController();
        C.moveForward(0), C.moveRight(0), C.setRun(false);
      }
      const VY = {
        init: xY
      }, CD = new zw();
      let BB = false, Xn, zn, BD, QD, pt, be, jC, dt, $n;
      function XY() {
        const C = WI.getCanvas();
        C.addEventListener("mousedown", $Y), C.addEventListener("mousemove", Aq), C.addEventListener("mouseup", Iq), C.addEventListener("mouseleave", ED), C.addEventListener("wheel", gq), C.addEventListener("blur", ED);
      }
      function zY() {
        xe();
      }
      function Yt(C) {
        return new pI(0, 0, 0, "YXZ").setFromQuaternion(C).y;
      }
      function qt(C) {
        return new pI(0, C, 0, "YXZ");
      }
      function xe() {
        if (!BB) return;
        const C = be.clone().sub(pt), A = new J(C.x, C.y, jC).add(dt), I = WI.getCamera(), g = Yt(I.quaternion), B = qt(g);
        BD = A.applyEuler(B).add(I.position), QD = new SI().setFromEuler(qt($n + g)), zB.grab(-1, Xn, zn, BD, QD);
      }
      function Ar(C) {
        return new XA(C.clientX / window.innerWidth * 2 - 1, -(C.clientY / window.innerHeight) * 2 + 1);
      }
      function Di(C) {
        const A = WI.getCanvas();
        A.style.cursor = C;
      }
      function Oe(C) {
        const A = Ar(C);
        CD.setFromCamera(A, WI.getCamera());
        const g = NI.getBodyController().entityId, B = CD.ray, Q = gA.castRay(B.origin, B.direction, 2, g);
        if (Q !== null) {
          const E = Q.entityId;
          if (gA.isDynamic(E)) return {
            entityId: E,
            position: Q.position,
            mousePosition: A
          };
        }
      }
      function $Y(C) {
        if (C.button == 0) {
          const A = Oe(C);
          if (A !== void 0) {
            Di("grabbing");
            const I = gA.getPosition(A.entityId), g = gA.getRotation(A.entityId);
            Xn = A.entityId, zn = A.position.clone().sub(I).applyQuaternion(g.clone().invert()), BB = true, pt = A.mousePosition, be = pt, jC = 0;
            const B = WI.getCamera(), Q = Yt(B.quaternion);
            dt = A.position.clone().sub(B.position), dt.applyEuler(qt(-Q)), $n = Yt(g) - Q, xe();
          }
        }
      }
      function Aq(C) {
        BB ? (be = Ar(C), xe()) : Di(Oe(C) !== void 0 ? "grab" : "");
      }
      function Iq(C) {
        C.button == 0 && BB && (Di(Oe(C) !== void 0 ? "grab" : ""), BB = false, zB.release(-1));
      }
      function ED() {
        BB = false, zB.release(-1), Di("");
      }
      function gq(C) {
        BB && (jC += 0.04 * (C.deltaY / 100), jC < -1 ? jC = -1 : jC > 1 && (jC = 1));
      }
      const Ir = {
        init: XY,
        onRenderTick: zY
      };
      let NB;
      function Cq(C) {
        NB = C;
      }
      function Bq() {
        const A = NI.getBodyController().getHead();
        if (NB !== void 0 && A !== void 0) {
          A.getWorldPosition(NB.position), A.getWorldQuaternion(NB.quaternion);
          const I = new J(0, 0.09, -0.09).applyQuaternion(NB.quaternion);
          NB.position.add(I);
        }
      }
      const gr = {
        init: Cq,
        onRenderTick: Bq
      };
      var lQ = function() {
        var C = 0, A = document.createElement("div");
        A.style.cssText = "position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000", A.addEventListener("click", function(e) {
          e.preventDefault(), g(++C % A.children.length);
        }, false);
        function I(e) {
          return A.appendChild(e.dom), e;
        }
        function g(e) {
          for (var s = 0; s < A.children.length; s++) A.children[s].style.display = s === e ? "block" : "none";
          C = e;
        }
        var B = (performance || Date).now(), Q = B, E = 0, i = I(new lQ.Panel("FPS", "#0ff", "#002")), o = I(new lQ.Panel("MS", "#0f0", "#020"));
        if (self.performance && self.performance.memory) var t = I(new lQ.Panel("MB", "#f08", "#201"));
        return g(0), {
          REVISION: 16,
          dom: A,
          addPanel: I,
          showPanel: g,
          begin: function() {
            B = (performance || Date).now();
          },
          end: function() {
            E++;
            var e = (performance || Date).now();
            if (o.update(e - B, 200), e >= Q + 1e3 && (i.update(E * 1e3 / (e - Q), 100), Q = e, E = 0, t)) {
              var s = performance.memory;
              t.update(s.usedJSHeapSize / 1048576, s.jsHeapSizeLimit / 1048576);
            }
            return e;
          },
          update: function() {
            B = this.end();
          },
          domElement: A,
          setMode: g
        };
      };
      lQ.Panel = function(C, A, I) {
        var g = 1 / 0, B = 0, Q = Math.round, E = Q(window.devicePixelRatio || 1), i = 80 * E, o = 48 * E, t = 3 * E, e = 2 * E, s = 3 * E, a = 15 * E, r = 74 * E, c = 30 * E, S = document.createElement("canvas");
        S.width = i, S.height = o, S.style.cssText = "width:80px;height:48px";
        var h = S.getContext("2d");
        return h.font = "bold " + 9 * E + "px Helvetica,Arial,sans-serif", h.textBaseline = "top", h.fillStyle = I, h.fillRect(0, 0, i, o), h.fillStyle = A, h.fillText(C, t, e), h.fillRect(s, a, r, c), h.fillStyle = I, h.globalAlpha = 0.9, h.fillRect(s, a, r, c), {
          dom: S,
          update: function(D, U) {
            g = Math.min(g, D), B = Math.max(B, D), h.fillStyle = I, h.globalAlpha = 1, h.fillRect(0, 0, i, a), h.fillStyle = A, h.fillText(Q(D) + " " + C + " (" + Q(g) + "-" + Q(B) + ")", t, e), h.drawImage(S, s + E, a, r - E, c, s, a, r - E, c), h.fillRect(s + r - E, a, E, c), h.fillStyle = I, h.globalAlpha = 0.9, h.fillRect(s + r - E, a, E, Q((1 - D / U) * c));
          }
        };
      };
      let Lt;
      function Qq() {
        Lt = new lQ(), document.getElementById("sceneView").appendChild(Lt.dom);
      }
      function Eq() {
        Lt.update();
      }
      const Cr = {
        init: Qq,
        update: Eq
      };
      let co;
      function iq(C) {
        co = new bD(new fg(), new Ee({
          color: 16777215,
          vertexColors: true
        })), co.frustumCulled = false, C.add(co);
      }
      function oq() {
      }
      const tq = {
        init: iq,
        onRenderTick: oq
      };
      let Eg, nQ, GQ, ft, LC, HQ, Br = false, UE;
      const eq = [], mQ = /* @__PURE__ */ new Map();
      function sq() {
        return Od.isWebGL2Available();
      }
      function aq() {
        Eg = new iw(), nQ = document.createElement("canvas"), nQ.setAttribute("tabindex", "0"), document.getElementById("webGLContainer").appendChild(nQ), GQ = new Lk({
          canvas: nQ
        }), GQ.setAnimationLoop(Dq), GQ.shadowMap.enabled = true, ft = new xd(), document.getElementById("css3DContainer").appendChild(ft.domElement), LC = new Qg(60, window.innerWidth / window.innerHeight, 0.1, 1e3), VY.init(), Ir.init(), gr.init(LC), window.addEventListener("resize", iD), iD(), Cr.init(), tq.init(Eg), window.addEventListener("beforeunload", nq);
      }
      function Dq() {
        Br && (Vg.onRenderTick(), gr.onRenderTick(), Ir.onRenderTick(), HQ !== void 0 && HQ.update(), ft.render(Eg, LC), GQ.render(Eg, LC), Cr.update());
      }
      function iD() {
        LC.aspect = window.innerWidth / window.innerHeight, LC.updateProjectionMatrix(), GQ.setSize(window.innerWidth, window.innerHeight);
      }
      function nq() {
        const C = NI.getBodyController();
        C !== void 0 && si.updateState(C.entityId);
      }
      function rq(C) {
        Br = C;
        const A = document.getElementById("sceneView");
        A.style.display = C ? "block" : "none";
      }
      function hq() {
        return LC;
      }
      function wq() {
        return nQ;
      }
      function cq(C, A) {
        Eg !== void 0 && (Eg.add(A), mQ.set(C, A));
      }
      function Sq(C) {
        return mQ.get(C);
      }
      function lq(C) {
        const A = mQ.get(C);
        A !== void 0 && (mQ.delete(C), Qr(A));
      }
      function Gq(C, A) {
        const I = mQ.get(C);
        I !== void 0 && (I.position.copy(A.position), I.quaternion.copy(A.rotation));
      }
      function Qr(C) {
        C.parent && C.parent.remove(C), C.traverse((A) => {
          A instanceof ig && (A.geometry && A.geometry.dispose(), (Array.isArray(A.material) ? A.material : [
            A.material
          ]).forEach((g) => {
            for (const B in g) g[B] && g[B].isTexture && g[B].dispose();
            g.dispose();
          }));
        });
      }
      async function kq(C, A) {
        if (Eg !== void 0) {
          const I = await Vn(C);
          I && (I.mapping = LE), UE && UE.dispose(), UE = I, Eg.background instanceof uI && Eg.background.dispose(), Eg.background = UE, Eg.backgroundRotation = A;
        }
      }
      function yq() {
        if (Eg !== void 0) {
          eq.forEach((A) => {
            Qr(A);
          });
          const C = new mw(8421504);
          Eg.add(C);
        }
      }
      function Mq(C, A, I) {
        if (Eg !== void 0) {
          const g = new J(0, 0, 1).applyEuler(I);
          HQ = new md({
            maxFar: 50,
            cascades: 4,
            shadowMapSize: 1024,
            lightIntensity: A,
            lightDirection: g,
            camera: LC,
            parent: Eg
          });
        }
      }
      function Kq(C) {
        HQ !== void 0 && HQ.setupMaterial(C);
      }
      const WI = {
        isCompatible: sq,
        init: aq,
        getCamera: hq,
        getCanvas: wq,
        showView: rq,
        add: cq,
        get: Sq,
        remove: lq,
        setTransform: Gq,
        setEnvironmentMap: kq,
        clearDirectionalLights: yq,
        addDirectionalLight: Mq,
        setupMaterial: Kq
      };
      class ni {
        constructor(A, I) {
          this.position = A !== void 0 ? A : new J(), this.rotation = I !== void 0 ? I : new SI();
        }
      }
      function Er(C, A) {
        return new ni(A.position.clone().applyQuaternion(C.rotation).add(C.position), C.rotation.clone().multiply(A.rotation));
      }
      function Uq(C) {
        return new ni(C.position.clone().negate(), C.rotation.clone().invert());
      }
      let AC;
      const qg = /* @__PURE__ */ new Map(), TQ = /* @__PURE__ */ new Set(), oD = /* @__PURE__ */ new Map([
        [
          "maximum",
          $I.CoefficientCombineRule.Max
        ],
        [
          "multiply",
          $I.CoefficientCombineRule.Multiply
        ],
        [
          "minimum",
          $I.CoefficientCombineRule.Min
        ],
        [
          "average",
          $I.CoefficientCombineRule.Average
        ]
      ]);
      function Nq() {
        const C = new J();
        AC = new $I.World(C);
      }
      function Fq() {
        return AC.timestep;
      }
      function Jq(C) {
        AC.timestep = C;
      }
      function Rq(C) {
        AC.gravity = C;
      }
      function pq(C, A, I, g, B, Q) {
        qg.has(C) || qg.set(C, []);
        const E = qg.get(C), i = E.length;
        let o;
        I ? (o = $I.RigidBodyDesc.dynamic(), TQ.add(C)) : o = $I.RigidBodyDesc.fixed(), o.setTranslation(A.position.x, A.position.y, A.position.z), o.setRotation(A.rotation), I && (g !== void 0 && B !== void 0 && Q !== void 0 ? o.setAdditionalMassProperties(I, g, B, Q) : o.setAdditionalMass(I), o.linearDamping = 0.3, o.angularDamping = 0.5);
        let t;
        return i === 0 && (t = AC.createRigidBody(o), t.userData = C), E[i] = {
          rigidBody: t,
          transform: A
        }, i;
      }
      function QB(C, A, I, g) {
        const B = qg.get(C);
        if (B === void 0) return;
        const Q = B[A];
        if (Q === void 0) return;
        const E = Q.rigidBody;
        if (E === void 0) return;
        const i = Q.transform, o = g.transform, t = o.position.clone().sub(i.position), e = o.rotation.clone().multiply(i.rotation.clone().invert());
        I.setTranslation(t.x, t.y, t.z), I.setRotation(e), g.friction !== void 0 && I.setFriction(g.friction);
        const s = oD.get(g.frictionCombine);
        s !== void 0 && I.setFrictionCombineRule(s), g.restitution !== void 0 && I.setRestitution(g.restitution);
        const a = oD.get(g.restitutionCombine);
        a !== void 0 && I.setRestitutionCombineRule(a), AC.createCollider(I, E);
      }
      function dq(C, A, I, g) {
        const B = $I.ColliderDesc.cuboid(I.x / 2, I.y / 2, I.z / 2);
        QB(C, A, B, g);
      }
      function Yq(C, A, I, g) {
        const B = $I.ColliderDesc.ball(I);
        QB(C, A, B, g);
      }
      function qq(C, A, I, g, B) {
        const Q = $I.ColliderDesc.capsule(I / 2, g);
        QB(C, A, Q, B);
      }
      function Lq(C, A, I, g, B) {
        const Q = $I.ColliderDesc.cylinder(I / 2, g);
        QB(C, A, Q, B);
      }
      function fq(C, A, I, g, B) {
        const Q = $I.ColliderDesc.cylinder(I / 2, g);
        QB(C, A, Q, B);
      }
      function uq(C, A, I, g, B, Q) {
        if (I) {
          const E = $I.ColliderDesc.convexHull(g);
          E !== null && QB(C, A, E, Q);
        } else {
          const E = $I.ColliderDesc.trimesh(g, B);
          QB(C, A, E, Q);
        }
      }
      function Hq(C) {
        return TQ.has(C);
      }
      function mq(C) {
        qg.has(C) && (qg.get(C)?.forEach((I) => {
          const g = I.rigidBody;
          g !== void 0 && AC.removeRigidBody(g);
        }), qg.delete(C)), TQ.has(C) && TQ.delete(C);
      }
      function ng(C) {
        return qg.get(C)[0].rigidBody;
      }
      function Tq(C) {
        return ng(C).isSleeping();
      }
      function bq(C) {
        const A = ng(C).translation();
        return new J(A.x, A.y, A.z);
      }
      function xq(C) {
        const A = ng(C).rotation();
        return new SI(A.x, A.y, A.z, A.w);
      }
      function Oq(C) {
        const A = ng(C).linvel();
        return new J(A.x, A.y, A.z);
      }
      function _q(C) {
        const A = ng(C).angvel();
        return new J(A.x, A.y, A.z);
      }
      function Zq(C, A) {
        ng(C).setTranslation(A, false);
      }
      function vq(C, A) {
        ng(C).setRotation(A, false);
      }
      function Pq(C, A) {
        ng(C).setLinvel(A, false);
      }
      function Wq(C, A) {
        ng(C).setAngvel(A, false);
      }
      function jq(C, A) {
        const I = ng(C), g = I.linvel(), B = new J(g.x + A.x, g.y + A.y, g.z + A.z);
        I.setLinvel(B, true);
      }
      function Vq(C, A) {
        const I = ng(C), g = I.angvel(), B = new J(g.x + A.x, g.y + A.y, g.z + A.z);
        I.setAngvel(B, true);
      }
      function Xq(C, A) {
        ng(C).applyImpulse(A, true);
      }
      function zq(C, A) {
        ng(C).applyTorqueImpulse(A, true);
      }
      function $q(C, A) {
        if (qg.has(C)) {
          const g = qg.get(C)[0], B = g.transform, Q = Er(A, B), E = g.rigidBody;
          E.setTranslation(Q.position, true), E.setRotation(Q.rotation, true), E.setLinvel(new J(), true), E.setAngvel(new J(), true);
        }
      }
      function AL(C, A, I, g) {
        let B;
        g != null && (B = ng(g));
        const Q = AC.castRay(new $I.Ray(C, A), I, false, $I.QueryFilterFlags.EXCLUDE_SENSORS, void 0, void 0, B, void 0);
        if (Q !== null) {
          const i = Q.collider.parent().userData, o = A.clone().multiplyScalar(Q.timeOfImpact).add(C);
          return {
            entityId: i,
            position: o
          };
        } else return null;
      }
      function IL() {
        AC.step();
      }
      function gL() {
        TQ.forEach((C) => {
          const I = qg.get(C)[0], g = I.rigidBody, B = g.translation(), Q = g.rotation(), E = new ni(new J(B.x, B.y, B.z), new SI(Q.x, Q.y, Q.z, Q.w)), i = I.transform, o = Er(E, Uq(i));
          WI.setTransform(C, o);
        });
      }
      function CL() {
        return AC.debugRender();
      }
      const gA = {
        init: Nq,
        getTimeStep: Fq,
        setTimeStep: Jq,
        setGravity: Rq,
        createRigidBody: pq,
        addBoxCollider: dq,
        addSphereCollider: Yq,
        addCapsuleCollider: qq,
        addCylinderCollider: Lq,
        addConeCollider: fq,
        addMeshCollider: uq,
        isDynamic: Hq,
        remove: mq,
        isSleeping: Tq,
        getPosition: bq,
        getRotation: xq,
        getVelocity: Oq,
        getAngularVelocity: _q,
        setPosition: Zq,
        setRotation: vq,
        setVelocity: Pq,
        setAngularVelocity: Wq,
        applyVelocityChange: jq,
        applyAngularVelocityChange: Vq,
        applyImpulse: Xq,
        applyTorqueImpulse: zq,
        setTransform: $q,
        castRay: AL,
        step: IL,
        updateRenderer: gL,
        getDebugRender: CL
      };
      function BL() {
        try {
          if (typeof document < "u") {
            let C = "", A = "";
            const I = document.createElement("canvas").getContext("webgl");
            if (I !== null) {
              const Q = I.getExtension("WEBGL_debug_renderer_info");
              Q !== null && (C = I.getParameter(Q.UNMASKED_VENDOR_WEBGL), A = I.getParameter(Q.UNMASKED_RENDERER_WEBGL));
            }
            const B = navigator.deviceMemory ?? 0;
            jI.sendMessage({
              type: "user.sendSystemStats",
              data: {
                hardwareConcurrency: navigator.hardwareConcurrency,
                language: navigator.language,
                languages: navigator.languages,
                maxTouchPoints: navigator.maxTouchPoints,
                memory: B,
                platform: navigator.platform,
                screenWidth: window.screen.width,
                screenHeight: window.screen.height,
                screenColorDepth: window.screen.colorDepth,
                time: /* @__PURE__ */ new Date(),
                timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                timeZoneOffset: -(/* @__PURE__ */ new Date()).getTimezoneOffset() / 60,
                userAgent: navigator.userAgent,
                webGLRenderer: A,
                webGLVendor: C,
                windowWidth: window.innerWidth,
                windowHeight: window.innerHeight,
                windowDevicePixelRatio: window.devicePixelRatio
              }
            });
          }
        } catch (C) {
          console.error(`User.sendSystemStats: error: ${C}`);
        }
      }
      function QL() {
        try {
          jI.sendMessage({
            type: "user.sendRuntimeStats",
            data: {}
          });
        } catch (C) {
          console.error(`User.sendRuntimeStats: error: ${C}`);
        }
      }
      let ut;
      function EL(C) {
        ut = C, jI.sendMessage({
          type: "user.getEntities"
        });
      }
      function iL(C) {
        switch (jI.parseType(C)[1]) {
          case "sendSystemStats":
            break;
          case "sendRuntimeStats":
            break;
          case "getEntities":
            ut !== void 0 && ut(C.data);
            break;
          case "conflict":
            jI.setDisconnectReason("conflict");
            break;
          case "serverdown":
            jI.setDisconnectReason("serverdown");
            break;
          default:
            console.error(`User: unknown message: ${C}`);
        }
      }
      const ir = {
        sendSystemStats: BL,
        sendRuntimeStats: QL,
        getEntities: EL,
        onMessage: iL
      }, oL = "https://www.openreality.app:3467/getaccesstoken?code=", tL = "wss://www.openreality.app:3467/access?token=";
      let YE, FB;
      async function eL(C) {
        const A = await fetch(oL + C);
        if (A.ok) return A.text();
        throw new Error("NotAuthorized");
      }
      function or(C) {
        const A = C.type;
        if (typeof A == "string") {
          const I = A.split(".");
          if (I.length === 2) return I;
        }
        return [
          "",
          ""
        ];
      }
      async function sL(C, A) {
        bt.setServerCallback(A), gA.init(), YE = "error", FB = new mk(tL + C), FB.onopen = (I) => {
          YE = "disconnect", fQ.getICEServers(), A("open");
        }, FB.onmessage = (I) => {
          const g = JSON.parse(I.data);
          switch (or(g)[0]) {
            case "peer":
              fQ.onMessage(g);
              break;
            case "presence":
              bt.onMessage(g);
              break;
            case "user":
              ir.onMessage(g);
              break;
            case "world":
              si.onMessage(g);
              break;
            default:
              console.error(`Server: unknown message: ${g}`);
              break;
          }
        }, FB.onerror = (I) => {
          console.error(`Server: websocket error: ${I}`), A("error");
        }, FB.onclose = (I) => {
          A(YE);
        };
      }
      function aL(C) {
        YE = C;
      }
      function DL(C) {
        const A = JSON.stringify(C, (I, g) => g.toFixed ? Number(g.toFixed(4)) : g);
        FB.send(A);
      }
      const jI = {
        getAccessToken: eL,
        connect: sL,
        parseType: or,
        setDisconnectReason: aL,
        sendMessage: DL
      };
      function tD(C, A) {
        if (A === Bh) return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."), C;
        if (A === et || A === FD) {
          let I = C.getIndex();
          if (I === null) {
            const E = [], i = C.getAttribute("position");
            if (i !== void 0) {
              for (let o = 0; o < i.count; o++) E.push(o);
              C.setIndex(E), I = C.getIndex();
            } else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."), C;
          }
          const g = I.count - 2, B = [];
          if (A === et) for (let E = 1; E <= g; E++) B.push(I.getX(0)), B.push(I.getX(E)), B.push(I.getX(E + 1));
          else for (let E = 0; E < g; E++) E % 2 === 0 ? (B.push(I.getX(E)), B.push(I.getX(E + 1)), B.push(I.getX(E + 2))) : (B.push(I.getX(E + 2)), B.push(I.getX(E + 1)), B.push(I.getX(E)));
          B.length / 3 !== g && console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");
          const Q = C.clone();
          return Q.setIndex(B), Q.clearGroups(), Q;
        } else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:", A), C;
      }
      let nL = class extends EB {
        constructor(A) {
          super(A), this.dracoLoader = null, this.ktx2Loader = null, this.meshoptDecoder = null, this.pluginCallbacks = [], this.register(function(I) {
            return new SL(I);
          }), this.register(function(I) {
            return new lL(I);
          }), this.register(function(I) {
            return new JL(I);
          }), this.register(function(I) {
            return new RL(I);
          }), this.register(function(I) {
            return new pL(I);
          }), this.register(function(I) {
            return new kL(I);
          }), this.register(function(I) {
            return new yL(I);
          }), this.register(function(I) {
            return new ML(I);
          }), this.register(function(I) {
            return new KL(I);
          }), this.register(function(I) {
            return new cL(I);
          }), this.register(function(I) {
            return new UL(I);
          }), this.register(function(I) {
            return new GL(I);
          }), this.register(function(I) {
            return new FL(I);
          }), this.register(function(I) {
            return new NL(I);
          }), this.register(function(I) {
            return new hL(I);
          }), this.register(function(I) {
            return new dL(I);
          }), this.register(function(I) {
            return new YL(I);
          });
        }
        load(A, I, g, B) {
          const Q = this;
          let E;
          if (this.resourcePath !== "") E = this.resourcePath;
          else if (this.path !== "") {
            const t = wQ.extractUrlBase(A);
            E = wQ.resolveURL(t, this.path);
          } else E = wQ.extractUrlBase(A);
          this.manager.itemStart(A);
          const i = function(t) {
            B ? B(t) : console.error(t), Q.manager.itemError(A), Q.manager.itemEnd(A);
          }, o = new te(this.manager);
          o.setPath(this.path), o.setResponseType("arraybuffer"), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials), o.load(A, function(t) {
            try {
              Q.parse(t, E, function(e) {
                I(e), Q.manager.itemEnd(A);
              }, i);
            } catch (e) {
              i(e);
            }
          }, g, i);
        }
        setDRACOLoader(A) {
          return this.dracoLoader = A, this;
        }
        setKTX2Loader(A) {
          return this.ktx2Loader = A, this;
        }
        setMeshoptDecoder(A) {
          return this.meshoptDecoder = A, this;
        }
        register(A) {
          return this.pluginCallbacks.indexOf(A) === -1 && this.pluginCallbacks.push(A), this;
        }
        unregister(A) {
          return this.pluginCallbacks.indexOf(A) !== -1 && this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(A), 1), this;
        }
        parse(A, I, g, B) {
          let Q;
          const E = {}, i = {}, o = new TextDecoder();
          if (typeof A == "string") Q = JSON.parse(A);
          else if (A instanceof ArrayBuffer) if (o.decode(new Uint8Array(A, 0, 4)) === tr) {
            try {
              E[VA.KHR_BINARY_GLTF] = new qL(A);
            } catch (s) {
              B && B(s);
              return;
            }
            Q = JSON.parse(E[VA.KHR_BINARY_GLTF].content);
          } else Q = JSON.parse(o.decode(A));
          else Q = A;
          if (Q.asset === void 0 || Q.asset.version[0] < 2) {
            B && B(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));
            return;
          }
          const t = new PL(Q, {
            path: I || this.resourcePath || "",
            crossOrigin: this.crossOrigin,
            requestHeader: this.requestHeader,
            manager: this.manager,
            ktx2Loader: this.ktx2Loader,
            meshoptDecoder: this.meshoptDecoder
          });
          t.fileLoader.setRequestHeader(this.requestHeader);
          for (let e = 0; e < this.pluginCallbacks.length; e++) {
            const s = this.pluginCallbacks[e](t);
            s.name || console.error("THREE.GLTFLoader: Invalid plugin found: missing name"), i[s.name] = s, E[s.name] = true;
          }
          if (Q.extensionsUsed) for (let e = 0; e < Q.extensionsUsed.length; ++e) {
            const s = Q.extensionsUsed[e], a = Q.extensionsRequired || [];
            switch (s) {
              case VA.KHR_MATERIALS_UNLIT:
                E[s] = new wL();
                break;
              case VA.KHR_DRACO_MESH_COMPRESSION:
                E[s] = new LL(Q, this.dracoLoader);
                break;
              case VA.KHR_TEXTURE_TRANSFORM:
                E[s] = new fL();
                break;
              case VA.KHR_MESH_QUANTIZATION:
                E[s] = new uL();
                break;
              default:
                a.indexOf(s) >= 0 && i[s] === void 0 && console.warn('THREE.GLTFLoader: Unknown extension "' + s + '".');
            }
          }
          t.setExtensions(E), t.setPlugins(i), t.parse(g, B);
        }
        parseAsync(A, I) {
          const g = this;
          return new Promise(function(B, Q) {
            g.parse(A, I, B, Q);
          });
        }
      };
      function rL() {
        let C = {};
        return {
          get: function(A) {
            return C[A];
          },
          add: function(A, I) {
            C[A] = I;
          },
          remove: function(A) {
            delete C[A];
          },
          removeAll: function() {
            C = {};
          }
        };
      }
      const VA = {
        KHR_BINARY_GLTF: "KHR_binary_glTF",
        KHR_DRACO_MESH_COMPRESSION: "KHR_draco_mesh_compression",
        KHR_LIGHTS_PUNCTUAL: "KHR_lights_punctual",
        KHR_MATERIALS_CLEARCOAT: "KHR_materials_clearcoat",
        KHR_MATERIALS_DISPERSION: "KHR_materials_dispersion",
        KHR_MATERIALS_IOR: "KHR_materials_ior",
        KHR_MATERIALS_SHEEN: "KHR_materials_sheen",
        KHR_MATERIALS_SPECULAR: "KHR_materials_specular",
        KHR_MATERIALS_TRANSMISSION: "KHR_materials_transmission",
        KHR_MATERIALS_IRIDESCENCE: "KHR_materials_iridescence",
        KHR_MATERIALS_ANISOTROPY: "KHR_materials_anisotropy",
        KHR_MATERIALS_UNLIT: "KHR_materials_unlit",
        KHR_MATERIALS_VOLUME: "KHR_materials_volume",
        KHR_TEXTURE_BASISU: "KHR_texture_basisu",
        KHR_TEXTURE_TRANSFORM: "KHR_texture_transform",
        KHR_MESH_QUANTIZATION: "KHR_mesh_quantization",
        KHR_MATERIALS_EMISSIVE_STRENGTH: "KHR_materials_emissive_strength",
        EXT_MATERIALS_BUMP: "EXT_materials_bump",
        EXT_TEXTURE_WEBP: "EXT_texture_webp",
        EXT_TEXTURE_AVIF: "EXT_texture_avif",
        EXT_MESHOPT_COMPRESSION: "EXT_meshopt_compression",
        EXT_MESH_GPU_INSTANCING: "EXT_mesh_gpu_instancing"
      };
      class hL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_LIGHTS_PUNCTUAL, this.cache = {
            refs: {},
            uses: {}
          };
        }
        _markDefs() {
          const A = this.parser, I = this.parser.json.nodes || [];
          for (let g = 0, B = I.length; g < B; g++) {
            const Q = I[g];
            Q.extensions && Q.extensions[this.name] && Q.extensions[this.name].light !== void 0 && A._addNodeRef(this.cache, Q.extensions[this.name].light);
          }
        }
        _loadLight(A) {
          const I = this.parser, g = "light:" + A;
          let B = I.cache.get(g);
          if (B) return B;
          const Q = I.json, o = ((Q.extensions && Q.extensions[this.name] || {}).lights || [])[A];
          let t;
          const e = new mA(16777215);
          o.color !== void 0 && e.setRGB(o.color[0], o.color[1], o.color[2], Ag);
          const s = o.range !== void 0 ? o.range : 0;
          switch (o.type) {
            case "directional":
              t = new WD(e), t.target.position.set(0, 0, -1), t.add(t.target);
              break;
            case "point":
              t = new uw(e), t.distance = s;
              break;
            case "spot":
              t = new Lw(e), t.distance = s, o.spot = o.spot || {}, o.spot.innerConeAngle = o.spot.innerConeAngle !== void 0 ? o.spot.innerConeAngle : 0, o.spot.outerConeAngle = o.spot.outerConeAngle !== void 0 ? o.spot.outerConeAngle : Math.PI / 4, t.angle = o.spot.outerConeAngle, t.penumbra = 1 - o.spot.innerConeAngle / o.spot.outerConeAngle, t.target.position.set(0, 0, -1), t.add(t.target);
              break;
            default:
              throw new Error("THREE.GLTFLoader: Unexpected light type: " + o.type);
          }
          return t.position.set(0, 0, 0), xg(t, o), o.intensity !== void 0 && (t.intensity = o.intensity), t.name = I.createUniqueName(o.name || "light_" + A), B = Promise.resolve(t), I.cache.add(g, B), B;
        }
        getDependency(A, I) {
          if (A === "light") return this._loadLight(I);
        }
        createNodeAttachment(A) {
          const I = this, g = this.parser, Q = g.json.nodes[A], i = (Q.extensions && Q.extensions[this.name] || {}).light;
          return i === void 0 ? null : this._loadLight(i).then(function(o) {
            return g._getNodeRef(I.cache, i, o);
          });
        }
      }
      class wL {
        constructor() {
          this.name = VA.KHR_MATERIALS_UNLIT;
        }
        getMaterialType() {
          return VC;
        }
        extendParams(A, I, g) {
          const B = [];
          A.color = new mA(1, 1, 1), A.opacity = 1;
          const Q = I.pbrMetallicRoughness;
          if (Q) {
            if (Array.isArray(Q.baseColorFactor)) {
              const E = Q.baseColorFactor;
              A.color.setRGB(E[0], E[1], E[2], Ag), A.opacity = E[3];
            }
            Q.baseColorTexture !== void 0 && B.push(g.assignTexture(A, "map", Q.baseColorTexture, PI));
          }
          return Promise.all(B);
        }
      }
      class cL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_MATERIALS_EMISSIVE_STRENGTH;
        }
        extendMaterialParams(A, I) {
          const B = this.parser.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = B.extensions[this.name].emissiveStrength;
          return Q !== void 0 && (I.emissiveIntensity = Q), Promise.resolve();
        }
      }
      class SL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_MATERIALS_CLEARCOAT;
        }
        getMaterialType(A) {
          const g = this.parser.json.materials[A];
          return !g.extensions || !g.extensions[this.name] ? null : $g;
        }
        extendMaterialParams(A, I) {
          const g = this.parser, B = g.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = [], E = B.extensions[this.name];
          if (E.clearcoatFactor !== void 0 && (I.clearcoat = E.clearcoatFactor), E.clearcoatTexture !== void 0 && Q.push(g.assignTexture(I, "clearcoatMap", E.clearcoatTexture)), E.clearcoatRoughnessFactor !== void 0 && (I.clearcoatRoughness = E.clearcoatRoughnessFactor), E.clearcoatRoughnessTexture !== void 0 && Q.push(g.assignTexture(I, "clearcoatRoughnessMap", E.clearcoatRoughnessTexture)), E.clearcoatNormalTexture !== void 0 && (Q.push(g.assignTexture(I, "clearcoatNormalMap", E.clearcoatNormalTexture)), E.clearcoatNormalTexture.scale !== void 0)) {
            const i = E.clearcoatNormalTexture.scale;
            I.clearcoatNormalScale = new XA(i, i);
          }
          return Promise.all(Q);
        }
      }
      class lL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_MATERIALS_DISPERSION;
        }
        getMaterialType(A) {
          const g = this.parser.json.materials[A];
          return !g.extensions || !g.extensions[this.name] ? null : $g;
        }
        extendMaterialParams(A, I) {
          const B = this.parser.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = B.extensions[this.name];
          return I.dispersion = Q.dispersion !== void 0 ? Q.dispersion : 0, Promise.resolve();
        }
      }
      class GL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_MATERIALS_IRIDESCENCE;
        }
        getMaterialType(A) {
          const g = this.parser.json.materials[A];
          return !g.extensions || !g.extensions[this.name] ? null : $g;
        }
        extendMaterialParams(A, I) {
          const g = this.parser, B = g.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = [], E = B.extensions[this.name];
          return E.iridescenceFactor !== void 0 && (I.iridescence = E.iridescenceFactor), E.iridescenceTexture !== void 0 && Q.push(g.assignTexture(I, "iridescenceMap", E.iridescenceTexture)), E.iridescenceIor !== void 0 && (I.iridescenceIOR = E.iridescenceIor), I.iridescenceThicknessRange === void 0 && (I.iridescenceThicknessRange = [
            100,
            400
          ]), E.iridescenceThicknessMinimum !== void 0 && (I.iridescenceThicknessRange[0] = E.iridescenceThicknessMinimum), E.iridescenceThicknessMaximum !== void 0 && (I.iridescenceThicknessRange[1] = E.iridescenceThicknessMaximum), E.iridescenceThicknessTexture !== void 0 && Q.push(g.assignTexture(I, "iridescenceThicknessMap", E.iridescenceThicknessTexture)), Promise.all(Q);
        }
      }
      class kL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_MATERIALS_SHEEN;
        }
        getMaterialType(A) {
          const g = this.parser.json.materials[A];
          return !g.extensions || !g.extensions[this.name] ? null : $g;
        }
        extendMaterialParams(A, I) {
          const g = this.parser, B = g.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = [];
          I.sheenColor = new mA(0, 0, 0), I.sheenRoughness = 0, I.sheen = 1;
          const E = B.extensions[this.name];
          if (E.sheenColorFactor !== void 0) {
            const i = E.sheenColorFactor;
            I.sheenColor.setRGB(i[0], i[1], i[2], Ag);
          }
          return E.sheenRoughnessFactor !== void 0 && (I.sheenRoughness = E.sheenRoughnessFactor), E.sheenColorTexture !== void 0 && Q.push(g.assignTexture(I, "sheenColorMap", E.sheenColorTexture, PI)), E.sheenRoughnessTexture !== void 0 && Q.push(g.assignTexture(I, "sheenRoughnessMap", E.sheenRoughnessTexture)), Promise.all(Q);
        }
      }
      class yL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_MATERIALS_TRANSMISSION;
        }
        getMaterialType(A) {
          const g = this.parser.json.materials[A];
          return !g.extensions || !g.extensions[this.name] ? null : $g;
        }
        extendMaterialParams(A, I) {
          const g = this.parser, B = g.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = [], E = B.extensions[this.name];
          return E.transmissionFactor !== void 0 && (I.transmission = E.transmissionFactor), E.transmissionTexture !== void 0 && Q.push(g.assignTexture(I, "transmissionMap", E.transmissionTexture)), Promise.all(Q);
        }
      }
      class ML {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_MATERIALS_VOLUME;
        }
        getMaterialType(A) {
          const g = this.parser.json.materials[A];
          return !g.extensions || !g.extensions[this.name] ? null : $g;
        }
        extendMaterialParams(A, I) {
          const g = this.parser, B = g.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = [], E = B.extensions[this.name];
          I.thickness = E.thicknessFactor !== void 0 ? E.thicknessFactor : 0, E.thicknessTexture !== void 0 && Q.push(g.assignTexture(I, "thicknessMap", E.thicknessTexture)), I.attenuationDistance = E.attenuationDistance || 1 / 0;
          const i = E.attenuationColor || [
            1,
            1,
            1
          ];
          return I.attenuationColor = new mA().setRGB(i[0], i[1], i[2], Ag), Promise.all(Q);
        }
      }
      class KL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_MATERIALS_IOR;
        }
        getMaterialType(A) {
          const g = this.parser.json.materials[A];
          return !g.extensions || !g.extensions[this.name] ? null : $g;
        }
        extendMaterialParams(A, I) {
          const B = this.parser.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = B.extensions[this.name];
          return I.ior = Q.ior !== void 0 ? Q.ior : 1.5, Promise.resolve();
        }
      }
      class UL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_MATERIALS_SPECULAR;
        }
        getMaterialType(A) {
          const g = this.parser.json.materials[A];
          return !g.extensions || !g.extensions[this.name] ? null : $g;
        }
        extendMaterialParams(A, I) {
          const g = this.parser, B = g.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = [], E = B.extensions[this.name];
          I.specularIntensity = E.specularFactor !== void 0 ? E.specularFactor : 1, E.specularTexture !== void 0 && Q.push(g.assignTexture(I, "specularIntensityMap", E.specularTexture));
          const i = E.specularColorFactor || [
            1,
            1,
            1
          ];
          return I.specularColor = new mA().setRGB(i[0], i[1], i[2], Ag), E.specularColorTexture !== void 0 && Q.push(g.assignTexture(I, "specularColorMap", E.specularColorTexture, PI)), Promise.all(Q);
        }
      }
      class NL {
        constructor(A) {
          this.parser = A, this.name = VA.EXT_MATERIALS_BUMP;
        }
        getMaterialType(A) {
          const g = this.parser.json.materials[A];
          return !g.extensions || !g.extensions[this.name] ? null : $g;
        }
        extendMaterialParams(A, I) {
          const g = this.parser, B = g.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = [], E = B.extensions[this.name];
          return I.bumpScale = E.bumpFactor !== void 0 ? E.bumpFactor : 1, E.bumpTexture !== void 0 && Q.push(g.assignTexture(I, "bumpMap", E.bumpTexture)), Promise.all(Q);
        }
      }
      class FL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_MATERIALS_ANISOTROPY;
        }
        getMaterialType(A) {
          const g = this.parser.json.materials[A];
          return !g.extensions || !g.extensions[this.name] ? null : $g;
        }
        extendMaterialParams(A, I) {
          const g = this.parser, B = g.json.materials[A];
          if (!B.extensions || !B.extensions[this.name]) return Promise.resolve();
          const Q = [], E = B.extensions[this.name];
          return E.anisotropyStrength !== void 0 && (I.anisotropy = E.anisotropyStrength), E.anisotropyRotation !== void 0 && (I.anisotropyRotation = E.anisotropyRotation), E.anisotropyTexture !== void 0 && Q.push(g.assignTexture(I, "anisotropyMap", E.anisotropyTexture)), Promise.all(Q);
        }
      }
      class JL {
        constructor(A) {
          this.parser = A, this.name = VA.KHR_TEXTURE_BASISU;
        }
        loadTexture(A) {
          const I = this.parser, g = I.json, B = g.textures[A];
          if (!B.extensions || !B.extensions[this.name]) return null;
          const Q = B.extensions[this.name], E = I.options.ktx2Loader;
          if (!E) {
            if (g.extensionsRequired && g.extensionsRequired.indexOf(this.name) >= 0) throw new Error("THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures");
            return null;
          }
          return I.loadTextureImage(A, Q.source, E);
        }
      }
      class RL {
        constructor(A) {
          this.parser = A, this.name = VA.EXT_TEXTURE_WEBP;
        }
        loadTexture(A) {
          const I = this.name, g = this.parser, B = g.json, Q = B.textures[A];
          if (!Q.extensions || !Q.extensions[I]) return null;
          const E = Q.extensions[I], i = B.images[E.source];
          let o = g.textureLoader;
          if (i.uri) {
            const t = g.options.manager.getHandler(i.uri);
            t !== null && (o = t);
          }
          return g.loadTextureImage(A, E.source, o);
        }
      }
      class pL {
        constructor(A) {
          this.parser = A, this.name = VA.EXT_TEXTURE_AVIF;
        }
        loadTexture(A) {
          const I = this.name, g = this.parser, B = g.json, Q = B.textures[A];
          if (!Q.extensions || !Q.extensions[I]) return null;
          const E = Q.extensions[I], i = B.images[E.source];
          let o = g.textureLoader;
          if (i.uri) {
            const t = g.options.manager.getHandler(i.uri);
            t !== null && (o = t);
          }
          return g.loadTextureImage(A, E.source, o);
        }
      }
      class dL {
        constructor(A) {
          this.name = VA.EXT_MESHOPT_COMPRESSION, this.parser = A;
        }
        loadBufferView(A) {
          const I = this.parser.json, g = I.bufferViews[A];
          if (g.extensions && g.extensions[this.name]) {
            const B = g.extensions[this.name], Q = this.parser.getDependency("buffer", B.buffer), E = this.parser.options.meshoptDecoder;
            if (!E || !E.supported) {
              if (I.extensionsRequired && I.extensionsRequired.indexOf(this.name) >= 0) throw new Error("THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files");
              return null;
            }
            return Q.then(function(i) {
              const o = B.byteOffset || 0, t = B.byteLength || 0, e = B.count, s = B.byteStride, a = new Uint8Array(i, o, t);
              return E.decodeGltfBufferAsync ? E.decodeGltfBufferAsync(e, s, a, B.mode, B.filter).then(function(r) {
                return r.buffer;
              }) : E.ready.then(function() {
                const r = new ArrayBuffer(e * s);
                return E.decodeGltfBuffer(new Uint8Array(r), e, s, a, B.mode, B.filter), r;
              });
            });
          } else return null;
        }
      }
      class YL {
        constructor(A) {
          this.name = VA.EXT_MESH_GPU_INSTANCING, this.parser = A;
        }
        createNodeMesh(A) {
          const I = this.parser.json, g = I.nodes[A];
          if (!g.extensions || !g.extensions[this.name] || g.mesh === void 0) return null;
          const B = I.meshes[g.mesh];
          for (const t of B.primitives) if (t.mode !== Mg.TRIANGLES && t.mode !== Mg.TRIANGLE_STRIP && t.mode !== Mg.TRIANGLE_FAN && t.mode !== void 0) return null;
          const E = g.extensions[this.name].attributes, i = [], o = {};
          for (const t in E) i.push(this.parser.getDependency("accessor", E[t]).then((e) => (o[t] = e, o[t])));
          return i.length < 1 ? null : (i.push(this.parser.createNodeMesh(A)), Promise.all(i).then((t) => {
            const e = t.pop(), s = e.isGroup ? e.children : [
              e
            ], a = t[0].count, r = [];
            for (const c of s) {
              const S = new uA(), h = new J(), D = new SI(), U = new J(1, 1, 1), M = new Dw(c.geometry, c.material, a);
              for (let k = 0; k < a; k++) o.TRANSLATION && h.fromBufferAttribute(o.TRANSLATION, k), o.ROTATION && D.fromBufferAttribute(o.ROTATION, k), o.SCALE && U.fromBufferAttribute(o.SCALE, k), M.setMatrixAt(k, S.compose(h, D, U));
              for (const k in o) if (k === "_COLOR_0") {
                const p = o[k];
                M.instanceColor = new at(p.array, p.itemSize, p.normalized);
              } else k !== "TRANSLATION" && k !== "ROTATION" && k !== "SCALE" && c.geometry.setAttribute(k, o[k]);
              UI.prototype.copy.call(M, c), this.parser.assignFinalMaterial(M), r.push(M);
            }
            return e.isGroup ? (e.clear(), e.add(...r), e) : r[0];
          }));
        }
      }
      const tr = "glTF", sQ = 12, eD = {
        JSON: 1313821514,
        BIN: 5130562
      };
      class qL {
        constructor(A) {
          this.name = VA.KHR_BINARY_GLTF, this.content = null, this.body = null;
          const I = new DataView(A, 0, sQ), g = new TextDecoder();
          if (this.header = {
            magic: g.decode(new Uint8Array(A.slice(0, 4))),
            version: I.getUint32(4, true),
            length: I.getUint32(8, true)
          }, this.header.magic !== tr) throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");
          if (this.header.version < 2) throw new Error("THREE.GLTFLoader: Legacy binary file detected.");
          const B = this.header.length - sQ, Q = new DataView(A, sQ);
          let E = 0;
          for (; E < B; ) {
            const i = Q.getUint32(E, true);
            E += 4;
            const o = Q.getUint32(E, true);
            if (E += 4, o === eD.JSON) {
              const t = new Uint8Array(A, sQ + E, i);
              this.content = g.decode(t);
            } else if (o === eD.BIN) {
              const t = sQ + E;
              this.body = A.slice(t, t + i);
            }
            E += i;
          }
          if (this.content === null) throw new Error("THREE.GLTFLoader: JSON content not found.");
        }
      }
      class LL {
        constructor(A, I) {
          if (!I) throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");
          this.name = VA.KHR_DRACO_MESH_COMPRESSION, this.json = A, this.dracoLoader = I, this.dracoLoader.preload();
        }
        decodePrimitive(A, I) {
          const g = this.json, B = this.dracoLoader, Q = A.extensions[this.name].bufferView, E = A.extensions[this.name].attributes, i = {}, o = {}, t = {};
          for (const e in E) {
            const s = Ht[e] || e.toLowerCase();
            i[s] = E[e];
          }
          for (const e in A.attributes) {
            const s = Ht[e] || e.toLowerCase();
            if (E[e] !== void 0) {
              const a = g.accessors[A.attributes[e]], r = YB[a.componentType];
              t[s] = r.name, o[s] = a.normalized === true;
            }
          }
          return I.getDependency("bufferView", Q).then(function(e) {
            return new Promise(function(s, a) {
              B.decodeDracoFile(e, function(r) {
                for (const c in r.attributes) {
                  const S = r.attributes[c], h = o[c];
                  h !== void 0 && (S.normalized = h);
                }
                s(r);
              }, i, t, Ag, a);
            });
          });
        }
      }
      class fL {
        constructor() {
          this.name = VA.KHR_TEXTURE_TRANSFORM;
        }
        extendTexture(A, I) {
          return (I.texCoord === void 0 || I.texCoord === A.channel) && I.offset === void 0 && I.rotation === void 0 && I.scale === void 0 || (A = A.clone(), I.texCoord !== void 0 && (A.channel = I.texCoord), I.offset !== void 0 && A.offset.fromArray(I.offset), I.rotation !== void 0 && (A.rotation = I.rotation), I.scale !== void 0 && A.repeat.fromArray(I.scale), A.needsUpdate = true), A;
        }
      }
      class uL {
        constructor() {
          this.name = VA.KHR_MESH_QUANTIZATION;
        }
      }
      class er extends OQ {
        constructor(A, I, g, B) {
          super(A, I, g, B);
        }
        copySampleValue_(A) {
          const I = this.resultBuffer, g = this.sampleValues, B = this.valueSize, Q = A * B * 3 + B;
          for (let E = 0; E !== B; E++) I[E] = g[Q + E];
          return I;
        }
        interpolate_(A, I, g, B) {
          const Q = this.resultBuffer, E = this.sampleValues, i = this.valueSize, o = i * 2, t = i * 3, e = B - I, s = (g - I) / e, a = s * s, r = a * s, c = A * t, S = c - t, h = -2 * r + 3 * a, D = r - a, U = 1 - h, M = D - a + s;
          for (let k = 0; k !== i; k++) {
            const p = E[S + k + i], R = E[S + k + o] * e, Y = E[c + k + i], m = E[c + k] * e;
            Q[k] = U * p + M * R + h * Y + D * m;
          }
          return Q;
        }
      }
      const HL = new SI();
      class mL extends er {
        interpolate_(A, I, g, B) {
          const Q = super.interpolate_(A, I, g, B);
          return HL.fromArray(Q).normalize().toArray(Q), Q;
        }
      }
      const Mg = {
        POINTS: 0,
        LINES: 1,
        LINE_LOOP: 2,
        LINE_STRIP: 3,
        TRIANGLES: 4,
        TRIANGLE_STRIP: 5,
        TRIANGLE_FAN: 6
      }, YB = {
        5120: Int8Array,
        5121: Uint8Array,
        5122: Int16Array,
        5123: Uint16Array,
        5125: Uint32Array,
        5126: Float32Array
      }, sD = {
        9728: og,
        9729: sg,
        9984: lD,
        9985: NE,
        9986: aQ,
        9987: aC
      }, aD = {
        33071: Zg,
        33648: fE,
        10497: uB
      }, So = {
        SCALAR: 1,
        VEC2: 2,
        VEC3: 3,
        VEC4: 4,
        MAT2: 4,
        MAT3: 9,
        MAT4: 16
      }, Ht = {
        POSITION: "position",
        NORMAL: "normal",
        TANGENT: "tangent",
        TEXCOORD_0: "uv",
        TEXCOORD_1: "uv1",
        TEXCOORD_2: "uv2",
        TEXCOORD_3: "uv3",
        COLOR_0: "color",
        WEIGHTS_0: "skinWeight",
        JOINTS_0: "skinIndex"
      }, FC = {
        scale: "scale",
        translation: "position",
        rotation: "quaternion",
        weights: "morphTargetInfluences"
      }, TL = {
        CUBICSPLINE: void 0,
        LINEAR: NQ,
        STEP: UQ
      }, lo = {
        OPAQUE: "OPAQUE",
        MASK: "MASK",
        BLEND: "BLEND"
      };
      function bL(C) {
        return C.DefaultMaterial === void 0 && (C.DefaultMaterial = new oe({
          color: 16777215,
          emissive: 0,
          metalness: 1,
          roughness: 1,
          transparent: false,
          depthTest: true,
          side: Wg
        })), C.DefaultMaterial;
      }
      function _C(C, A, I) {
        for (const g in I.extensions) C[g] === void 0 && (A.userData.gltfExtensions = A.userData.gltfExtensions || {}, A.userData.gltfExtensions[g] = I.extensions[g]);
      }
      function xg(C, A) {
        A.extras !== void 0 && (typeof A.extras == "object" ? Object.assign(C.userData, A.extras) : console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, " + A.extras));
      }
      function xL(C, A, I) {
        let g = false, B = false, Q = false;
        for (let t = 0, e = A.length; t < e; t++) {
          const s = A[t];
          if (s.POSITION !== void 0 && (g = true), s.NORMAL !== void 0 && (B = true), s.COLOR_0 !== void 0 && (Q = true), g && B && Q) break;
        }
        if (!g && !B && !Q) return Promise.resolve(C);
        const E = [], i = [], o = [];
        for (let t = 0, e = A.length; t < e; t++) {
          const s = A[t];
          if (g) {
            const a = s.POSITION !== void 0 ? I.getDependency("accessor", s.POSITION) : C.attributes.position;
            E.push(a);
          }
          if (B) {
            const a = s.NORMAL !== void 0 ? I.getDependency("accessor", s.NORMAL) : C.attributes.normal;
            i.push(a);
          }
          if (Q) {
            const a = s.COLOR_0 !== void 0 ? I.getDependency("accessor", s.COLOR_0) : C.attributes.color;
            o.push(a);
          }
        }
        return Promise.all([
          Promise.all(E),
          Promise.all(i),
          Promise.all(o)
        ]).then(function(t) {
          const e = t[0], s = t[1], a = t[2];
          return g && (C.morphAttributes.position = e), B && (C.morphAttributes.normal = s), Q && (C.morphAttributes.color = a), C.morphTargetsRelative = true, C;
        });
      }
      function OL(C, A) {
        if (C.updateMorphTargets(), A.weights !== void 0) for (let I = 0, g = A.weights.length; I < g; I++) C.morphTargetInfluences[I] = A.weights[I];
        if (A.extras && Array.isArray(A.extras.targetNames)) {
          const I = A.extras.targetNames;
          if (C.morphTargetInfluences.length === I.length) {
            C.morphTargetDictionary = {};
            for (let g = 0, B = I.length; g < B; g++) C.morphTargetDictionary[I[g]] = g;
          } else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.");
        }
      }
      function _L(C) {
        let A;
        const I = C.extensions && C.extensions[VA.KHR_DRACO_MESH_COMPRESSION];
        if (I ? A = "draco:" + I.bufferView + ":" + I.indices + ":" + Go(I.attributes) : A = C.indices + ":" + Go(C.attributes) + ":" + C.mode, C.targets !== void 0) for (let g = 0, B = C.targets.length; g < B; g++) A += ":" + Go(C.targets[g]);
        return A;
      }
      function Go(C) {
        let A = "";
        const I = Object.keys(C).sort();
        for (let g = 0, B = I.length; g < B; g++) A += I[g] + ":" + C[I[g]] + ";";
        return A;
      }
      function mt(C) {
        switch (C) {
          case Int8Array:
            return 1 / 127;
          case Uint8Array:
            return 1 / 255;
          case Int16Array:
            return 1 / 32767;
          case Uint16Array:
            return 1 / 65535;
          default:
            throw new Error("THREE.GLTFLoader: Unsupported normalized accessor component type.");
        }
      }
      function ZL(C) {
        return C.search(/\.jpe?g($|\?)/i) > 0 || C.search(/^data\:image\/jpeg/) === 0 ? "image/jpeg" : C.search(/\.webp($|\?)/i) > 0 || C.search(/^data\:image\/webp/) === 0 ? "image/webp" : C.search(/\.ktx2($|\?)/i) > 0 || C.search(/^data\:image\/ktx2/) === 0 ? "image/ktx2" : "image/png";
      }
      const vL = new uA();
      class PL {
        constructor(A = {}, I = {}) {
          this.json = A, this.extensions = {}, this.plugins = {}, this.options = I, this.cache = new rL(), this.associations = /* @__PURE__ */ new Map(), this.primitiveCache = {}, this.nodeCache = {}, this.meshCache = {
            refs: {},
            uses: {}
          }, this.cameraCache = {
            refs: {},
            uses: {}
          }, this.lightCache = {
            refs: {},
            uses: {}
          }, this.sourceCache = {}, this.textureCache = {}, this.nodeNamesUsed = {};
          let g = false, B = -1, Q = false, E = -1;
          if (typeof navigator < "u") {
            const i = navigator.userAgent;
            g = /^((?!chrome|android).)*safari/i.test(i) === true;
            const o = i.match(/Version\/(\d+)/);
            B = g && o ? parseInt(o[1], 10) : -1, Q = i.indexOf("Firefox") > -1, E = Q ? i.match(/Firefox\/([0-9]+)\./)[1] : -1;
          }
          typeof createImageBitmap > "u" || g && B < 17 || Q && E < 98 ? this.textureLoader = new PD(this.options.manager) : this.textureLoader = new Tw(this.options.manager), this.textureLoader.setCrossOrigin(this.options.crossOrigin), this.textureLoader.setRequestHeader(this.options.requestHeader), this.fileLoader = new te(this.options.manager), this.fileLoader.setResponseType("arraybuffer"), this.options.crossOrigin === "use-credentials" && this.fileLoader.setWithCredentials(true);
        }
        setExtensions(A) {
          this.extensions = A;
        }
        setPlugins(A) {
          this.plugins = A;
        }
        parse(A, I) {
          const g = this, B = this.json, Q = this.extensions;
          this.cache.removeAll(), this.nodeCache = {}, this._invokeAll(function(E) {
            return E._markDefs && E._markDefs();
          }), Promise.all(this._invokeAll(function(E) {
            return E.beforeRoot && E.beforeRoot();
          })).then(function() {
            return Promise.all([
              g.getDependencies("scene"),
              g.getDependencies("animation"),
              g.getDependencies("camera")
            ]);
          }).then(function(E) {
            const i = {
              scene: E[0][B.scene || 0],
              scenes: E[0],
              animations: E[1],
              cameras: E[2],
              asset: B.asset,
              parser: g,
              userData: {}
            };
            return _C(Q, i, B), xg(i, B), Promise.all(g._invokeAll(function(o) {
              return o.afterRoot && o.afterRoot(i);
            })).then(function() {
              for (const o of i.scenes) o.updateMatrixWorld();
              A(i);
            });
          }).catch(I);
        }
        _markDefs() {
          const A = this.json.nodes || [], I = this.json.skins || [], g = this.json.meshes || [];
          for (let B = 0, Q = I.length; B < Q; B++) {
            const E = I[B].joints;
            for (let i = 0, o = E.length; i < o; i++) A[E[i]].isBone = true;
          }
          for (let B = 0, Q = A.length; B < Q; B++) {
            const E = A[B];
            E.mesh !== void 0 && (this._addNodeRef(this.meshCache, E.mesh), E.skin !== void 0 && (g[E.mesh].isSkinnedMesh = true)), E.camera !== void 0 && this._addNodeRef(this.cameraCache, E.camera);
          }
        }
        _addNodeRef(A, I) {
          I !== void 0 && (A.refs[I] === void 0 && (A.refs[I] = A.uses[I] = 0), A.refs[I]++);
        }
        _getNodeRef(A, I, g) {
          if (A.refs[I] <= 1) return g;
          const B = g.clone(), Q = (E, i) => {
            const o = this.associations.get(E);
            o != null && this.associations.set(i, o);
            for (const [t, e] of E.children.entries()) Q(e, i.children[t]);
          };
          return Q(g, B), B.name += "_instance_" + A.uses[I]++, B;
        }
        _invokeOne(A) {
          const I = Object.values(this.plugins);
          I.push(this);
          for (let g = 0; g < I.length; g++) {
            const B = A(I[g]);
            if (B) return B;
          }
          return null;
        }
        _invokeAll(A) {
          const I = Object.values(this.plugins);
          I.unshift(this);
          const g = [];
          for (let B = 0; B < I.length; B++) {
            const Q = A(I[B]);
            Q && g.push(Q);
          }
          return g;
        }
        getDependency(A, I) {
          const g = A + ":" + I;
          let B = this.cache.get(g);
          if (!B) {
            switch (A) {
              case "scene":
                B = this.loadScene(I);
                break;
              case "node":
                B = this._invokeOne(function(Q) {
                  return Q.loadNode && Q.loadNode(I);
                });
                break;
              case "mesh":
                B = this._invokeOne(function(Q) {
                  return Q.loadMesh && Q.loadMesh(I);
                });
                break;
              case "accessor":
                B = this.loadAccessor(I);
                break;
              case "bufferView":
                B = this._invokeOne(function(Q) {
                  return Q.loadBufferView && Q.loadBufferView(I);
                });
                break;
              case "buffer":
                B = this.loadBuffer(I);
                break;
              case "material":
                B = this._invokeOne(function(Q) {
                  return Q.loadMaterial && Q.loadMaterial(I);
                });
                break;
              case "texture":
                B = this._invokeOne(function(Q) {
                  return Q.loadTexture && Q.loadTexture(I);
                });
                break;
              case "skin":
                B = this.loadSkin(I);
                break;
              case "animation":
                B = this._invokeOne(function(Q) {
                  return Q.loadAnimation && Q.loadAnimation(I);
                });
                break;
              case "camera":
                B = this.loadCamera(I);
                break;
              default:
                if (B = this._invokeOne(function(Q) {
                  return Q != this && Q.getDependency && Q.getDependency(A, I);
                }), !B) throw new Error("Unknown type: " + A);
                break;
            }
            this.cache.add(g, B);
          }
          return B;
        }
        getDependencies(A) {
          let I = this.cache.get(A);
          if (!I) {
            const g = this, B = this.json[A + (A === "mesh" ? "es" : "s")] || [];
            I = Promise.all(B.map(function(Q, E) {
              return g.getDependency(A, E);
            })), this.cache.add(A, I);
          }
          return I;
        }
        loadBuffer(A) {
          const I = this.json.buffers[A], g = this.fileLoader;
          if (I.type && I.type !== "arraybuffer") throw new Error("THREE.GLTFLoader: " + I.type + " buffer type is not supported.");
          if (I.uri === void 0 && A === 0) return Promise.resolve(this.extensions[VA.KHR_BINARY_GLTF].body);
          const B = this.options;
          return new Promise(function(Q, E) {
            g.load(wQ.resolveURL(I.uri, B.path), Q, void 0, function() {
              E(new Error('THREE.GLTFLoader: Failed to load buffer "' + I.uri + '".'));
            });
          });
        }
        loadBufferView(A) {
          const I = this.json.bufferViews[A];
          return this.getDependency("buffer", I.buffer).then(function(g) {
            const B = I.byteLength || 0, Q = I.byteOffset || 0;
            return g.slice(Q, Q + B);
          });
        }
        loadAccessor(A) {
          const I = this, g = this.json, B = this.json.accessors[A];
          if (B.bufferView === void 0 && B.sparse === void 0) {
            const E = So[B.type], i = YB[B.componentType], o = B.normalized === true, t = new i(B.count * E);
            return Promise.resolve(new tg(t, E, o));
          }
          const Q = [];
          return B.bufferView !== void 0 ? Q.push(this.getDependency("bufferView", B.bufferView)) : Q.push(null), B.sparse !== void 0 && (Q.push(this.getDependency("bufferView", B.sparse.indices.bufferView)), Q.push(this.getDependency("bufferView", B.sparse.values.bufferView))), Promise.all(Q).then(function(E) {
            const i = E[0], o = So[B.type], t = YB[B.componentType], e = t.BYTES_PER_ELEMENT, s = e * o, a = B.byteOffset || 0, r = B.bufferView !== void 0 ? g.bufferViews[B.bufferView].byteStride : void 0, c = B.normalized === true;
            let S, h;
            if (r && r !== s) {
              const D = Math.floor(a / r), U = "InterleavedBuffer:" + B.bufferView + ":" + B.componentType + ":" + D + ":" + B.count;
              let M = I.cache.get(U);
              M || (S = new t(i, D * r, B.count * r / e), M = new ow(S, r / e), I.cache.add(U, M)), h = new ge(M, o, a % r / e, c);
            } else i === null ? S = new t(B.count * o) : S = new t(i, a, B.count * o), h = new tg(S, o, c);
            if (B.sparse !== void 0) {
              const D = So.SCALAR, U = YB[B.sparse.indices.componentType], M = B.sparse.indices.byteOffset || 0, k = B.sparse.values.byteOffset || 0, p = new U(E[1], M, B.sparse.count * D), R = new t(E[2], k, B.sparse.count * o);
              i !== null && (h = new tg(h.array.slice(), h.itemSize, h.normalized)), h.normalized = false;
              for (let Y = 0, m = p.length; Y < m; Y++) {
                const K = p[Y];
                if (h.setX(K, R[Y * o]), o >= 2 && h.setY(K, R[Y * o + 1]), o >= 3 && h.setZ(K, R[Y * o + 2]), o >= 4 && h.setW(K, R[Y * o + 3]), o >= 5) throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.");
              }
              h.normalized = c;
            }
            return h;
          });
        }
        loadTexture(A) {
          const I = this.json, g = this.options, Q = I.textures[A].source, E = I.images[Q];
          let i = this.textureLoader;
          if (E.uri) {
            const o = g.manager.getHandler(E.uri);
            o !== null && (i = o);
          }
          return this.loadTextureImage(A, Q, i);
        }
        loadTextureImage(A, I, g) {
          const B = this, Q = this.json, E = Q.textures[A], i = Q.images[I], o = (i.uri || i.bufferView) + ":" + E.sampler;
          if (this.textureCache[o]) return this.textureCache[o];
          const t = this.loadImageSource(I, g).then(function(e) {
            e.flipY = false, e.name = E.name || i.name || "", e.name === "" && typeof i.uri == "string" && i.uri.startsWith("data:image/") === false && (e.name = i.uri);
            const a = (Q.samplers || {})[E.sampler] || {};
            return e.magFilter = sD[a.magFilter] || sg, e.minFilter = sD[a.minFilter] || aC, e.wrapS = aD[a.wrapS] || uB, e.wrapT = aD[a.wrapT] || uB, e.generateMipmaps = !e.isCompressedTexture && e.minFilter !== og && e.minFilter !== sg, B.associations.set(e, {
              textures: A
            }), e;
          }).catch(function() {
            return null;
          });
          return this.textureCache[o] = t, t;
        }
        loadImageSource(A, I) {
          const g = this, B = this.json, Q = this.options;
          if (this.sourceCache[A] !== void 0) return this.sourceCache[A].then((s) => s.clone());
          const E = B.images[A], i = self.URL || self.webkitURL;
          let o = E.uri || "", t = false;
          if (E.bufferView !== void 0) o = g.getDependency("bufferView", E.bufferView).then(function(s) {
            t = true;
            const a = new Blob([
              s
            ], {
              type: E.mimeType
            });
            return o = i.createObjectURL(a), o;
          });
          else if (E.uri === void 0) throw new Error("THREE.GLTFLoader: Image " + A + " is missing URI and bufferView");
          const e = Promise.resolve(o).then(function(s) {
            return new Promise(function(a, r) {
              let c = a;
              I.isImageBitmapLoader === true && (c = function(S) {
                const h = new uI(S);
                h.needsUpdate = true, a(h);
              }), I.load(wQ.resolveURL(s, Q.path), c, void 0, r);
            });
          }).then(function(s) {
            return t === true && i.revokeObjectURL(o), xg(s, E), s.userData.mimeType = E.mimeType || ZL(E.uri), s;
          }).catch(function(s) {
            throw console.error("THREE.GLTFLoader: Couldn't load texture", o), s;
          });
          return this.sourceCache[A] = e, e;
        }
        assignTexture(A, I, g, B) {
          const Q = this;
          return this.getDependency("texture", g.index).then(function(E) {
            if (!E) return null;
            if (g.texCoord !== void 0 && g.texCoord > 0 && (E = E.clone(), E.channel = g.texCoord), Q.extensions[VA.KHR_TEXTURE_TRANSFORM]) {
              const i = g.extensions !== void 0 ? g.extensions[VA.KHR_TEXTURE_TRANSFORM] : void 0;
              if (i) {
                const o = Q.associations.get(E);
                E = Q.extensions[VA.KHR_TEXTURE_TRANSFORM].extendTexture(E, i), Q.associations.set(E, o);
              }
            }
            return B !== void 0 && (E.colorSpace = B), A[I] = E, E;
          });
        }
        assignFinalMaterial(A) {
          const I = A.geometry;
          let g = A.material;
          const B = I.attributes.tangent === void 0, Q = I.attributes.color !== void 0, E = I.attributes.normal === void 0;
          if (A.isPoints) {
            const i = "PointsMaterial:" + g.uuid;
            let o = this.cache.get(i);
            o || (o = new xD(), Pg.prototype.copy.call(o, g), o.color.copy(g.color), o.map = g.map, o.sizeAttenuation = false, this.cache.add(i, o)), g = o;
          } else if (A.isLine) {
            const i = "LineBasicMaterial:" + g.uuid;
            let o = this.cache.get(i);
            o || (o = new Ee(), Pg.prototype.copy.call(o, g), o.color.copy(g.color), o.map = g.map, this.cache.add(i, o)), g = o;
          }
          if (B || Q || E) {
            let i = "ClonedMaterial:" + g.uuid + ":";
            B && (i += "derivative-tangents:"), Q && (i += "vertex-colors:"), E && (i += "flat-shading:");
            let o = this.cache.get(i);
            o || (o = g.clone(), Q && (o.vertexColors = true), E && (o.flatShading = true), B && (o.normalScale && (o.normalScale.y *= -1), o.clearcoatNormalScale && (o.clearcoatNormalScale.y *= -1)), this.cache.add(i, o), this.associations.set(o, this.associations.get(g))), g = o;
          }
          A.material = g;
        }
        getMaterialType() {
          return oe;
        }
        loadMaterial(A) {
          const I = this, g = this.json, B = this.extensions, Q = g.materials[A];
          let E;
          const i = {}, o = Q.extensions || {}, t = [];
          if (o[VA.KHR_MATERIALS_UNLIT]) {
            const s = B[VA.KHR_MATERIALS_UNLIT];
            E = s.getMaterialType(), t.push(s.extendParams(i, Q, I));
          } else {
            const s = Q.pbrMetallicRoughness || {};
            if (i.color = new mA(1, 1, 1), i.opacity = 1, Array.isArray(s.baseColorFactor)) {
              const a = s.baseColorFactor;
              i.color.setRGB(a[0], a[1], a[2], Ag), i.opacity = a[3];
            }
            s.baseColorTexture !== void 0 && t.push(I.assignTexture(i, "map", s.baseColorTexture, PI)), i.metalness = s.metallicFactor !== void 0 ? s.metallicFactor : 1, i.roughness = s.roughnessFactor !== void 0 ? s.roughnessFactor : 1, s.metallicRoughnessTexture !== void 0 && (t.push(I.assignTexture(i, "metalnessMap", s.metallicRoughnessTexture)), t.push(I.assignTexture(i, "roughnessMap", s.metallicRoughnessTexture))), E = this._invokeOne(function(a) {
              return a.getMaterialType && a.getMaterialType(A);
            }), t.push(Promise.all(this._invokeAll(function(a) {
              return a.extendMaterialParams && a.extendMaterialParams(A, i);
            })));
          }
          Q.doubleSided === true && (i.side = _g);
          const e = Q.alphaMode || lo.OPAQUE;
          if (e === lo.BLEND ? (i.transparent = true, i.depthWrite = false) : (i.transparent = false, e === lo.MASK && (i.alphaTest = Q.alphaCutoff !== void 0 ? Q.alphaCutoff : 0.5)), Q.normalTexture !== void 0 && E !== VC && (t.push(I.assignTexture(i, "normalMap", Q.normalTexture)), i.normalScale = new XA(1, 1), Q.normalTexture.scale !== void 0)) {
            const s = Q.normalTexture.scale;
            i.normalScale.set(s, s);
          }
          if (Q.occlusionTexture !== void 0 && E !== VC && (t.push(I.assignTexture(i, "aoMap", Q.occlusionTexture)), Q.occlusionTexture.strength !== void 0 && (i.aoMapIntensity = Q.occlusionTexture.strength)), Q.emissiveFactor !== void 0 && E !== VC) {
            const s = Q.emissiveFactor;
            i.emissive = new mA().setRGB(s[0], s[1], s[2], Ag);
          }
          return Q.emissiveTexture !== void 0 && E !== VC && t.push(I.assignTexture(i, "emissiveMap", Q.emissiveTexture, PI)), Promise.all(t).then(function() {
            const s = new E(i);
            return Q.name && (s.name = Q.name), xg(s, Q), I.associations.set(s, {
              materials: A
            }), Q.extensions && _C(B, s, Q), s;
          });
        }
        createUniqueName(A) {
          const I = oI.sanitizeNodeName(A || "");
          return I in this.nodeNamesUsed ? I + "_" + ++this.nodeNamesUsed[I] : (this.nodeNamesUsed[I] = 0, I);
        }
        loadGeometries(A) {
          const I = this, g = this.extensions, B = this.primitiveCache;
          function Q(i) {
            return g[VA.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(i, I).then(function(o) {
              return DD(o, i, I);
            });
          }
          const E = [];
          for (let i = 0, o = A.length; i < o; i++) {
            const t = A[i], e = _L(t), s = B[e];
            if (s) E.push(s.promise);
            else {
              let a;
              t.extensions && t.extensions[VA.KHR_DRACO_MESH_COMPRESSION] ? a = Q(t) : a = DD(new fg(), t, I), B[e] = {
                primitive: t,
                promise: a
              }, E.push(a);
            }
          }
          return Promise.all(E);
        }
        loadMesh(A) {
          const I = this, g = this.json, B = this.extensions, Q = g.meshes[A], E = Q.primitives, i = [];
          for (let o = 0, t = E.length; o < t; o++) {
            const e = E[o].material === void 0 ? bL(this.cache) : this.getDependency("material", E[o].material);
            i.push(e);
          }
          return i.push(I.loadGeometries(E)), Promise.all(i).then(function(o) {
            const t = o.slice(0, o.length - 1), e = o[o.length - 1], s = [];
            for (let r = 0, c = e.length; r < c; r++) {
              const S = e[r], h = E[r];
              let D;
              const U = t[r];
              if (h.mode === Mg.TRIANGLES || h.mode === Mg.TRIANGLE_STRIP || h.mode === Mg.TRIANGLE_FAN || h.mode === void 0) D = Q.isSkinnedMesh === true ? new ew(S, U) : new ig(S, U), D.isSkinnedMesh === true && D.normalizeSkinWeights(), h.mode === Mg.TRIANGLE_STRIP ? D.geometry = tD(D.geometry, FD) : h.mode === Mg.TRIANGLE_FAN && (D.geometry = tD(D.geometry, et));
              else if (h.mode === Mg.LINES) D = new bD(S, U);
              else if (h.mode === Mg.LINE_STRIP) D = new ie(S, U);
              else if (h.mode === Mg.LINE_LOOP) D = new ww(S, U);
              else if (h.mode === Mg.POINTS) D = new cw(S, U);
              else throw new Error("THREE.GLTFLoader: Primitive mode unsupported: " + h.mode);
              Object.keys(D.geometry.morphAttributes).length > 0 && OL(D, Q), D.name = I.createUniqueName(Q.name || "mesh_" + A), xg(D, Q), h.extensions && _C(B, D, h), I.assignFinalMaterial(D), s.push(D);
            }
            for (let r = 0, c = s.length; r < c; r++) I.associations.set(s[r], {
              meshes: A,
              primitives: r
            });
            if (s.length === 1) return Q.extensions && _C(B, s[0], Q), s[0];
            const a = new XC();
            Q.extensions && _C(B, a, Q), I.associations.set(a, {
              meshes: A
            });
            for (let r = 0, c = s.length; r < c; r++) a.add(s[r]);
            return a;
          });
        }
        loadCamera(A) {
          let I;
          const g = this.json.cameras[A], B = g[g.type];
          if (!B) {
            console.warn("THREE.GLTFLoader: Missing camera parameters.");
            return;
          }
          return g.type === "perspective" ? I = new Qg(_I.radToDeg(B.yfov), B.aspectRatio || 1, B.znear || 1, B.zfar || 2e6) : g.type === "orthographic" && (I = new se(-B.xmag, B.xmag, B.ymag, -B.ymag, B.znear, B.zfar)), g.name && (I.name = this.createUniqueName(g.name)), xg(I, g), Promise.resolve(I);
        }
        loadSkin(A) {
          const I = this.json.skins[A], g = [];
          for (let B = 0, Q = I.joints.length; B < Q; B++) g.push(this._loadNodeShallow(I.joints[B]));
          return I.inverseBindMatrices !== void 0 ? g.push(this.getDependency("accessor", I.inverseBindMatrices)) : g.push(null), Promise.all(g).then(function(B) {
            const Q = B.pop(), E = B, i = [], o = [];
            for (let t = 0, e = E.length; t < e; t++) {
              const s = E[t];
              if (s) {
                i.push(s);
                const a = new uA();
                Q !== null && a.fromArray(Q.array, t * 16), o.push(a);
              } else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.', I.joints[t]);
            }
            return new Be(i, o);
          });
        }
        loadAnimation(A) {
          const I = this.json, g = this, B = I.animations[A], Q = B.name ? B.name : "animation_" + A, E = [], i = [], o = [], t = [], e = [];
          for (let s = 0, a = B.channels.length; s < a; s++) {
            const r = B.channels[s], c = B.samplers[r.sampler], S = r.target, h = S.node, D = B.parameters !== void 0 ? B.parameters[c.input] : c.input, U = B.parameters !== void 0 ? B.parameters[c.output] : c.output;
            S.node !== void 0 && (E.push(this.getDependency("node", h)), i.push(this.getDependency("accessor", D)), o.push(this.getDependency("accessor", U)), t.push(c), e.push(S));
          }
          return Promise.all([
            Promise.all(E),
            Promise.all(i),
            Promise.all(o),
            Promise.all(t),
            Promise.all(e)
          ]).then(function(s) {
            const a = s[0], r = s[1], c = s[2], S = s[3], h = s[4], D = [];
            for (let M = 0, k = a.length; M < k; M++) {
              const p = a[M], R = r[M], Y = c[M], m = S[M], K = h[M];
              if (p === void 0) continue;
              p.updateMatrix && p.updateMatrix();
              const y = g._createAnimationTracks(p, R, Y, m, K);
              if (y) for (let q = 0; q < y.length; q++) D.push(y[q]);
            }
            const U = new Nw(Q, void 0, D);
            return xg(U, B), U;
          });
        }
        createNodeMesh(A) {
          const I = this.json, g = this, B = I.nodes[A];
          return B.mesh === void 0 ? null : g.getDependency("mesh", B.mesh).then(function(Q) {
            const E = g._getNodeRef(g.meshCache, B.mesh, Q);
            return B.weights !== void 0 && E.traverse(function(i) {
              if (i.isMesh) for (let o = 0, t = B.weights.length; o < t; o++) i.morphTargetInfluences[o] = B.weights[o];
            }), E;
          });
        }
        loadNode(A) {
          const I = this.json, g = this, B = I.nodes[A], Q = g._loadNodeShallow(A), E = [], i = B.children || [];
          for (let t = 0, e = i.length; t < e; t++) E.push(g.getDependency("node", i[t]));
          const o = B.skin === void 0 ? Promise.resolve(null) : g.getDependency("skin", B.skin);
          return Promise.all([
            Q,
            Promise.all(E),
            o
          ]).then(function(t) {
            const e = t[0], s = t[1], a = t[2];
            a !== null && e.traverse(function(r) {
              r.isSkinnedMesh && r.bind(a, vL);
            });
            for (let r = 0, c = s.length; r < c; r++) e.add(s[r]);
            return e;
          });
        }
        _loadNodeShallow(A) {
          const I = this.json, g = this.extensions, B = this;
          if (this.nodeCache[A] !== void 0) return this.nodeCache[A];
          const Q = I.nodes[A], E = Q.name ? B.createUniqueName(Q.name) : "", i = [], o = B._invokeOne(function(t) {
            return t.createNodeMesh && t.createNodeMesh(A);
          });
          return o && i.push(o), Q.camera !== void 0 && i.push(B.getDependency("camera", Q.camera).then(function(t) {
            return B._getNodeRef(B.cameraCache, Q.camera, t);
          })), B._invokeAll(function(t) {
            return t.createNodeAttachment && t.createNodeAttachment(A);
          }).forEach(function(t) {
            i.push(t);
          }), this.nodeCache[A] = Promise.all(i).then(function(t) {
            let e;
            if (Q.isBone === true ? e = new TD() : t.length > 1 ? e = new XC() : t.length === 1 ? e = t[0] : e = new UI(), e !== t[0]) for (let s = 0, a = t.length; s < a; s++) e.add(t[s]);
            if (Q.name && (e.userData.name = Q.name, e.name = E), xg(e, Q), Q.extensions && _C(g, e, Q), Q.matrix !== void 0) {
              const s = new uA();
              s.fromArray(Q.matrix), e.applyMatrix4(s);
            } else Q.translation !== void 0 && e.position.fromArray(Q.translation), Q.rotation !== void 0 && e.quaternion.fromArray(Q.rotation), Q.scale !== void 0 && e.scale.fromArray(Q.scale);
            if (!B.associations.has(e)) B.associations.set(e, {});
            else if (Q.mesh !== void 0 && B.meshCache.refs[Q.mesh] > 1) {
              const s = B.associations.get(e);
              B.associations.set(e, {
                ...s
              });
            }
            return B.associations.get(e).nodes = A, e;
          }), this.nodeCache[A];
        }
        loadScene(A) {
          const I = this.extensions, g = this.json.scenes[A], B = this, Q = new XC();
          g.name && (Q.name = B.createUniqueName(g.name)), xg(Q, g), g.extensions && _C(I, Q, g);
          const E = g.nodes || [], i = [];
          for (let o = 0, t = E.length; o < t; o++) i.push(B.getDependency("node", E[o]));
          return Promise.all(i).then(function(o) {
            for (let e = 0, s = o.length; e < s; e++) Q.add(o[e]);
            const t = (e) => {
              const s = /* @__PURE__ */ new Map();
              for (const [a, r] of B.associations) (a instanceof Pg || a instanceof uI) && s.set(a, r);
              return e.traverse((a) => {
                const r = B.associations.get(a);
                r != null && s.set(a, r);
              }), s;
            };
            return B.associations = t(Q), Q;
          });
        }
        _createAnimationTracks(A, I, g, B, Q) {
          const E = [], i = A.name ? A.name : A.uuid, o = [];
          FC[Q.path] === FC.weights ? A.traverse(function(a) {
            a.morphTargetInfluences && o.push(a.name ? a.name : a.uuid);
          }) : o.push(i);
          let t;
          switch (FC[Q.path]) {
            case FC.weights:
              t = TB;
              break;
            case FC.rotation:
              t = bB;
              break;
            case FC.translation:
            case FC.scale:
              t = xB;
              break;
            default:
              switch (g.itemSize) {
                case 1:
                  t = TB;
                  break;
                case 2:
                case 3:
                default:
                  t = xB;
                  break;
              }
              break;
          }
          const e = B.interpolation !== void 0 ? TL[B.interpolation] : NQ, s = this._getArrayFromAccessor(g);
          for (let a = 0, r = o.length; a < r; a++) {
            const c = new t(o[a] + "." + FC[Q.path], I.array, s, e);
            B.interpolation === "CUBICSPLINE" && this._createCubicSplineTrackInterpolant(c), E.push(c);
          }
          return E;
        }
        _getArrayFromAccessor(A) {
          let I = A.array;
          if (A.normalized) {
            const g = mt(I.constructor), B = new Float32Array(I.length);
            for (let Q = 0, E = I.length; Q < E; Q++) B[Q] = I[Q] * g;
            I = B;
          }
          return I;
        }
        _createCubicSplineTrackInterpolant(A) {
          A.createInterpolant = function(g) {
            const B = this instanceof bB ? mL : er;
            return new B(this.times, this.values, this.getValueSize() / 3, g);
          }, A.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;
        }
      }
      function WL(C, A, I) {
        const g = A.attributes, B = new Xg();
        if (g.POSITION !== void 0) {
          const i = I.json.accessors[g.POSITION], o = i.min, t = i.max;
          if (o !== void 0 && t !== void 0) {
            if (B.set(new J(o[0], o[1], o[2]), new J(t[0], t[1], t[2])), i.normalized) {
              const e = mt(YB[i.componentType]);
              B.min.multiplyScalar(e), B.max.multiplyScalar(e);
            }
          } else {
            console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");
            return;
          }
        } else return;
        const Q = A.targets;
        if (Q !== void 0) {
          const i = new J(), o = new J();
          for (let t = 0, e = Q.length; t < e; t++) {
            const s = Q[t];
            if (s.POSITION !== void 0) {
              const a = I.json.accessors[s.POSITION], r = a.min, c = a.max;
              if (r !== void 0 && c !== void 0) {
                if (o.setX(Math.max(Math.abs(r[0]), Math.abs(c[0]))), o.setY(Math.max(Math.abs(r[1]), Math.abs(c[1]))), o.setZ(Math.max(Math.abs(r[2]), Math.abs(c[2]))), a.normalized) {
                  const S = mt(YB[a.componentType]);
                  o.multiplyScalar(S);
                }
                i.max(o);
              } else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");
            }
          }
          B.expandByVector(i);
        }
        C.boundingBox = B;
        const E = new zg();
        B.getCenter(E.center), E.radius = B.min.distanceTo(B.max) / 2, C.boundingSphere = E;
      }
      function DD(C, A, I) {
        const g = A.attributes, B = [];
        function Q(E, i) {
          return I.getDependency("accessor", E).then(function(o) {
            C.setAttribute(i, o);
          });
        }
        for (const E in g) {
          const i = Ht[E] || E.toLowerCase();
          i in C.attributes || B.push(Q(g[E], i));
        }
        if (A.indices !== void 0 && !C.index) {
          const E = I.getDependency("accessor", A.indices).then(function(i) {
            C.setIndex(i);
          });
          B.push(E);
        }
        return gI.workingColorSpace !== Ag && "COLOR_0" in g && console.warn(`THREE.GLTFLoader: Converting vertex colors from "srgb-linear" to "${gI.workingColorSpace}" not supported.`), xg(C, A), WL(C, A, I), Promise.all(B).then(function() {
          return A.targets !== void 0 ? xL(C, A.targets, I) : C;
        });
      }
      let jL = class {
        constructor(A, I = {}) {
          this.type = A, this.lengthComputable = I.lengthComputable ?? false, this.loaded = I.loaded ?? 0, this.total = I.total ?? 0;
        }
      };
      typeof global < "u" && (global.ProgressEvent ??= jL, global.self ??= global);
      async function sr(C, A, I) {
        const g = A.gltf, B = A.entityId, Q = A.physicsMaterials, E = A.implicitShapes, i = C.userData.gltfExtensions?.KHR_physics_rigid_bodies;
        if (i !== void 0) {
          const o = new J(), t = new SI();
          C.getWorldPosition(o), C.getWorldQuaternion(t);
          const e = {
            position: o,
            rotation: t
          }, s = i.motion;
          s !== void 0 && (s.mass ? I = gA.createRigidBody(B, e, s.mass, s.centerOfMass !== void 0 ? SQ(s.centerOfMass) : void 0, s.inertiaDiagonal !== void 0 ? SQ(s.inertiaDiagonal) : void 0, s.inertiaOrientation !== void 0 ? Wd(s.inertiaOrientation) : void 0) : I = void 0);
          const a = i.collider;
          if (a !== void 0) {
            let r;
            I !== void 0 ? r = I : (A.staticRigidBodyId === void 0 && (A.staticRigidBodyId = gA.createRigidBody(B, {
              position: new J(),
              rotation: new SI()
            }, 0, void 0, void 0, void 0)), r = A.staticRigidBodyId);
            const c = a.physicsMaterial, S = Q[c], h = {
              transform: e,
              friction: S.staticFriction !== void 0 ? S.staticFriction : 0.5,
              frictionCombine: S.frictionCombine !== void 0 ? S.frictionCombine : "average",
              restitution: S.restitution !== void 0 ? S.restitution : 0.5,
              restitutionCombine: S.restitutionCombine !== void 0 ? S.restitutionCombine : "average"
            }, D = a.geometry.shape;
            if (D !== void 0) {
              const M = E[D];
              switch (M.type) {
                case "box":
                  gA.addBoxCollider(B, r, SQ(M.box.size), h);
                  break;
                case "sphere":
                  gA.addSphereCollider(B, r, M.sphere.radius, h);
                  break;
                case "capsule":
                  gA.addCapsuleCollider(B, r, M.capsule.height, M.capsule.radiusBottom + M.capsule.radiusTop, h);
                  break;
                case "cylinder":
                  M.cylinder.radiusTop ? gA.addCylinderCollider(B, r, M.cylinder.height, (M.cylinder.radiusBottom + M.cylinder.radiusTop) / 2, h) : gA.addConeCollider(B, r, M.cylinder.height, M.cylinder.radiusBottom, h);
                  break;
                default:
                  console.error(`GLTFLoaderPhysics.traverseGLTFPhysics: unknown shape, entityId ${B}: ${a.geometry}`);
                  break;
              }
            }
            const U = a.geometry.node;
            if (U !== void 0) {
              const M = g.parser.json, k = M.nodes[U], R = M.meshes[k.mesh].primitives[0], Y = M.accessors[R.attributes.POSITION], m = M.bufferViews[Y.bufferView], K = await g.parser.getDependency("buffer", m.buffer), y = new Float32Array(K, m.byteOffset + (Y.byteOffset || 0), Y.count * 3);
              let q;
              if (R.indices) {
                const x = M.accessors[R.indices], Z = M.bufferViews[x.bufferView], j = await g.parser.getDependency("buffer", Z.buffer);
                if (x.componentType === 5125) q = new Uint32Array(j, Z.byteOffset + (x.byteOffset || 0), x.count);
                else if (x.componentType === 5123) {
                  const z = new Uint16Array(j, Z.byteOffset + (x.byteOffset || 0), x.count);
                  q = new Uint32Array(z.length), q.set(z);
                } else throw new Error("GLTFLoaderPhysics: invalid indicesAccessor format");
              } else {
                q = new Uint32Array(y.length);
                for (let x = 0; x < q.length; x++) q[x] = x;
              }
              gA.addMeshCollider(B, r, a.geometry.convexHull, y, q, h);
            }
          }
        }
        C.children.forEach(async (o) => {
          await sr(o, A, I);
        });
      }
      async function VL(C, A) {
        let I = [], g = [];
        const B = A.userData?.gltfExtensions;
        if (B) {
          const Q = B?.KHR_implicit_shapes;
          Q && (I = Q.shapes);
          const E = B?.KHR_physics_rigid_bodies;
          E && (g = E.physicsMaterials);
        }
        return sr(A.scene, {
          gltf: A,
          entityId: C,
          implicitShapes: I,
          physicsMaterials: g
        }, void 0);
      }
      function XL(C, A) {
        const I = A.scene, g = /* @__PURE__ */ new Set();
        I.traverse((B) => {
          if (B instanceof ig) {
            const Q = B.material;
            g.add(Q), B.castShadow = true, B.receiveShadow = true;
          }
        }), g.forEach((B) => {
          B.side = Wg, WI.setupMaterial(B);
        }), WI.add(C, A.scene);
      }
      const zL = new nL();
      async function $L(C, A) {
        try {
          const I = await zL.loadAsync(A);
          await VL(C, I), XL(C, I);
        } catch (I) {
          console.error(`GLTFLoader.load: could not load "${A}", entityId ${C}: ${I}`);
        }
      }
      const Af = {
        load: $L
      };
      function ar(C) {
        return new ni(SQ(C.position), vd(C.rotation));
      }
      let _e, Ze = false;
      const Tt = /* @__PURE__ */ new Set();
      let qE;
      function If(C) {
        _e = C;
      }
      function gf(C) {
        C.gravity !== void 0 && gA.setGravity(SQ(C.gravity)), C.environmentMap !== void 0 && WI.setEnvironmentMap(C.environmentMap.src, Jt(C.environmentMap.rotation)), C.directionalLights !== void 0 && (WI.clearDirectionalLights(), C.directionalLights.forEach((A) => {
          WI.addDirectionalLight(new mA(A.color), A.intensity, Jt(A.rotation));
        }));
      }
      function Cf() {
        jI.sendMessage({
          type: "presence.requestBody"
        });
      }
      function Bf(C) {
        jI.sendMessage({
          type: "presence.requestVolume",
          data: C
        });
      }
      async function Qf(C, A) {
        const I = A.src;
        if (await Af.load(C, I), A.pose !== void 0) {
          const g = ar(A.pose);
          gA.setTransform(C, g), WI.setTransform(C, g);
        }
        A.control !== void 0 && WE.setControl(C, A.control), NI.add(C, A);
      }
      function Ef(C) {
        C.forEach(async (A) => {
          const I = A[0], g = A[1];
          try {
            if (g.type === "model") {
              const B = Qf(I, g);
              Ze || Tt.add(B);
            }
          } catch (B) {
            console.error(`Presence.addEntitites: could not load model, entityId ${I}: ${B}`);
          }
        });
      }
      function of(C) {
        C.forEach((A) => {
          const I = A[0], g = A[1];
          if (g.control !== void 0 && WE.setControl(I, g.control), g.pose !== void 0 && (!gA.isDynamic(I) || WE.isControlling(I))) {
            const B = ar(g.pose);
            gA.setTransform(I, B), WI.setTransform(I, B);
          }
          NI.update(I, g);
        });
      }
      function tf(C) {
        C.forEach((A) => {
          NI.remove(A), gA.remove(A), WI.remove(A);
        });
      }
      function ef() {
        Promise.allSettled(Tt).then(() => {
          Ze = true, Tt.clear(), NI.setBodyId(qE), gA.step(), _e("start");
        });
      }
      function sf() {
        Ze = false, _e("stop");
      }
      function af(C) {
        switch (jI.parseType(C)[1]) {
          case "requestBody":
            qE = C.data;
            break;
          case "requestVolume":
            qE = void 0;
            break;
          case "release":
            qE = void 0;
            break;
          case "setEnvironment":
            gf(C.data);
            break;
          case "add":
            Ef(C.data);
            break;
          case "update":
            of(C.data);
            break;
          case "remove":
            tf(C.data);
            break;
          case "start":
            ef();
            break;
          case "stop":
            sf();
            break;
          case "conflict":
            break;
          default:
            console.error(`Presence: unknown message: ${C}`);
            break;
        }
      }
      const bt = {
        setServerCallback: If,
        requestBody: Cf,
        requestVolume: Bf,
        onMessage: af
      }, Df = "EDACup robot simulator", xt = "0.5", Ot = [];
      let ZI;
      const ve = [
        1,
        2,
        3,
        4
      ], nf = [
        1,
        2,
        3,
        4,
        5
      ];
      function rf() {
        const C = Sg.readFileSync("edacup.json", "utf8");
        return JSON.parse(C);
      }
      function hf() {
        Rg.printConsole(`${Df} v${xt}`);
      }
      function wf() {
        si.getServerVersion((C) => {
          C !== xt && (Rg.printConsole(`Client v${xt} is not compatible with server v${C}. Please update your client at: https://www.openreality.app/edacup`), process.exit(1));
        }), ir.getEntities((C) => {
          ZI = C.sort((A, I) => A - I);
        }), bt.requestVolume({
          position: [
            0,
            0,
            0
          ],
          size: [
            100,
            100,
            100
          ]
        }), Vg.init();
      }
      function cf(C, A) {
        nD(0, C), nD(1, A), ve.forEach((I) => {
          const g = ZI[I], B = NI.get(g);
          B.targetBallId = ZI[5];
        }), setInterval(kf, 10);
      }
      function Sf() {
      }
      function nD(C, A) {
        if (A) {
          const I = Gr.spawn(A);
          I.on("close", (Q) => {
            console.error(`Team ${C + 1}: process "${A}" exited with code ${Q}`);
          }), yo.createInterface(I.stdout).on("line", (Q) => {
            lf(C, Q);
          }), yo.createInterface(I.stderr).on("line", (Q) => {
            Gf(C, Q);
          }), Ot[C] = I;
        }
      }
      function lf(C, A) {
        try {
          const I = JSON.parse(A);
          switch (I.type) {
            case "set":
              Rf(C, I.data);
              break;
            default:
              throw new Error("unknown message");
          }
        } catch (I) {
          Rg.printConsole(`Team ${C + 1}: error while processing ${A}: ${I}`);
        }
      }
      function Gf(C, A) {
        Rg.printConsole(`Team ${C + 1}: ${A}`);
      }
      function vB(C, A) {
        const I = JSON.stringify(A) + `
`;
        C in Ot && Ot[C].stdin.write(I);
      }
      let rD = 0;
      function kf() {
        Vg.onRenderTick();
        const C = Vg.getTime();
        C >= rD && (rD = C + 0.049, Uf());
      }
      const hD = [
        0,
        0,
        0,
        0,
        0,
        0
      ];
      function yf(C, A) {
        const I = ZI[C], g = NI.get(I);
        g.targetDribblerLevel = A;
      }
      function Mf(C, A) {
        const I = Vg.getTime();
        if (I >= hD[C]) return;
        hD[C] = I + 0.099;
        const g = ZI[C];
        if (NI.get(g).isBallInDribbler()) {
          const Q = ZI[C], E = gA.getRotation(Q), i = ZI[5], o = new J(0, 0, -1).applyQuaternion(E).multiplyScalar(0.08 * A);
          gA.applyImpulse(i, o);
        }
      }
      function Kf(C, A) {
        const I = ZI[C];
        if (NI.get(I).isBallInDribbler()) {
          const B = ZI[C], Q = gA.getRotation(B), E = ZI[5], i = new J(0, 1, -1).applyQuaternion(Q).multiplyScalar(0.08 * A);
          gA.applyImpulse(E, i);
        }
      }
      function Tg(C, A) {
        const I = ZI[0], g = gA.getPosition(I), B = gA.getRotation(I);
        A == 1 && B.multiply(new SI().setFromAxisAngle(new J(0, 1, 0), Math.PI));
        const Q = ZI[C], E = gA.getPosition(Q), i = gA.getRotation(Q), o = gA.getVelocity(Q), t = gA.getAngularVelocity(Q);
        E.sub(g).applyQuaternion(B), i.multiply(B), o.applyQuaternion(B), t.applyQuaternion(B);
        const e = new pI().setFromQuaternion(i, "YXZ");
        return {
          position: [
            E.x,
            E.y,
            E.z
          ],
          rotation: [
            e.x,
            e.y,
            e.z
          ],
          velocity: [
            o.x,
            o.y,
            o.z
          ],
          angularVelocity: [
            t.x,
            t.y,
            t.z
          ]
        };
      }
      function Uf() {
        vB(0, {
          type: "state",
          data: {
            homeBot1: Tg(1, 0),
            homeBot2: Tg(2, 0),
            rivalBot1: Tg(3, 0),
            rivalBot2: Tg(4, 0),
            ball: Tg(5, 0)
          }
        }), vB(1, {
          type: "state",
          data: {
            homeBot1: Tg(4, 1),
            homeBot2: Tg(3, 1),
            rivalBot1: Tg(2, 1),
            rivalBot2: Tg(1, 1),
            ball: Tg(5, 1)
          }
        });
      }
      function Nf() {
        ve.forEach((C) => {
          const A = ZI[C];
          NI.get(A).enableTarget(true);
        }), vB(0, {
          type: "start"
        }), vB(1, {
          type: "start"
        });
      }
      function Ff() {
        vB(0, {
          type: "stop"
        }), vB(1, {
          type: "stop"
        }), ve.forEach((C) => {
          const A = ZI[C];
          NI.get(A).enableTarget(false);
        });
      }
      function Jf() {
        const C = ZI[0], A = gA.getPosition(C), I = gA.getRotation(C), g = 0.75, B = [
          new J(0, 0, 0),
          new J(-0.65, g, 0.4),
          new J(-0.65, g, -0.4),
          new J(0.65, g, 0.4),
          new J(0.65, g, -0.4),
          new J(0, 1, 0)
        ];
        nf.forEach((Q) => {
          const E = ZI[Q], i = NI.get(E), o = B[Q];
          o.applyQuaternion(I), o.add(A);
          const t = Q < 3 ? Math.PI / 2 : -Math.PI / 2, e = new SI().setFromEuler(new pI(0, t, 0));
          gA.setPosition(E, o), gA.setRotation(E, e), gA.setVelocity(E, new J()), gA.setAngularVelocity(E, new J()), i.targetPosition = o, i.targetRotation = t;
        });
      }
      function KB(C) {
        return typeof C != "number" || Number.isNaN(C) || !Number.isFinite(C) ? 0 : C;
      }
      function wD(C, A, I) {
        const g = ZI[0], B = gA.getPosition(g), Q = gA.getRotation(g);
        A == 1 && Q.multiply(new SI().setFromAxisAngle(new J(0, 1, 0), _I.degToRad(180)));
        let E = new pI().setFromQuaternion(Q).y;
        A == 1 && (E += _I.degToRad(180));
        const i = ZI[C], o = NI.get(i);
        if (I.positionXZ !== void 0) {
          const t = KB(I.positionXZ[0]), e = KB(I.positionXZ[1]), s = new J(t, 0, e);
          s.applyQuaternion(Q), s.add(B), o.targetPosition = s;
        }
        if (I.rotationY !== void 0) {
          const t = KB(I.rotationY) + E;
          o.targetRotation = t;
        }
        if (I.dribbler !== void 0) {
          const t = KB(I.dribbler);
          t >= 0 && t <= 1 && yf(C, t);
        }
        if (I.kick !== void 0) {
          const t = KB(I.kick);
          t > 0 && t <= 1 && Mf(C, t);
        }
        if (I.chip !== void 0) {
          const t = KB(I.chip);
          t > 0 && t <= 1 && Kf(C, t);
        }
      }
      function Rf(C, A) {
        if (A === void 0 || typeof A != "object") throw new Error('Message "data" invalid.');
        A.homeBot1 !== void 0 && wD(C != 1 ? 1 : 4, C, A.homeBot1), A.homeBot2 !== void 0 && wD(C != 1 ? 2 : 3, C, A.homeBot2);
      }
      const AB = {
        loadSettings: rf,
        init: hf,
        open: wf,
        start: cf,
        stop: Sf,
        startPlay: Nf,
        stopPlay: Ff,
        resetPlay: Jf
      };
      let VE = false;
      function lg(C) {
        VE && (VE = false, console.log()), console.log(C);
      }
      function pf() {
        lg("Commands: "), lg("    p: Start play"), lg("    s: Stop play"), lg("    r: Reset simulation"), lg("    ?: Show help"), lg("    q: Quit app");
      }
      function df() {
        const C = yo.createInterface(process.stdin, process.stdout);
        lg("Connected."), lg('Type "?" for more information.'), C.on("SIGINT", () => {
          process.exit();
        });
        function A() {
          VE = true, C.question("> ", (I) => {
            switch (VE = false, I) {
              case "p":
                AB.startPlay(), lg("Play started.");
                break;
              case "s":
                AB.stopPlay(), lg("Play stopped.");
                break;
              case "r":
                AB.resetPlay(), lg("Simulation reset.");
                break;
              case "?":
                pf();
                break;
              case "q":
                process.exit();
                break;
              default:
                lg('Unknown command. (Type "?" for help)');
                break;
            }
            A();
          });
        }
        A();
      }
      const Rg = {
        printConsole: lg,
        run: df
      }, RB = "./cache", Dr = 86400 * 1e3;
      let nr;
      function Yf(C) {
        return Mr.createHash("md5").update(C).digest("hex");
      }
      function qf() {
        if (!Sg.existsSync(RB)) {
          Sg.mkdirSync(RB, {
            recursive: true
          });
          return;
        }
        const C = Date.now(), A = Sg.readdirSync(RB);
        for (const I of A) {
          const g = Mo.join(RB, I), B = Sg.statSync(g);
          C - B.mtime.getTime() > Dr && Sg.unlinkSync(g);
        }
      }
      async function Lf(C, A) {
        const I = C.url, g = Yf(I), B = Mo.join(RB, g), Q = Mo.join(RB, `${g}.meta.json`);
        if (Sg.existsSync(B) && Sg.existsSync(Q)) {
          const i = Sg.statSync(B);
          if (Date.now() - i.mtime.getTime() <= Dr) try {
            const o = JSON.parse(Sg.readFileSync(Q, "utf-8")), t = Sg.readFileSync(B), e = new Response(t, {
              status: o.status,
              statusText: o.statusText,
              headers: new Headers(o.headers)
            });
            return Object.defineProperty(e, "url", {
              value: I
            }), e;
          } catch (o) {
            console.warn(`Failed to read cache for ${I}, fetching from network: `, o);
          }
        }
        const E = await nr(C, A);
        if (E.ok) try {
          const i = E.clone(), o = await i.arrayBuffer(), t = Buffer.from(o);
          Sg.writeFileSync(B, t);
          const e = {};
          i.headers.forEach((a, r) => {
            e[r] = a;
          });
          const s = {
            status: i.status,
            statusText: i.statusText,
            headers: e,
            cachedAt: Date.now()
          };
          Sg.writeFileSync(Q, JSON.stringify(s, null, 2));
        } catch (i) {
          console.warn(`Failed to cache response for ${I}:`, i);
        }
        return E;
      }
      async function ff() {
        await qf(), nr = fetch, globalThis.fetch = Lf;
      }
      const uf = {
        init: ff
      };
      await uf.init();
      const ko = AB.loadSettings();
      AB.init();
      Rg.printConsole("Connecting...");
      jI.connect(ko.accessToken, (C) => {
        switch (C) {
          case "open":
            Rg.printConsole("Loading..."), AB.open();
            break;
          case "start":
            AB.start(ko.team1Binary, ko.team2Binary), Rg.run();
            break;
          case "stop":
            break;
          case "disconnect":
            Rg.printConsole("Disconnected."), process.exit();
            break;
          case "conflict":
            Rg.printConsole("Logged out due to login from another device."), process.exit();
            break;
          case "serverdown":
            Rg.printConsole("Server temporarily down. Try again in a few minutes."), process.exit();
            break;
          case "error":
            Rg.printConsole("Server error.");
            break;
        }
      });
    })();
  }
});
export default require_stdin();
